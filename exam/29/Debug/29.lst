
29.elf:     file format elf32-littlearm
29.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00006c59

Program Header:
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000068c0 memsz 0x000068c0 flags r--
    LOAD off    0x00006c00 vaddr 0x00006c00 paddr 0x00006c00 align 2**16
         filesz 0x00000010 memsz 0x00000010 flags r--
    LOAD off    0x00006c10 vaddr 0x00006c10 paddr 0x00006c10 align 2**16
         filesz 0x00003eb8 memsz 0x00003eb8 flags rwx
    LOAD off    0x00010400 vaddr 0x20000400 paddr 0x0000aac8 align 2**16
         filesz 0x00000088 memsz 0x000003c0 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name            Size      VMA       LMA       File off  Algn  Flags
  0 .interrupts     000000c0  00006800  00006800  00006800  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flash_config   00000010  00006c00  00006c00  00006c00  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text           00003ea8  00006c10  00006c10  00006c10  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM            00000008  0000aab8  0000aab8  0000aab8  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array     00000004  0000aac0  0000aac0  0000aac0  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array     00000004  0000aac4  0000aac4  0000aac4  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .mtb            00000000  20000400  20000400  00010488  2**0  CONTENTS
  7 .data           00000088  20000400  0000aac8  00010400  2**2  CONTENTS, ALLOC, LOAD, DATA
  8 .bss            00000038  20000488  0000ab50  00010488  2**2  ALLOC
  9 .heap           00000200  200004c0  0000ab88  00010488  2**0  ALLOC
 10 .stack          00000100  200006c0  0000ad88  00010488  2**0  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010488  2**0  CONTENTS, READONLY
 12 .debug_info     000083c8  00000000  00000000  000104b0  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev   00001a95  00000000  00000000  00018878  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc      0000293e  00000000  00000000  0001a30d  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges  00000338  00000000  00000000  0001cc50  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges   00000268  00000000  00000000  0001cf88  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro    0000f4bf  00000000  00000000  0001d1f0  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_line     00002f03  00000000  00000000  0002c6af  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_str      0004f16a  00000000  00000000  0002f5b2  2**0  CONTENTS, READONLY, DEBUGGING
 20 .comment        0000007e  00000000  00000000  0007e71c  2**0  CONTENTS, READONLY
 21 .debug_frame    00000d98  00000000  00000000  0007e79c  2**2  CONTENTS, READONLY, DEBUGGING
 22 .stab           00000024  00000000  00000000  0007f534  2**2  CONTENTS, READONLY, DEBUGGING
 23 .stabstr        0000004e  00000000  00000000  0007f558  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00006800 l    d  .interrupts	00000000 .interrupts
00006c00 l    d  .flash_config	00000000 .flash_config
00006c10 l    d  .text	00000000 .text
0000aab8 l    d  .ARM	00000000 .ARM
0000aac0 l    d  .init_array	00000000 .init_array
0000aac4 l    d  .fini_array	00000000 .fini_array
20000400 l    d  .mtb	00000000 .mtb
20000400 l    d  .data	00000000 .data
20000488 l    d  .bss	00000000 .bss
200004c0 l    d  .heap	00000000 .heap
200006c0 l    d  .stack	00000000 .stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 ./obj/startup_MKL36Z4.o
00000000 l    df *ABS*	00000000 crtstuff.c
0000aaa0 l     O .text	00000000 __EH_FRAME_BEGIN__
00006c10 l     F .text	00000000 __do_global_dtors_aux
20000488 l       .bss	00000001 completed.8654
0000aac4 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00006c38 l     F .text	00000000 frame_dummy
2000048c l       .bss	00000018 object.8659
0000aac0 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 _udivsi3.o
00006ca8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
00006dbc l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_cmpsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 floatunsisf.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 _clzsi2.o
00000000 l    df *ABS*	00000000 _clzdi2.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 system_MKL36Z4.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 wdog.c
00000000 l    df *ABS*	00000000 pwm.c
00009208 l     F .text	000000a0 tpm_mux_val
000092a8 l     F .text	0000009c tpm_timer_init1
0000a950 l     O .text	00000014 PORT_ARR
00000000 l    df *ABS*	00000000 gec.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 isr.c
200004a4 l     O .bss	00000001 TimerCount.5126
00000000 l    df *ABS*	00000000 printf.c
00009a24 l     F .text	0000002a printk_putc
00009a4e l     F .text	00000084 printk_mknumstr
00009ad2 l     F .text	0000001e printk_pad_zero
00009af0 l     F .text	0000001e printk_pad_space
00000000 l    df *ABS*	00000000 incapture.c
0000a228 l     F .text	000000a0 tpm_mux_val
0000a2c8 l     F .text	0000007c tpm_timer_init2
0000aa7c l     O .text	00000014 PORT_ARR
0000aa90 l     O .text	0000000c TPM_ARR
0000aa9c l     O .text	00000003 TPM_IRQ
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 gettod.c
00000000 l    df *ABS*	00000000 sbrk.c
200004b0 l     O .bss	00000004 heap_end.4102
00000000 l    df *ABS*	00000000 d:/嵌入式技术app/ahl-gec-ide(4.11)/gcc/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v6-m/crti.o
00000000 l    df *ABS*	00000000 d:/嵌入式技术app/ahl-gec-ide(4.11)/gcc/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v6-m/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000428 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
0000aac4 l       .init_array	00000000 __init_array_end
0000aac0 l       .init_array	00000000 __preinit_array_end
0000aac0 l       .init_array	00000000 __init_array_start
0000aac0 l       .init_array	00000000 __preinit_array_start
200004c0 g       .heap	00000000 __HeapBase
00006fd4 g     F .text	00000012 .hidden __aeabi_dcmple
000090cc g     F .text	00000008 flash_read_physical
00007de0 g     F .text	00000078 .hidden __eqdf2
0000a5f4 g     F .text	00000024 _gettimeofday_r
20000400 g       .data	00000000 __data_start__
0000a48c g     F .text	00000034 cap_get_flag
00000100 g       *ABS*	00000000 STACK_SIZE
00006ca0  w    F .text	00000006 I2C0_IRQHandler
00008d28 g     F .text	0000001c lptmr_enable_int
0000003e g       *ABS*	00000000 GEC_USER_SECTOR_END
00006ca0  w    F .text	00000006 HardFault_Handler
0000a70e g     F .text	00000002 __malloc_unlock
00006ca0  w    F .text	00000006 SysTick_Handler
0000a428 g     F .text	00000030 get_incapture_value
00006ca0  w    F .text	00000006 PendSV_Handler
00006ca0  w    F .text	00000006 NMI_Handler
0000aac0 g       .ARM	00000000 __exidx_end
00006ca0  w    F .text	00000006 PORTC_PORTD_IRQHandler
00008e60 g     F .text	0000001c timer_enable_int
00006ca0  w    F .text	00000006 I2C1_IRQHandler
00006ca0  w    F .text	00000006 UART1_IRQHandler
00007e58 g     F .text	000000c8 .hidden __gtdf2
0000aac8 g       .fini_array	00000000 __etext
0000a344 g     F .text	000000e4 incapture_init
00006ca0  w    F .text	00000006 DMA2_IRQHandler
000098e0 g     F .text	00000050 uart_enable_re_int
0000998c g     F .text	00000028 TPM0_IRQHandler
200004bc g     O .bss	00000004 errno
20000400 g     O .data	0000000c TPM_ARR
00006fa4 g     F .text	00000010 .hidden __aeabi_cdcmple
00006ca0  w    F .text	00000006 I2S0_IRQHandler
00006ca0  w    F .text	00000006 LLWU_IRQHandler
0000001a g       *ABS*	00000000 GEC_USER_SECTOR_START
00006ca0  w    F .text	00000006 TSI0_IRQHandler
00009930 g     F .text	0000005c UART0_IRQHandler
00008ebc g     F .text	00000014 tpm_clear_int
0000a4f0 g     F .text	00000012 memcpy
00006f94 g     F .text	00000020 .hidden __aeabi_cdrcmple
0000705c g     F .text	00000012 .hidden __aeabi_fcmpgt
00007f20 g     F .text	000000d0 .hidden __ltdf2
0000aac0 g       .init_array	00000000 __DTOR_END__
00007084 g     F .text	0000003e .hidden __aeabi_uldivmod
20000410 g     O .data	00000004 SystemCoreClock
00006ca0  w    F .text	00000006 ADC0_IRQHandler
0000a618 g     F .text	00000014 malloc
00006ca8 g     F .text	0000010a .hidden __udivsi3
20000488 g       .bss	00000000 __START_BSS
00007ccc g     F .text	00000094 .hidden __aeabi_i2f
00007600 g     F .text	0000009e .hidden __lesf2
000070f4 g     F .text	0000003c .hidden __fixunsdfsi
200006c0 g       .heap	00000000 __HeapLimit
20000488 g       .bss	00000000 __bss_start__
00009138 g     F .text	00000068 flash_erase
00008bd0 g     F .text	00000064 .hidden __aeabi_ui2d
00006ca0  w    F .text	00000006 SPI1_IRQHandler
0000716c g     F .text	00000182 .hidden __udivmoddi4
0000a6e8 g     F .text	00000024 _sbrk_r
00006ca0  w    F .text	00000006 DefaultISR
00006fc0 g     F .text	00000012 .hidden __aeabi_dcmplt
00007514 g     F .text	0000004e .hidden __nesf2
0000aab8 g       .ARM	00000000 __exidx_start
00007ff0 g     F .text	000004e4 .hidden __aeabi_dmul
00008c98 g     F .text	00000054 .hidden __aeabi_lmul
0000a720 g     F .text	0000001c _sbrk
00009b1c g     F .text	00000188 printk_mkfloatstr
0000aaa0 g     F .text	00000000 _init
00006ca0  w    F .text	00000006 TPM2_IRQHandler
00008ed0 g     F .text	00000024 timer_clear_int
00007130 g     F .text	0000003c .hidden __aeabi_d2ulz
00007904 g     F .text	00000388 .hidden __aeabi_fsub
00006ca0  w    F .text	00000006 RTC_IRQHandler
00000400 g       *ABS*	00000000 MCU_SECTORSIZE
00006c58  w    F .text	00000048 Reset_Handler
0000a458 g     F .text	00000034 cap_clear_flag
00007070 g     F .text	00000012 .hidden __aeabi_fcmpge
00006ca0  w    F .text	00000006 LCD_IRQHandler
00008e10 g     F .text	00000030 timer_init
00007564 g     F .text	0000009c .hidden __gtsf2
00009894 g     F .text	0000004a uart_reN
00009344 g     F .text	00000250 pwm_init
2000040c g     O .data	00000003 TPM_IRQ
00007f20 g     F .text	000000d0 .hidden __ledf2
200017ff g       *ABS*	00000000 GEC_USER_RAM_END
0000a204 g     F .text	00000024 myprintf
00007048 g     F .text	00000012 .hidden __aeabi_fcmple
00006ca0  w    F .text	00000006 RTC_Seconds_IRQHandler
200004c0 g       .heap	00000000 end
00006dbc g     F .text	00000000 .hidden __aeabi_idiv
00006ca0  w    F .text	00000006 MCG_IRQHandler
00006ca0  w    F .text	00000006 UART2_IRQHandler
20000488 g       .data	00000000 __data_end__
0000aac0 g       .init_array	00000000 __CTOR_LIST__
00000200 g       *ABS*	00000000 HEAP_SIZE
00006fe8 g     F .text	00000012 .hidden __aeabi_dcmpgt
00008c34 g     F .text	0000003c .hidden __clzsi2
00009688 g     F .text	00000148 uart_init
200004c0 g       .bss	00000000 __bss_end__
00006ca0  w    F .text	00000006 Reserved20_IRQHandler
00006ffc g     F .text	00000012 .hidden __aeabi_dcmpge
000090f4 g     F .text	00000044 flash_cmd_launch
200004b4 g     O .bss	00000003 gTime
000084d4 g     F .text	00000690 .hidden __aeabi_dsub
200004b8 g     O .bss	00000004 component_fun
0000a55c g     F .text	00000064 rand
20000400 g       *ABS*	00000000 GEC_USER_RAM_START
0000a9ac g     O .text	00000008 UART_ARR
00007c8c g     F .text	00000040 .hidden __aeabi_f2iz
00007514 g     F .text	0000004e .hidden __eqsf2
00008cec g     F .text	0000003c lptmr_init
000072f0 g     F .text	00000224 .hidden __aeabi_fdiv
00009b0e g     F .text	0000000c out_char
00009ca4 g     F .text	0000055e printk
00006f90  w    F .text	00000002 .hidden __aeabi_ldiv0
20000420 g     O .data	00000003 table_irq_uart
00008e94 g     F .text	00000028 timer_get_int
00007d60 g     F .text	00000080 .hidden __aeabi_ui2f
0000982c g     F .text	00000068 uart_re1
0000a70c g     F .text	00000002 __malloc_lock
0000a502 g     F .text	00000010 memset
00006800 g       .interrupts	000000c0 __isr_vector
00008fb8 g     F .text	00000114 main
0000a514 g     F .text	00000048 srand
00006ca0  w    F .text	00000006 PIT_IRQHandler
00007600 g     F .text	0000009e .hidden __ltsf2
00006ca8 g     F .text	00000000 .hidden __aeabi_uidiv
00006ca0  w    F .text	00000006 SVC_Handler
20000400 g       .data	00000000 __DATA_RAM
0000a62c g     F .text	000000bc _malloc_r
0000a5c0 g     F .text	00000034 time
00008e40 g     F .text	00000020 tpm_enable_int
200004c0 g       .heap	00000000 __end__
00007018 g     F .text	00000010 .hidden __aeabi_cfcmple
00006dbc g     F .text	000001cc .hidden __divsi3
0000aac0 g       .init_array	00000000 __CTOR_END__
000099b4 g     F .text	00000032 SecAdd1
00006ca0  w    F .text	00000006 DMA3_IRQHandler
0000aac0 g       .init_array	00000000 __DTOR_LIST__
200004c0 g       .bss	00000000 __END_BSS
00008ef4 g     F .text	000000c4 SystemInit
00006ca0  w    F .text	00000006 DMA0_IRQHandler
00007de0 g     F .text	00000078 .hidden __nedf2
00007130 g     F .text	0000003c .hidden __fixunsdfdi
0000aaac g     F .text	00000000 _fini
00006ca0  w    F .text	00000006 DAC0_IRQHandler
00008e7c g     F .text	00000018 tpm_get_int
00007564 g     F .text	0000009c .hidden __gesf2
20001800 g       .stack	00000000 __StackTop
20000424 g     O .data	00000004 _impure_ptr
00007028 g     F .text	0000000c .hidden __aeabi_fcmpeq
000076a0 g     F .text	00000264 .hidden __aeabi_fmul
000091a0 g     F .text	00000054 flash_write_physical
20000400 g       .mtb	00000000 _mtb_end
00007010 g     F .text	00000018 .hidden __aeabi_cfrcmple
0000ab50 g       *ABS*	00000000 __DATA_END
000090d4 g     F .text	0000001e flash_isempty
000070f4 g     F .text	0000003c .hidden __aeabi_d2uiz
000099e8 g     F .text	0000003c TPM1_IRQHandler
00007034 g     F .text	00000012 .hidden __aeabi_fcmplt
000095f0 g     F .text	0000008c Vectors_Init
20001800 g       *ABS*	00000000 __stack
00006db4 g     F .text	00000008 .hidden __aeabi_uidivmod
00006fb4 g     F .text	0000000c .hidden __aeabi_dcmpeq
00006ca0  w    F .text	00000006 LVD_LVW_IRQHandler
00006ca0  w    F .text	00000006 SPI0_IRQHandler
00006ca0  w    F .text	00000006 PORTA_IRQHandler
0000a4c0 g     F .text	00000030 cap_enable_int
00006800 g       .interrupts	00000000 __VECTOR_TABLE
0000aac8 g       .fini_array	00000000 __DATA_ROM
000070c4 g     F .text	00000030 .hidden __aeabi_f2uiz
20001700 g       *ABS*	00000000 __StackLimit
20000414 g     O .data	0000000c PWM_ARR
00006ca0  w    F .text	00000006 FTFA_IRQHandler
00008b64 g     F .text	0000006c .hidden __aeabi_d2iz
00007018 g     F .text	00000010 .hidden __aeabi_cfcmpeq
20000400 g       .mtb	00000000 _mtb_start
00006ca0  w    F .text	00000006 Reserved40_IRQHandler
0000a710 g     F .text	00000010 _gettimeofday
00006f90  w    F .text	00000002 .hidden __aeabi_idiv0
000070c4 g     F .text	00000030 .hidden __fixunssfsi
00006ca0  w    F .text	00000006 LPTMR0_IRQHandler
00009594 g     F .text	0000005c pwm_update
00008c98 g     F .text	00000054 .hidden __muldi3
00008c88 g     F .text	0000000e strlen
00006fa4 g     F .text	00000010 .hidden __aeabi_cdcmpeq
00007e58 g     F .text	000000c8 .hidden __gedf2
000097d0 g     F .text	0000005c uart_send1
200004ac g     O .bss	00000004 __malloc_sbrk_start
000091f4 g     F .text	00000014 wdog_stop
0000967c g     F .text	0000000c uart_is_uartNo
200004a8 g     O .bss	00000004 __malloc_free_list
00008c70 g     F .text	00000016 .hidden __clzdi2
00006ca0  w    F .text	00000006 CMP0_IRQHandler
00006f88 g     F .text	00000008 .hidden __aeabi_idivmod
00008d44 g     F .text	000000cc tpm_timer_init
00000000 g       *ABS*	00000000 MCU_FLASH_ADDR_START
00006ca0  w    F .text	00000006 DMA1_IRQHandler



Disassembly of section .text:

00006c10 <__do_global_dtors_aux>:
__do_global_dtors_aux():
    6c10:	b510      	push	{r4, lr}
    6c12:	4c06      	ldr	r4, [pc, #24]	; (6c2c <__do_global_dtors_aux+0x1c>)
    6c14:	7823      	ldrb	r3, [r4, #0]
    6c16:	2b00      	cmp	r3, #0
    6c18:	d107      	bne.n	6c2a <__do_global_dtors_aux+0x1a>
    6c1a:	4b05      	ldr	r3, [pc, #20]	; (6c30 <__do_global_dtors_aux+0x20>)
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d002      	beq.n	6c26 <__do_global_dtors_aux+0x16>
    6c20:	4804      	ldr	r0, [pc, #16]	; (6c34 <__do_global_dtors_aux+0x24>)
    6c22:	e000      	b.n	6c26 <__do_global_dtors_aux+0x16>
    6c24:	bf00      	nop
    6c26:	2301      	movs	r3, #1
    6c28:	7023      	strb	r3, [r4, #0]
    6c2a:	bd10      	pop	{r4, pc}
    6c2c:	20000488 	.word	0x20000488
    6c30:	00000000 	.word	0x00000000
    6c34:	0000aaa0 	.word	0x0000aaa0

00006c38 <frame_dummy>:
frame_dummy():
    6c38:	4b04      	ldr	r3, [pc, #16]	; (6c4c <frame_dummy+0x14>)
    6c3a:	b510      	push	{r4, lr}
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d003      	beq.n	6c48 <frame_dummy+0x10>
    6c40:	4903      	ldr	r1, [pc, #12]	; (6c50 <frame_dummy+0x18>)
    6c42:	4804      	ldr	r0, [pc, #16]	; (6c54 <frame_dummy+0x1c>)
    6c44:	e000      	b.n	6c48 <frame_dummy+0x10>
    6c46:	bf00      	nop
    6c48:	bd10      	pop	{r4, pc}
    6c4a:	46c0      	nop			; (mov r8, r8)
    6c4c:	00000000 	.word	0x00000000
    6c50:	2000048c 	.word	0x2000048c
    6c54:	0000aaa0 	.word	0x0000aaa0

00006c58 <Reset_Handler>:
Reset_Handler():
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:118
    .align 2
    .globl   Reset_Handler
    .weak    Reset_Handler
    .type    Reset_Handler, %function
Reset_Handler:
    cpsid   i               /* Mask interrupts */
    6c58:	b672      	cpsid	i
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:120
#ifndef __NO_SYSTEM_INIT
    bl SystemInit
    6c5a:	f002 f94b 	bl	8ef4 <SystemInit>
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:122
#endif
    cpsie   i               /* Unmask interrupts */
    6c5e:	b662      	cpsie	i
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:130
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
    6c60:	490a      	ldr	r1, [pc, #40]	; (6c8c <Reset_Handler+0x34>)
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:131
    ldr    r2, =__data_start__
    6c62:	4a0b      	ldr	r2, [pc, #44]	; (6c90 <Reset_Handler+0x38>)
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:132
    ldr    r3, =__data_end__
    6c64:	4b0b      	ldr	r3, [pc, #44]	; (6c94 <Reset_Handler+0x3c>)
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:134

    subs    r3, r2
    6c66:	1a9b      	subs	r3, r3, r2
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:135
    ble     .LC0
    6c68:	dd03      	ble.n	6c72 <Reset_Handler+0x1a>
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:138

.LC1:
    subs    r3, 4
    6c6a:	3b04      	subs	r3, #4
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:139
    ldr    r0, [r1,r3]
    6c6c:	58c8      	ldr	r0, [r1, r3]
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:140
    str    r0, [r2,r3]
    6c6e:	50d0      	str	r0, [r2, r3]
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:141
    bgt    .LC1
    6c70:	dcfb      	bgt.n	6c6a <Reset_Handler+0x12>
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:154
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
    6c72:	4909      	ldr	r1, [pc, #36]	; (6c98 <Reset_Handler+0x40>)
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:155
    ldr r2, =__bss_end__
    6c74:	4a09      	ldr	r2, [pc, #36]	; (6c9c <Reset_Handler+0x44>)
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:157

    subs    r2, r1
    6c76:	1a52      	subs	r2, r2, r1
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:158
    ble .LC3
    6c78:	dd03      	ble.n	6c82 <Reset_Handler+0x2a>
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:160

    movs    r0, 0
    6c7a:	2000      	movs	r0, #0
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:162
.LC2:
    str r0, [r1, r2]
    6c7c:	5088      	str	r0, [r1, r2]
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:163
    subs    r2, 4
    6c7e:	3a04      	subs	r2, #4
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:164
    bge .LC2
    6c80:	dafc      	bge.n	6c7c <Reset_Handler+0x24>
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:173
#define __START _start
#endif


/*【User程序修改处1】*/
	bl	 Vectors_Init  
    6c82:	f002 fcb5 	bl	95f0 <Vectors_Init>
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:175
  //  bl    __START
   bl main
    6c86:	f002 f997 	bl	8fb8 <main>
    6c8a:	0000      	.short	0x0000
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:130
    ldr    r1, =__etext
    6c8c:	0000aac8 	.word	0x0000aac8
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:131
    ldr    r2, =__data_start__
    6c90:	20000400 	.word	0x20000400
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:132
    ldr    r3, =__data_end__
    6c94:	20000488 	.word	0x20000488
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:154
    ldr r1, =__bss_start__
    6c98:	20000488 	.word	0x20000488
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:155
    ldr r2, =__bss_end__
    6c9c:	200004c0 	.word	0x200004c0

00006ca0 <ADC0_IRQHandler>:
DMA1_IRQHandler():
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:186
    .weak DefaultISR
    .type DefaultISR, %function
DefaultISR:    
    //ldr	r0, =DefaultISR   //误中断，进入无限循环
    //bx r0
       push  {lr}        //【20200326】WYH改，误中断，回原处
    6ca0:	b500      	push	{lr}
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:187
       nop
    6ca2:	46c0      	nop			; (mov r8, r8)
D:\app_for_qianrushi\exam\29\Debug/srcs/startup_MKL36Z4.S:188
       pop   {pc}
    6ca4:	bd00      	pop	{pc}
    6ca6:	46c0      	nop			; (mov r8, r8)

00006ca8 <__udivsi3>:
__aeabi_uidiv():
    6ca8:	2200      	movs	r2, #0
    6caa:	0843      	lsrs	r3, r0, #1
    6cac:	428b      	cmp	r3, r1
    6cae:	d374      	bcc.n	6d9a <__udivsi3+0xf2>
    6cb0:	0903      	lsrs	r3, r0, #4
    6cb2:	428b      	cmp	r3, r1
    6cb4:	d35f      	bcc.n	6d76 <__udivsi3+0xce>
    6cb6:	0a03      	lsrs	r3, r0, #8
    6cb8:	428b      	cmp	r3, r1
    6cba:	d344      	bcc.n	6d46 <__udivsi3+0x9e>
    6cbc:	0b03      	lsrs	r3, r0, #12
    6cbe:	428b      	cmp	r3, r1
    6cc0:	d328      	bcc.n	6d14 <__udivsi3+0x6c>
    6cc2:	0c03      	lsrs	r3, r0, #16
    6cc4:	428b      	cmp	r3, r1
    6cc6:	d30d      	bcc.n	6ce4 <__udivsi3+0x3c>
    6cc8:	22ff      	movs	r2, #255	; 0xff
    6cca:	0209      	lsls	r1, r1, #8
    6ccc:	ba12      	rev	r2, r2
    6cce:	0c03      	lsrs	r3, r0, #16
    6cd0:	428b      	cmp	r3, r1
    6cd2:	d302      	bcc.n	6cda <__udivsi3+0x32>
    6cd4:	1212      	asrs	r2, r2, #8
    6cd6:	0209      	lsls	r1, r1, #8
    6cd8:	d065      	beq.n	6da6 <__udivsi3+0xfe>
    6cda:	0b03      	lsrs	r3, r0, #12
    6cdc:	428b      	cmp	r3, r1
    6cde:	d319      	bcc.n	6d14 <__udivsi3+0x6c>
    6ce0:	e000      	b.n	6ce4 <__udivsi3+0x3c>
    6ce2:	0a09      	lsrs	r1, r1, #8
    6ce4:	0bc3      	lsrs	r3, r0, #15
    6ce6:	428b      	cmp	r3, r1
    6ce8:	d301      	bcc.n	6cee <__udivsi3+0x46>
    6cea:	03cb      	lsls	r3, r1, #15
    6cec:	1ac0      	subs	r0, r0, r3
    6cee:	4152      	adcs	r2, r2
    6cf0:	0b83      	lsrs	r3, r0, #14
    6cf2:	428b      	cmp	r3, r1
    6cf4:	d301      	bcc.n	6cfa <__udivsi3+0x52>
    6cf6:	038b      	lsls	r3, r1, #14
    6cf8:	1ac0      	subs	r0, r0, r3
    6cfa:	4152      	adcs	r2, r2
    6cfc:	0b43      	lsrs	r3, r0, #13
    6cfe:	428b      	cmp	r3, r1
    6d00:	d301      	bcc.n	6d06 <__udivsi3+0x5e>
    6d02:	034b      	lsls	r3, r1, #13
    6d04:	1ac0      	subs	r0, r0, r3
    6d06:	4152      	adcs	r2, r2
    6d08:	0b03      	lsrs	r3, r0, #12
    6d0a:	428b      	cmp	r3, r1
    6d0c:	d301      	bcc.n	6d12 <__udivsi3+0x6a>
    6d0e:	030b      	lsls	r3, r1, #12
    6d10:	1ac0      	subs	r0, r0, r3
    6d12:	4152      	adcs	r2, r2
    6d14:	0ac3      	lsrs	r3, r0, #11
    6d16:	428b      	cmp	r3, r1
    6d18:	d301      	bcc.n	6d1e <__udivsi3+0x76>
    6d1a:	02cb      	lsls	r3, r1, #11
    6d1c:	1ac0      	subs	r0, r0, r3
    6d1e:	4152      	adcs	r2, r2
    6d20:	0a83      	lsrs	r3, r0, #10
    6d22:	428b      	cmp	r3, r1
    6d24:	d301      	bcc.n	6d2a <__udivsi3+0x82>
    6d26:	028b      	lsls	r3, r1, #10
    6d28:	1ac0      	subs	r0, r0, r3
    6d2a:	4152      	adcs	r2, r2
    6d2c:	0a43      	lsrs	r3, r0, #9
    6d2e:	428b      	cmp	r3, r1
    6d30:	d301      	bcc.n	6d36 <__udivsi3+0x8e>
    6d32:	024b      	lsls	r3, r1, #9
    6d34:	1ac0      	subs	r0, r0, r3
    6d36:	4152      	adcs	r2, r2
    6d38:	0a03      	lsrs	r3, r0, #8
    6d3a:	428b      	cmp	r3, r1
    6d3c:	d301      	bcc.n	6d42 <__udivsi3+0x9a>
    6d3e:	020b      	lsls	r3, r1, #8
    6d40:	1ac0      	subs	r0, r0, r3
    6d42:	4152      	adcs	r2, r2
    6d44:	d2cd      	bcs.n	6ce2 <__udivsi3+0x3a>
    6d46:	09c3      	lsrs	r3, r0, #7
    6d48:	428b      	cmp	r3, r1
    6d4a:	d301      	bcc.n	6d50 <__udivsi3+0xa8>
    6d4c:	01cb      	lsls	r3, r1, #7
    6d4e:	1ac0      	subs	r0, r0, r3
    6d50:	4152      	adcs	r2, r2
    6d52:	0983      	lsrs	r3, r0, #6
    6d54:	428b      	cmp	r3, r1
    6d56:	d301      	bcc.n	6d5c <__udivsi3+0xb4>
    6d58:	018b      	lsls	r3, r1, #6
    6d5a:	1ac0      	subs	r0, r0, r3
    6d5c:	4152      	adcs	r2, r2
    6d5e:	0943      	lsrs	r3, r0, #5
    6d60:	428b      	cmp	r3, r1
    6d62:	d301      	bcc.n	6d68 <__udivsi3+0xc0>
    6d64:	014b      	lsls	r3, r1, #5
    6d66:	1ac0      	subs	r0, r0, r3
    6d68:	4152      	adcs	r2, r2
    6d6a:	0903      	lsrs	r3, r0, #4
    6d6c:	428b      	cmp	r3, r1
    6d6e:	d301      	bcc.n	6d74 <__udivsi3+0xcc>
    6d70:	010b      	lsls	r3, r1, #4
    6d72:	1ac0      	subs	r0, r0, r3
    6d74:	4152      	adcs	r2, r2
    6d76:	08c3      	lsrs	r3, r0, #3
    6d78:	428b      	cmp	r3, r1
    6d7a:	d301      	bcc.n	6d80 <__udivsi3+0xd8>
    6d7c:	00cb      	lsls	r3, r1, #3
    6d7e:	1ac0      	subs	r0, r0, r3
    6d80:	4152      	adcs	r2, r2
    6d82:	0883      	lsrs	r3, r0, #2
    6d84:	428b      	cmp	r3, r1
    6d86:	d301      	bcc.n	6d8c <__udivsi3+0xe4>
    6d88:	008b      	lsls	r3, r1, #2
    6d8a:	1ac0      	subs	r0, r0, r3
    6d8c:	4152      	adcs	r2, r2
    6d8e:	0843      	lsrs	r3, r0, #1
    6d90:	428b      	cmp	r3, r1
    6d92:	d301      	bcc.n	6d98 <__udivsi3+0xf0>
    6d94:	004b      	lsls	r3, r1, #1
    6d96:	1ac0      	subs	r0, r0, r3
    6d98:	4152      	adcs	r2, r2
    6d9a:	1a41      	subs	r1, r0, r1
    6d9c:	d200      	bcs.n	6da0 <__udivsi3+0xf8>
    6d9e:	4601      	mov	r1, r0
    6da0:	4152      	adcs	r2, r2
    6da2:	4610      	mov	r0, r2
    6da4:	4770      	bx	lr
    6da6:	e7ff      	b.n	6da8 <__udivsi3+0x100>
    6da8:	b501      	push	{r0, lr}
    6daa:	2000      	movs	r0, #0
    6dac:	f000 f8f0 	bl	6f90 <__aeabi_idiv0>
    6db0:	bd02      	pop	{r1, pc}
    6db2:	46c0      	nop			; (mov r8, r8)

00006db4 <__aeabi_uidivmod>:
__aeabi_uidivmod():
    6db4:	2900      	cmp	r1, #0
    6db6:	d0f7      	beq.n	6da8 <__udivsi3+0x100>
    6db8:	e776      	b.n	6ca8 <__udivsi3>
    6dba:	4770      	bx	lr

00006dbc <__divsi3>:
__divsi3():
    6dbc:	4603      	mov	r3, r0
    6dbe:	430b      	orrs	r3, r1
    6dc0:	d47f      	bmi.n	6ec2 <__divsi3+0x106>
    6dc2:	2200      	movs	r2, #0
    6dc4:	0843      	lsrs	r3, r0, #1
    6dc6:	428b      	cmp	r3, r1
    6dc8:	d374      	bcc.n	6eb4 <__divsi3+0xf8>
    6dca:	0903      	lsrs	r3, r0, #4
    6dcc:	428b      	cmp	r3, r1
    6dce:	d35f      	bcc.n	6e90 <__divsi3+0xd4>
    6dd0:	0a03      	lsrs	r3, r0, #8
    6dd2:	428b      	cmp	r3, r1
    6dd4:	d344      	bcc.n	6e60 <__divsi3+0xa4>
    6dd6:	0b03      	lsrs	r3, r0, #12
    6dd8:	428b      	cmp	r3, r1
    6dda:	d328      	bcc.n	6e2e <__divsi3+0x72>
    6ddc:	0c03      	lsrs	r3, r0, #16
    6dde:	428b      	cmp	r3, r1
    6de0:	d30d      	bcc.n	6dfe <__divsi3+0x42>
    6de2:	22ff      	movs	r2, #255	; 0xff
    6de4:	0209      	lsls	r1, r1, #8
    6de6:	ba12      	rev	r2, r2
    6de8:	0c03      	lsrs	r3, r0, #16
    6dea:	428b      	cmp	r3, r1
    6dec:	d302      	bcc.n	6df4 <__divsi3+0x38>
    6dee:	1212      	asrs	r2, r2, #8
    6df0:	0209      	lsls	r1, r1, #8
    6df2:	d065      	beq.n	6ec0 <__divsi3+0x104>
    6df4:	0b03      	lsrs	r3, r0, #12
    6df6:	428b      	cmp	r3, r1
    6df8:	d319      	bcc.n	6e2e <__divsi3+0x72>
    6dfa:	e000      	b.n	6dfe <__divsi3+0x42>
    6dfc:	0a09      	lsrs	r1, r1, #8
    6dfe:	0bc3      	lsrs	r3, r0, #15
    6e00:	428b      	cmp	r3, r1
    6e02:	d301      	bcc.n	6e08 <__divsi3+0x4c>
    6e04:	03cb      	lsls	r3, r1, #15
    6e06:	1ac0      	subs	r0, r0, r3
    6e08:	4152      	adcs	r2, r2
    6e0a:	0b83      	lsrs	r3, r0, #14
    6e0c:	428b      	cmp	r3, r1
    6e0e:	d301      	bcc.n	6e14 <__divsi3+0x58>
    6e10:	038b      	lsls	r3, r1, #14
    6e12:	1ac0      	subs	r0, r0, r3
    6e14:	4152      	adcs	r2, r2
    6e16:	0b43      	lsrs	r3, r0, #13
    6e18:	428b      	cmp	r3, r1
    6e1a:	d301      	bcc.n	6e20 <__divsi3+0x64>
    6e1c:	034b      	lsls	r3, r1, #13
    6e1e:	1ac0      	subs	r0, r0, r3
    6e20:	4152      	adcs	r2, r2
    6e22:	0b03      	lsrs	r3, r0, #12
    6e24:	428b      	cmp	r3, r1
    6e26:	d301      	bcc.n	6e2c <__divsi3+0x70>
    6e28:	030b      	lsls	r3, r1, #12
    6e2a:	1ac0      	subs	r0, r0, r3
    6e2c:	4152      	adcs	r2, r2
    6e2e:	0ac3      	lsrs	r3, r0, #11
    6e30:	428b      	cmp	r3, r1
    6e32:	d301      	bcc.n	6e38 <__divsi3+0x7c>
    6e34:	02cb      	lsls	r3, r1, #11
    6e36:	1ac0      	subs	r0, r0, r3
    6e38:	4152      	adcs	r2, r2
    6e3a:	0a83      	lsrs	r3, r0, #10
    6e3c:	428b      	cmp	r3, r1
    6e3e:	d301      	bcc.n	6e44 <__divsi3+0x88>
    6e40:	028b      	lsls	r3, r1, #10
    6e42:	1ac0      	subs	r0, r0, r3
    6e44:	4152      	adcs	r2, r2
    6e46:	0a43      	lsrs	r3, r0, #9
    6e48:	428b      	cmp	r3, r1
    6e4a:	d301      	bcc.n	6e50 <__divsi3+0x94>
    6e4c:	024b      	lsls	r3, r1, #9
    6e4e:	1ac0      	subs	r0, r0, r3
    6e50:	4152      	adcs	r2, r2
    6e52:	0a03      	lsrs	r3, r0, #8
    6e54:	428b      	cmp	r3, r1
    6e56:	d301      	bcc.n	6e5c <__divsi3+0xa0>
    6e58:	020b      	lsls	r3, r1, #8
    6e5a:	1ac0      	subs	r0, r0, r3
    6e5c:	4152      	adcs	r2, r2
    6e5e:	d2cd      	bcs.n	6dfc <__divsi3+0x40>
    6e60:	09c3      	lsrs	r3, r0, #7
    6e62:	428b      	cmp	r3, r1
    6e64:	d301      	bcc.n	6e6a <__divsi3+0xae>
    6e66:	01cb      	lsls	r3, r1, #7
    6e68:	1ac0      	subs	r0, r0, r3
    6e6a:	4152      	adcs	r2, r2
    6e6c:	0983      	lsrs	r3, r0, #6
    6e6e:	428b      	cmp	r3, r1
    6e70:	d301      	bcc.n	6e76 <__divsi3+0xba>
    6e72:	018b      	lsls	r3, r1, #6
    6e74:	1ac0      	subs	r0, r0, r3
    6e76:	4152      	adcs	r2, r2
    6e78:	0943      	lsrs	r3, r0, #5
    6e7a:	428b      	cmp	r3, r1
    6e7c:	d301      	bcc.n	6e82 <__divsi3+0xc6>
    6e7e:	014b      	lsls	r3, r1, #5
    6e80:	1ac0      	subs	r0, r0, r3
    6e82:	4152      	adcs	r2, r2
    6e84:	0903      	lsrs	r3, r0, #4
    6e86:	428b      	cmp	r3, r1
    6e88:	d301      	bcc.n	6e8e <__divsi3+0xd2>
    6e8a:	010b      	lsls	r3, r1, #4
    6e8c:	1ac0      	subs	r0, r0, r3
    6e8e:	4152      	adcs	r2, r2
    6e90:	08c3      	lsrs	r3, r0, #3
    6e92:	428b      	cmp	r3, r1
    6e94:	d301      	bcc.n	6e9a <__divsi3+0xde>
    6e96:	00cb      	lsls	r3, r1, #3
    6e98:	1ac0      	subs	r0, r0, r3
    6e9a:	4152      	adcs	r2, r2
    6e9c:	0883      	lsrs	r3, r0, #2
    6e9e:	428b      	cmp	r3, r1
    6ea0:	d301      	bcc.n	6ea6 <__divsi3+0xea>
    6ea2:	008b      	lsls	r3, r1, #2
    6ea4:	1ac0      	subs	r0, r0, r3
    6ea6:	4152      	adcs	r2, r2
    6ea8:	0843      	lsrs	r3, r0, #1
    6eaa:	428b      	cmp	r3, r1
    6eac:	d301      	bcc.n	6eb2 <__divsi3+0xf6>
    6eae:	004b      	lsls	r3, r1, #1
    6eb0:	1ac0      	subs	r0, r0, r3
    6eb2:	4152      	adcs	r2, r2
    6eb4:	1a41      	subs	r1, r0, r1
    6eb6:	d200      	bcs.n	6eba <__divsi3+0xfe>
    6eb8:	4601      	mov	r1, r0
    6eba:	4152      	adcs	r2, r2
    6ebc:	4610      	mov	r0, r2
    6ebe:	4770      	bx	lr
    6ec0:	e05d      	b.n	6f7e <__divsi3+0x1c2>
    6ec2:	0fca      	lsrs	r2, r1, #31
    6ec4:	d000      	beq.n	6ec8 <__divsi3+0x10c>
    6ec6:	4249      	negs	r1, r1
    6ec8:	1003      	asrs	r3, r0, #32
    6eca:	d300      	bcc.n	6ece <__divsi3+0x112>
    6ecc:	4240      	negs	r0, r0
    6ece:	4053      	eors	r3, r2
    6ed0:	2200      	movs	r2, #0
    6ed2:	469c      	mov	ip, r3
    6ed4:	0903      	lsrs	r3, r0, #4
    6ed6:	428b      	cmp	r3, r1
    6ed8:	d32d      	bcc.n	6f36 <__divsi3+0x17a>
    6eda:	0a03      	lsrs	r3, r0, #8
    6edc:	428b      	cmp	r3, r1
    6ede:	d312      	bcc.n	6f06 <__divsi3+0x14a>
    6ee0:	22fc      	movs	r2, #252	; 0xfc
    6ee2:	0189      	lsls	r1, r1, #6
    6ee4:	ba12      	rev	r2, r2
    6ee6:	0a03      	lsrs	r3, r0, #8
    6ee8:	428b      	cmp	r3, r1
    6eea:	d30c      	bcc.n	6f06 <__divsi3+0x14a>
    6eec:	0189      	lsls	r1, r1, #6
    6eee:	1192      	asrs	r2, r2, #6
    6ef0:	428b      	cmp	r3, r1
    6ef2:	d308      	bcc.n	6f06 <__divsi3+0x14a>
    6ef4:	0189      	lsls	r1, r1, #6
    6ef6:	1192      	asrs	r2, r2, #6
    6ef8:	428b      	cmp	r3, r1
    6efa:	d304      	bcc.n	6f06 <__divsi3+0x14a>
    6efc:	0189      	lsls	r1, r1, #6
    6efe:	d03a      	beq.n	6f76 <__divsi3+0x1ba>
    6f00:	1192      	asrs	r2, r2, #6
    6f02:	e000      	b.n	6f06 <__divsi3+0x14a>
    6f04:	0989      	lsrs	r1, r1, #6
    6f06:	09c3      	lsrs	r3, r0, #7
    6f08:	428b      	cmp	r3, r1
    6f0a:	d301      	bcc.n	6f10 <__divsi3+0x154>
    6f0c:	01cb      	lsls	r3, r1, #7
    6f0e:	1ac0      	subs	r0, r0, r3
    6f10:	4152      	adcs	r2, r2
    6f12:	0983      	lsrs	r3, r0, #6
    6f14:	428b      	cmp	r3, r1
    6f16:	d301      	bcc.n	6f1c <__divsi3+0x160>
    6f18:	018b      	lsls	r3, r1, #6
    6f1a:	1ac0      	subs	r0, r0, r3
    6f1c:	4152      	adcs	r2, r2
    6f1e:	0943      	lsrs	r3, r0, #5
    6f20:	428b      	cmp	r3, r1
    6f22:	d301      	bcc.n	6f28 <__divsi3+0x16c>
    6f24:	014b      	lsls	r3, r1, #5
    6f26:	1ac0      	subs	r0, r0, r3
    6f28:	4152      	adcs	r2, r2
    6f2a:	0903      	lsrs	r3, r0, #4
    6f2c:	428b      	cmp	r3, r1
    6f2e:	d301      	bcc.n	6f34 <__divsi3+0x178>
    6f30:	010b      	lsls	r3, r1, #4
    6f32:	1ac0      	subs	r0, r0, r3
    6f34:	4152      	adcs	r2, r2
    6f36:	08c3      	lsrs	r3, r0, #3
    6f38:	428b      	cmp	r3, r1
    6f3a:	d301      	bcc.n	6f40 <__divsi3+0x184>
    6f3c:	00cb      	lsls	r3, r1, #3
    6f3e:	1ac0      	subs	r0, r0, r3
    6f40:	4152      	adcs	r2, r2
    6f42:	0883      	lsrs	r3, r0, #2
    6f44:	428b      	cmp	r3, r1
    6f46:	d301      	bcc.n	6f4c <__divsi3+0x190>
    6f48:	008b      	lsls	r3, r1, #2
    6f4a:	1ac0      	subs	r0, r0, r3
    6f4c:	4152      	adcs	r2, r2
    6f4e:	d2d9      	bcs.n	6f04 <__divsi3+0x148>
    6f50:	0843      	lsrs	r3, r0, #1
    6f52:	428b      	cmp	r3, r1
    6f54:	d301      	bcc.n	6f5a <__divsi3+0x19e>
    6f56:	004b      	lsls	r3, r1, #1
    6f58:	1ac0      	subs	r0, r0, r3
    6f5a:	4152      	adcs	r2, r2
    6f5c:	1a41      	subs	r1, r0, r1
    6f5e:	d200      	bcs.n	6f62 <__divsi3+0x1a6>
    6f60:	4601      	mov	r1, r0
    6f62:	4663      	mov	r3, ip
    6f64:	4152      	adcs	r2, r2
    6f66:	105b      	asrs	r3, r3, #1
    6f68:	4610      	mov	r0, r2
    6f6a:	d301      	bcc.n	6f70 <__divsi3+0x1b4>
    6f6c:	4240      	negs	r0, r0
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d500      	bpl.n	6f74 <__divsi3+0x1b8>
    6f72:	4249      	negs	r1, r1
    6f74:	4770      	bx	lr
    6f76:	4663      	mov	r3, ip
    6f78:	105b      	asrs	r3, r3, #1
    6f7a:	d300      	bcc.n	6f7e <__divsi3+0x1c2>
    6f7c:	4240      	negs	r0, r0
    6f7e:	b501      	push	{r0, lr}
    6f80:	2000      	movs	r0, #0
    6f82:	f000 f805 	bl	6f90 <__aeabi_idiv0>
    6f86:	bd02      	pop	{r1, pc}

00006f88 <__aeabi_idivmod>:
__aeabi_idivmod():
    6f88:	2900      	cmp	r1, #0
    6f8a:	d0f8      	beq.n	6f7e <__divsi3+0x1c2>
    6f8c:	e716      	b.n	6dbc <__divsi3>
    6f8e:	4770      	bx	lr

00006f90 <__aeabi_idiv0>:
__aeabi_idiv0():
    6f90:	4770      	bx	lr
    6f92:	46c0      	nop			; (mov r8, r8)

00006f94 <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
    6f94:	4684      	mov	ip, r0
    6f96:	1c10      	adds	r0, r2, #0
    6f98:	4662      	mov	r2, ip
    6f9a:	468c      	mov	ip, r1
    6f9c:	1c19      	adds	r1, r3, #0
    6f9e:	4663      	mov	r3, ip
    6fa0:	e000      	b.n	6fa4 <__aeabi_cdcmpeq>
    6fa2:	46c0      	nop			; (mov r8, r8)

00006fa4 <__aeabi_cdcmpeq>:
__aeabi_cdcmpeq():
    6fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6fa6:	f000 ffbb 	bl	7f20 <__ledf2>
    6faa:	2800      	cmp	r0, #0
    6fac:	d401      	bmi.n	6fb2 <__aeabi_cdcmpeq+0xe>
    6fae:	2100      	movs	r1, #0
    6fb0:	42c8      	cmn	r0, r1
    6fb2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006fb4 <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
    6fb4:	b510      	push	{r4, lr}
    6fb6:	f000 ff13 	bl	7de0 <__eqdf2>
    6fba:	4240      	negs	r0, r0
    6fbc:	3001      	adds	r0, #1
    6fbe:	bd10      	pop	{r4, pc}

00006fc0 <__aeabi_dcmplt>:
__aeabi_dcmplt():
    6fc0:	b510      	push	{r4, lr}
    6fc2:	f000 ffad 	bl	7f20 <__ledf2>
    6fc6:	2800      	cmp	r0, #0
    6fc8:	db01      	blt.n	6fce <__aeabi_dcmplt+0xe>
    6fca:	2000      	movs	r0, #0
    6fcc:	bd10      	pop	{r4, pc}
    6fce:	2001      	movs	r0, #1
    6fd0:	bd10      	pop	{r4, pc}
    6fd2:	46c0      	nop			; (mov r8, r8)

00006fd4 <__aeabi_dcmple>:
__aeabi_dcmple():
    6fd4:	b510      	push	{r4, lr}
    6fd6:	f000 ffa3 	bl	7f20 <__ledf2>
    6fda:	2800      	cmp	r0, #0
    6fdc:	dd01      	ble.n	6fe2 <__aeabi_dcmple+0xe>
    6fde:	2000      	movs	r0, #0
    6fe0:	bd10      	pop	{r4, pc}
    6fe2:	2001      	movs	r0, #1
    6fe4:	bd10      	pop	{r4, pc}
    6fe6:	46c0      	nop			; (mov r8, r8)

00006fe8 <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
    6fe8:	b510      	push	{r4, lr}
    6fea:	f000 ff35 	bl	7e58 <__gedf2>
    6fee:	2800      	cmp	r0, #0
    6ff0:	dc01      	bgt.n	6ff6 <__aeabi_dcmpgt+0xe>
    6ff2:	2000      	movs	r0, #0
    6ff4:	bd10      	pop	{r4, pc}
    6ff6:	2001      	movs	r0, #1
    6ff8:	bd10      	pop	{r4, pc}
    6ffa:	46c0      	nop			; (mov r8, r8)

00006ffc <__aeabi_dcmpge>:
__aeabi_dcmpge():
    6ffc:	b510      	push	{r4, lr}
    6ffe:	f000 ff2b 	bl	7e58 <__gedf2>
    7002:	2800      	cmp	r0, #0
    7004:	da01      	bge.n	700a <__aeabi_dcmpge+0xe>
    7006:	2000      	movs	r0, #0
    7008:	bd10      	pop	{r4, pc}
    700a:	2001      	movs	r0, #1
    700c:	bd10      	pop	{r4, pc}
    700e:	46c0      	nop			; (mov r8, r8)

00007010 <__aeabi_cfrcmple>:
__aeabi_cfrcmple():
    7010:	4684      	mov	ip, r0
    7012:	1c08      	adds	r0, r1, #0
    7014:	4661      	mov	r1, ip
    7016:	e7ff      	b.n	7018 <__aeabi_cfcmpeq>

00007018 <__aeabi_cfcmpeq>:
__aeabi_cfcmpeq():
    7018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    701a:	f000 faf1 	bl	7600 <__lesf2>
    701e:	2800      	cmp	r0, #0
    7020:	d401      	bmi.n	7026 <__aeabi_cfcmpeq+0xe>
    7022:	2100      	movs	r1, #0
    7024:	42c8      	cmn	r0, r1
    7026:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007028 <__aeabi_fcmpeq>:
__aeabi_fcmpeq():
    7028:	b510      	push	{r4, lr}
    702a:	f000 fa73 	bl	7514 <__eqsf2>
    702e:	4240      	negs	r0, r0
    7030:	3001      	adds	r0, #1
    7032:	bd10      	pop	{r4, pc}

00007034 <__aeabi_fcmplt>:
__aeabi_fcmplt():
    7034:	b510      	push	{r4, lr}
    7036:	f000 fae3 	bl	7600 <__lesf2>
    703a:	2800      	cmp	r0, #0
    703c:	db01      	blt.n	7042 <__aeabi_fcmplt+0xe>
    703e:	2000      	movs	r0, #0
    7040:	bd10      	pop	{r4, pc}
    7042:	2001      	movs	r0, #1
    7044:	bd10      	pop	{r4, pc}
    7046:	46c0      	nop			; (mov r8, r8)

00007048 <__aeabi_fcmple>:
__aeabi_fcmple():
    7048:	b510      	push	{r4, lr}
    704a:	f000 fad9 	bl	7600 <__lesf2>
    704e:	2800      	cmp	r0, #0
    7050:	dd01      	ble.n	7056 <__aeabi_fcmple+0xe>
    7052:	2000      	movs	r0, #0
    7054:	bd10      	pop	{r4, pc}
    7056:	2001      	movs	r0, #1
    7058:	bd10      	pop	{r4, pc}
    705a:	46c0      	nop			; (mov r8, r8)

0000705c <__aeabi_fcmpgt>:
__aeabi_fcmpgt():
    705c:	b510      	push	{r4, lr}
    705e:	f000 fa81 	bl	7564 <__gesf2>
    7062:	2800      	cmp	r0, #0
    7064:	dc01      	bgt.n	706a <__aeabi_fcmpgt+0xe>
    7066:	2000      	movs	r0, #0
    7068:	bd10      	pop	{r4, pc}
    706a:	2001      	movs	r0, #1
    706c:	bd10      	pop	{r4, pc}
    706e:	46c0      	nop			; (mov r8, r8)

00007070 <__aeabi_fcmpge>:
__aeabi_fcmpge():
    7070:	b510      	push	{r4, lr}
    7072:	f000 fa77 	bl	7564 <__gesf2>
    7076:	2800      	cmp	r0, #0
    7078:	da01      	bge.n	707e <__aeabi_fcmpge+0xe>
    707a:	2000      	movs	r0, #0
    707c:	bd10      	pop	{r4, pc}
    707e:	2001      	movs	r0, #1
    7080:	bd10      	pop	{r4, pc}
    7082:	46c0      	nop			; (mov r8, r8)

00007084 <__aeabi_uldivmod>:
__aeabi_uldivmod():
    7084:	2b00      	cmp	r3, #0
    7086:	d111      	bne.n	70ac <__aeabi_uldivmod+0x28>
    7088:	2a00      	cmp	r2, #0
    708a:	d10f      	bne.n	70ac <__aeabi_uldivmod+0x28>
    708c:	2900      	cmp	r1, #0
    708e:	d100      	bne.n	7092 <__aeabi_uldivmod+0xe>
    7090:	2800      	cmp	r0, #0
    7092:	d002      	beq.n	709a <__aeabi_uldivmod+0x16>
    7094:	2100      	movs	r1, #0
    7096:	43c9      	mvns	r1, r1
    7098:	1c08      	adds	r0, r1, #0
    709a:	b407      	push	{r0, r1, r2}
    709c:	4802      	ldr	r0, [pc, #8]	; (70a8 <__aeabi_uldivmod+0x24>)
    709e:	a102      	add	r1, pc, #8	; (adr r1, 70a8 <__aeabi_uldivmod+0x24>)
    70a0:	1840      	adds	r0, r0, r1
    70a2:	9002      	str	r0, [sp, #8]
    70a4:	bd03      	pop	{r0, r1, pc}
    70a6:	46c0      	nop			; (mov r8, r8)
    70a8:	fffffee9 	.word	0xfffffee9
    70ac:	b403      	push	{r0, r1}
    70ae:	4668      	mov	r0, sp
    70b0:	b501      	push	{r0, lr}
    70b2:	9802      	ldr	r0, [sp, #8]
    70b4:	f000 f85a 	bl	716c <__udivmoddi4>
    70b8:	9b01      	ldr	r3, [sp, #4]
    70ba:	469e      	mov	lr, r3
    70bc:	b002      	add	sp, #8
    70be:	bc0c      	pop	{r2, r3}
    70c0:	4770      	bx	lr
    70c2:	46c0      	nop			; (mov r8, r8)

000070c4 <__aeabi_f2uiz>:
__fixunssfsi():
    70c4:	219e      	movs	r1, #158	; 0x9e
    70c6:	b510      	push	{r4, lr}
    70c8:	05c9      	lsls	r1, r1, #23
    70ca:	1c04      	adds	r4, r0, #0
    70cc:	f7ff ffd0 	bl	7070 <__aeabi_fcmpge>
    70d0:	2800      	cmp	r0, #0
    70d2:	d103      	bne.n	70dc <__aeabi_f2uiz+0x18>
    70d4:	1c20      	adds	r0, r4, #0
    70d6:	f000 fdd9 	bl	7c8c <__aeabi_f2iz>
    70da:	bd10      	pop	{r4, pc}
    70dc:	219e      	movs	r1, #158	; 0x9e
    70de:	1c20      	adds	r0, r4, #0
    70e0:	05c9      	lsls	r1, r1, #23
    70e2:	f000 fc0f 	bl	7904 <__aeabi_fsub>
    70e6:	f000 fdd1 	bl	7c8c <__aeabi_f2iz>
    70ea:	2380      	movs	r3, #128	; 0x80
    70ec:	061b      	lsls	r3, r3, #24
    70ee:	469c      	mov	ip, r3
    70f0:	4460      	add	r0, ip
    70f2:	e7f2      	b.n	70da <__aeabi_f2uiz+0x16>

000070f4 <__aeabi_d2uiz>:
__aeabi_d2uiz():
    70f4:	b570      	push	{r4, r5, r6, lr}
    70f6:	2200      	movs	r2, #0
    70f8:	4b0c      	ldr	r3, [pc, #48]	; (712c <__aeabi_d2uiz+0x38>)
    70fa:	0004      	movs	r4, r0
    70fc:	000d      	movs	r5, r1
    70fe:	f7ff ff7d 	bl	6ffc <__aeabi_dcmpge>
    7102:	2800      	cmp	r0, #0
    7104:	d104      	bne.n	7110 <__aeabi_d2uiz+0x1c>
    7106:	0020      	movs	r0, r4
    7108:	0029      	movs	r1, r5
    710a:	f001 fd2b 	bl	8b64 <__aeabi_d2iz>
    710e:	bd70      	pop	{r4, r5, r6, pc}
    7110:	4b06      	ldr	r3, [pc, #24]	; (712c <__aeabi_d2uiz+0x38>)
    7112:	2200      	movs	r2, #0
    7114:	0020      	movs	r0, r4
    7116:	0029      	movs	r1, r5
    7118:	f001 f9dc 	bl	84d4 <__aeabi_dsub>
    711c:	f001 fd22 	bl	8b64 <__aeabi_d2iz>
    7120:	2380      	movs	r3, #128	; 0x80
    7122:	061b      	lsls	r3, r3, #24
    7124:	469c      	mov	ip, r3
    7126:	4460      	add	r0, ip
    7128:	e7f1      	b.n	710e <__aeabi_d2uiz+0x1a>
    712a:	46c0      	nop			; (mov r8, r8)
    712c:	41e00000 	.word	0x41e00000

00007130 <__aeabi_d2ulz>:
__fixunsdfdi():
    7130:	b570      	push	{r4, r5, r6, lr}
    7132:	2200      	movs	r2, #0
    7134:	4b0b      	ldr	r3, [pc, #44]	; (7164 <__aeabi_d2ulz+0x34>)
    7136:	000d      	movs	r5, r1
    7138:	0004      	movs	r4, r0
    713a:	f000 ff59 	bl	7ff0 <__aeabi_dmul>
    713e:	f7ff ffd9 	bl	70f4 <__aeabi_d2uiz>
    7142:	0006      	movs	r6, r0
    7144:	f001 fd44 	bl	8bd0 <__aeabi_ui2d>
    7148:	2200      	movs	r2, #0
    714a:	4b07      	ldr	r3, [pc, #28]	; (7168 <__aeabi_d2ulz+0x38>)
    714c:	f000 ff50 	bl	7ff0 <__aeabi_dmul>
    7150:	0002      	movs	r2, r0
    7152:	000b      	movs	r3, r1
    7154:	0020      	movs	r0, r4
    7156:	0029      	movs	r1, r5
    7158:	f001 f9bc 	bl	84d4 <__aeabi_dsub>
    715c:	f7ff ffca 	bl	70f4 <__aeabi_d2uiz>
    7160:	0031      	movs	r1, r6
    7162:	bd70      	pop	{r4, r5, r6, pc}
    7164:	3df00000 	.word	0x3df00000
    7168:	41f00000 	.word	0x41f00000

0000716c <__udivmoddi4>:
__udivmoddi4():
    716c:	b5f0      	push	{r4, r5, r6, r7, lr}
    716e:	464f      	mov	r7, r9
    7170:	4646      	mov	r6, r8
    7172:	46d6      	mov	lr, sl
    7174:	b5c0      	push	{r6, r7, lr}
    7176:	0004      	movs	r4, r0
    7178:	b082      	sub	sp, #8
    717a:	000d      	movs	r5, r1
    717c:	4691      	mov	r9, r2
    717e:	4698      	mov	r8, r3
    7180:	428b      	cmp	r3, r1
    7182:	d82f      	bhi.n	71e4 <__udivmoddi4+0x78>
    7184:	d02c      	beq.n	71e0 <__udivmoddi4+0x74>
    7186:	4641      	mov	r1, r8
    7188:	4648      	mov	r0, r9
    718a:	f001 fd71 	bl	8c70 <__clzdi2>
    718e:	0029      	movs	r1, r5
    7190:	0006      	movs	r6, r0
    7192:	0020      	movs	r0, r4
    7194:	f001 fd6c 	bl	8c70 <__clzdi2>
    7198:	1a33      	subs	r3, r6, r0
    719a:	469c      	mov	ip, r3
    719c:	3b20      	subs	r3, #32
    719e:	469a      	mov	sl, r3
    71a0:	d500      	bpl.n	71a4 <__udivmoddi4+0x38>
    71a2:	e076      	b.n	7292 <__udivmoddi4+0x126>
    71a4:	464b      	mov	r3, r9
    71a6:	4652      	mov	r2, sl
    71a8:	4093      	lsls	r3, r2
    71aa:	001f      	movs	r7, r3
    71ac:	464b      	mov	r3, r9
    71ae:	4662      	mov	r2, ip
    71b0:	4093      	lsls	r3, r2
    71b2:	001e      	movs	r6, r3
    71b4:	42af      	cmp	r7, r5
    71b6:	d828      	bhi.n	720a <__udivmoddi4+0x9e>
    71b8:	d025      	beq.n	7206 <__udivmoddi4+0x9a>
    71ba:	4653      	mov	r3, sl
    71bc:	1ba4      	subs	r4, r4, r6
    71be:	41bd      	sbcs	r5, r7
    71c0:	2b00      	cmp	r3, #0
    71c2:	da00      	bge.n	71c6 <__udivmoddi4+0x5a>
    71c4:	e07b      	b.n	72be <__udivmoddi4+0x152>
    71c6:	2200      	movs	r2, #0
    71c8:	2300      	movs	r3, #0
    71ca:	9200      	str	r2, [sp, #0]
    71cc:	9301      	str	r3, [sp, #4]
    71ce:	2301      	movs	r3, #1
    71d0:	4652      	mov	r2, sl
    71d2:	4093      	lsls	r3, r2
    71d4:	9301      	str	r3, [sp, #4]
    71d6:	2301      	movs	r3, #1
    71d8:	4662      	mov	r2, ip
    71da:	4093      	lsls	r3, r2
    71dc:	9300      	str	r3, [sp, #0]
    71de:	e018      	b.n	7212 <__udivmoddi4+0xa6>
    71e0:	4282      	cmp	r2, r0
    71e2:	d9d0      	bls.n	7186 <__udivmoddi4+0x1a>
    71e4:	2200      	movs	r2, #0
    71e6:	2300      	movs	r3, #0
    71e8:	9200      	str	r2, [sp, #0]
    71ea:	9301      	str	r3, [sp, #4]
    71ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    71ee:	2b00      	cmp	r3, #0
    71f0:	d001      	beq.n	71f6 <__udivmoddi4+0x8a>
    71f2:	601c      	str	r4, [r3, #0]
    71f4:	605d      	str	r5, [r3, #4]
    71f6:	9800      	ldr	r0, [sp, #0]
    71f8:	9901      	ldr	r1, [sp, #4]
    71fa:	b002      	add	sp, #8
    71fc:	bc1c      	pop	{r2, r3, r4}
    71fe:	4690      	mov	r8, r2
    7200:	4699      	mov	r9, r3
    7202:	46a2      	mov	sl, r4
    7204:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7206:	42a3      	cmp	r3, r4
    7208:	d9d7      	bls.n	71ba <__udivmoddi4+0x4e>
    720a:	2200      	movs	r2, #0
    720c:	2300      	movs	r3, #0
    720e:	9200      	str	r2, [sp, #0]
    7210:	9301      	str	r3, [sp, #4]
    7212:	4663      	mov	r3, ip
    7214:	2b00      	cmp	r3, #0
    7216:	d0e9      	beq.n	71ec <__udivmoddi4+0x80>
    7218:	07fb      	lsls	r3, r7, #31
    721a:	4698      	mov	r8, r3
    721c:	4641      	mov	r1, r8
    721e:	0872      	lsrs	r2, r6, #1
    7220:	430a      	orrs	r2, r1
    7222:	087b      	lsrs	r3, r7, #1
    7224:	4666      	mov	r6, ip
    7226:	e00e      	b.n	7246 <__udivmoddi4+0xda>
    7228:	42ab      	cmp	r3, r5
    722a:	d101      	bne.n	7230 <__udivmoddi4+0xc4>
    722c:	42a2      	cmp	r2, r4
    722e:	d80c      	bhi.n	724a <__udivmoddi4+0xde>
    7230:	1aa4      	subs	r4, r4, r2
    7232:	419d      	sbcs	r5, r3
    7234:	2001      	movs	r0, #1
    7236:	1924      	adds	r4, r4, r4
    7238:	416d      	adcs	r5, r5
    723a:	2100      	movs	r1, #0
    723c:	3e01      	subs	r6, #1
    723e:	1824      	adds	r4, r4, r0
    7240:	414d      	adcs	r5, r1
    7242:	2e00      	cmp	r6, #0
    7244:	d006      	beq.n	7254 <__udivmoddi4+0xe8>
    7246:	42ab      	cmp	r3, r5
    7248:	d9ee      	bls.n	7228 <__udivmoddi4+0xbc>
    724a:	3e01      	subs	r6, #1
    724c:	1924      	adds	r4, r4, r4
    724e:	416d      	adcs	r5, r5
    7250:	2e00      	cmp	r6, #0
    7252:	d1f8      	bne.n	7246 <__udivmoddi4+0xda>
    7254:	9800      	ldr	r0, [sp, #0]
    7256:	9901      	ldr	r1, [sp, #4]
    7258:	4653      	mov	r3, sl
    725a:	1900      	adds	r0, r0, r4
    725c:	4169      	adcs	r1, r5
    725e:	2b00      	cmp	r3, #0
    7260:	db23      	blt.n	72aa <__udivmoddi4+0x13e>
    7262:	002b      	movs	r3, r5
    7264:	4652      	mov	r2, sl
    7266:	40d3      	lsrs	r3, r2
    7268:	002a      	movs	r2, r5
    726a:	4664      	mov	r4, ip
    726c:	40e2      	lsrs	r2, r4
    726e:	001c      	movs	r4, r3
    7270:	4653      	mov	r3, sl
    7272:	0015      	movs	r5, r2
    7274:	2b00      	cmp	r3, #0
    7276:	db2d      	blt.n	72d4 <__udivmoddi4+0x168>
    7278:	0026      	movs	r6, r4
    727a:	4657      	mov	r7, sl
    727c:	40be      	lsls	r6, r7
    727e:	0033      	movs	r3, r6
    7280:	0026      	movs	r6, r4
    7282:	4667      	mov	r7, ip
    7284:	40be      	lsls	r6, r7
    7286:	0032      	movs	r2, r6
    7288:	1a80      	subs	r0, r0, r2
    728a:	4199      	sbcs	r1, r3
    728c:	9000      	str	r0, [sp, #0]
    728e:	9101      	str	r1, [sp, #4]
    7290:	e7ac      	b.n	71ec <__udivmoddi4+0x80>
    7292:	4662      	mov	r2, ip
    7294:	2320      	movs	r3, #32
    7296:	1a9b      	subs	r3, r3, r2
    7298:	464a      	mov	r2, r9
    729a:	40da      	lsrs	r2, r3
    729c:	4661      	mov	r1, ip
    729e:	0013      	movs	r3, r2
    72a0:	4642      	mov	r2, r8
    72a2:	408a      	lsls	r2, r1
    72a4:	0017      	movs	r7, r2
    72a6:	431f      	orrs	r7, r3
    72a8:	e780      	b.n	71ac <__udivmoddi4+0x40>
    72aa:	4662      	mov	r2, ip
    72ac:	2320      	movs	r3, #32
    72ae:	1a9b      	subs	r3, r3, r2
    72b0:	002a      	movs	r2, r5
    72b2:	4666      	mov	r6, ip
    72b4:	409a      	lsls	r2, r3
    72b6:	0023      	movs	r3, r4
    72b8:	40f3      	lsrs	r3, r6
    72ba:	4313      	orrs	r3, r2
    72bc:	e7d4      	b.n	7268 <__udivmoddi4+0xfc>
    72be:	4662      	mov	r2, ip
    72c0:	2320      	movs	r3, #32
    72c2:	2100      	movs	r1, #0
    72c4:	1a9b      	subs	r3, r3, r2
    72c6:	2200      	movs	r2, #0
    72c8:	9100      	str	r1, [sp, #0]
    72ca:	9201      	str	r2, [sp, #4]
    72cc:	2201      	movs	r2, #1
    72ce:	40da      	lsrs	r2, r3
    72d0:	9201      	str	r2, [sp, #4]
    72d2:	e780      	b.n	71d6 <__udivmoddi4+0x6a>
    72d4:	2320      	movs	r3, #32
    72d6:	4662      	mov	r2, ip
    72d8:	0026      	movs	r6, r4
    72da:	1a9b      	subs	r3, r3, r2
    72dc:	40de      	lsrs	r6, r3
    72de:	002f      	movs	r7, r5
    72e0:	46b0      	mov	r8, r6
    72e2:	4666      	mov	r6, ip
    72e4:	40b7      	lsls	r7, r6
    72e6:	4646      	mov	r6, r8
    72e8:	003b      	movs	r3, r7
    72ea:	4333      	orrs	r3, r6
    72ec:	e7c8      	b.n	7280 <__udivmoddi4+0x114>
    72ee:	46c0      	nop			; (mov r8, r8)

000072f0 <__aeabi_fdiv>:
__aeabi_fdiv():
    72f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72f2:	4657      	mov	r7, sl
    72f4:	464e      	mov	r6, r9
    72f6:	4645      	mov	r5, r8
    72f8:	46de      	mov	lr, fp
    72fa:	0244      	lsls	r4, r0, #9
    72fc:	b5e0      	push	{r5, r6, r7, lr}
    72fe:	0046      	lsls	r6, r0, #1
    7300:	4688      	mov	r8, r1
    7302:	0a64      	lsrs	r4, r4, #9
    7304:	0e36      	lsrs	r6, r6, #24
    7306:	0fc7      	lsrs	r7, r0, #31
    7308:	2e00      	cmp	r6, #0
    730a:	d063      	beq.n	73d4 <__aeabi_fdiv+0xe4>
    730c:	2eff      	cmp	r6, #255	; 0xff
    730e:	d024      	beq.n	735a <__aeabi_fdiv+0x6a>
    7310:	2380      	movs	r3, #128	; 0x80
    7312:	00e4      	lsls	r4, r4, #3
    7314:	04db      	lsls	r3, r3, #19
    7316:	431c      	orrs	r4, r3
    7318:	2300      	movs	r3, #0
    731a:	4699      	mov	r9, r3
    731c:	469b      	mov	fp, r3
    731e:	3e7f      	subs	r6, #127	; 0x7f
    7320:	4643      	mov	r3, r8
    7322:	4642      	mov	r2, r8
    7324:	025d      	lsls	r5, r3, #9
    7326:	0fd2      	lsrs	r2, r2, #31
    7328:	005b      	lsls	r3, r3, #1
    732a:	0a6d      	lsrs	r5, r5, #9
    732c:	0e1b      	lsrs	r3, r3, #24
    732e:	4690      	mov	r8, r2
    7330:	4692      	mov	sl, r2
    7332:	d065      	beq.n	7400 <__aeabi_fdiv+0x110>
    7334:	2bff      	cmp	r3, #255	; 0xff
    7336:	d055      	beq.n	73e4 <__aeabi_fdiv+0xf4>
    7338:	2280      	movs	r2, #128	; 0x80
    733a:	2100      	movs	r1, #0
    733c:	00ed      	lsls	r5, r5, #3
    733e:	04d2      	lsls	r2, r2, #19
    7340:	3b7f      	subs	r3, #127	; 0x7f
    7342:	4315      	orrs	r5, r2
    7344:	1af6      	subs	r6, r6, r3
    7346:	4643      	mov	r3, r8
    7348:	464a      	mov	r2, r9
    734a:	407b      	eors	r3, r7
    734c:	2a0f      	cmp	r2, #15
    734e:	d900      	bls.n	7352 <__aeabi_fdiv+0x62>
    7350:	e08d      	b.n	746e <__aeabi_fdiv+0x17e>
    7352:	486d      	ldr	r0, [pc, #436]	; (7508 <__aeabi_fdiv+0x218>)
    7354:	0092      	lsls	r2, r2, #2
    7356:	5882      	ldr	r2, [r0, r2]
    7358:	4697      	mov	pc, r2
    735a:	2c00      	cmp	r4, #0
    735c:	d154      	bne.n	7408 <__aeabi_fdiv+0x118>
    735e:	2308      	movs	r3, #8
    7360:	4699      	mov	r9, r3
    7362:	3b06      	subs	r3, #6
    7364:	26ff      	movs	r6, #255	; 0xff
    7366:	469b      	mov	fp, r3
    7368:	e7da      	b.n	7320 <__aeabi_fdiv+0x30>
    736a:	2500      	movs	r5, #0
    736c:	4653      	mov	r3, sl
    736e:	2902      	cmp	r1, #2
    7370:	d01b      	beq.n	73aa <__aeabi_fdiv+0xba>
    7372:	2903      	cmp	r1, #3
    7374:	d100      	bne.n	7378 <__aeabi_fdiv+0x88>
    7376:	e0bf      	b.n	74f8 <__aeabi_fdiv+0x208>
    7378:	2901      	cmp	r1, #1
    737a:	d028      	beq.n	73ce <__aeabi_fdiv+0xde>
    737c:	0030      	movs	r0, r6
    737e:	307f      	adds	r0, #127	; 0x7f
    7380:	2800      	cmp	r0, #0
    7382:	dd20      	ble.n	73c6 <__aeabi_fdiv+0xd6>
    7384:	076a      	lsls	r2, r5, #29
    7386:	d004      	beq.n	7392 <__aeabi_fdiv+0xa2>
    7388:	220f      	movs	r2, #15
    738a:	402a      	ands	r2, r5
    738c:	2a04      	cmp	r2, #4
    738e:	d000      	beq.n	7392 <__aeabi_fdiv+0xa2>
    7390:	3504      	adds	r5, #4
    7392:	012a      	lsls	r2, r5, #4
    7394:	d503      	bpl.n	739e <__aeabi_fdiv+0xae>
    7396:	0030      	movs	r0, r6
    7398:	4a5c      	ldr	r2, [pc, #368]	; (750c <__aeabi_fdiv+0x21c>)
    739a:	3080      	adds	r0, #128	; 0x80
    739c:	4015      	ands	r5, r2
    739e:	28fe      	cmp	r0, #254	; 0xfe
    73a0:	dc03      	bgt.n	73aa <__aeabi_fdiv+0xba>
    73a2:	01ac      	lsls	r4, r5, #6
    73a4:	0a64      	lsrs	r4, r4, #9
    73a6:	b2c2      	uxtb	r2, r0
    73a8:	e001      	b.n	73ae <__aeabi_fdiv+0xbe>
    73aa:	22ff      	movs	r2, #255	; 0xff
    73ac:	2400      	movs	r4, #0
    73ae:	0264      	lsls	r4, r4, #9
    73b0:	05d2      	lsls	r2, r2, #23
    73b2:	0a60      	lsrs	r0, r4, #9
    73b4:	07db      	lsls	r3, r3, #31
    73b6:	4310      	orrs	r0, r2
    73b8:	4318      	orrs	r0, r3
    73ba:	bc3c      	pop	{r2, r3, r4, r5}
    73bc:	4690      	mov	r8, r2
    73be:	4699      	mov	r9, r3
    73c0:	46a2      	mov	sl, r4
    73c2:	46ab      	mov	fp, r5
    73c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    73c6:	2201      	movs	r2, #1
    73c8:	1a10      	subs	r0, r2, r0
    73ca:	281b      	cmp	r0, #27
    73cc:	dd7c      	ble.n	74c8 <__aeabi_fdiv+0x1d8>
    73ce:	2200      	movs	r2, #0
    73d0:	2400      	movs	r4, #0
    73d2:	e7ec      	b.n	73ae <__aeabi_fdiv+0xbe>
    73d4:	2c00      	cmp	r4, #0
    73d6:	d11d      	bne.n	7414 <__aeabi_fdiv+0x124>
    73d8:	2304      	movs	r3, #4
    73da:	4699      	mov	r9, r3
    73dc:	3b03      	subs	r3, #3
    73de:	2600      	movs	r6, #0
    73e0:	469b      	mov	fp, r3
    73e2:	e79d      	b.n	7320 <__aeabi_fdiv+0x30>
    73e4:	3eff      	subs	r6, #255	; 0xff
    73e6:	2d00      	cmp	r5, #0
    73e8:	d120      	bne.n	742c <__aeabi_fdiv+0x13c>
    73ea:	2102      	movs	r1, #2
    73ec:	4643      	mov	r3, r8
    73ee:	464a      	mov	r2, r9
    73f0:	407b      	eors	r3, r7
    73f2:	430a      	orrs	r2, r1
    73f4:	2a0f      	cmp	r2, #15
    73f6:	d8d8      	bhi.n	73aa <__aeabi_fdiv+0xba>
    73f8:	4845      	ldr	r0, [pc, #276]	; (7510 <__aeabi_fdiv+0x220>)
    73fa:	0092      	lsls	r2, r2, #2
    73fc:	5882      	ldr	r2, [r0, r2]
    73fe:	4697      	mov	pc, r2
    7400:	2d00      	cmp	r5, #0
    7402:	d119      	bne.n	7438 <__aeabi_fdiv+0x148>
    7404:	2101      	movs	r1, #1
    7406:	e7f1      	b.n	73ec <__aeabi_fdiv+0xfc>
    7408:	230c      	movs	r3, #12
    740a:	4699      	mov	r9, r3
    740c:	3b09      	subs	r3, #9
    740e:	26ff      	movs	r6, #255	; 0xff
    7410:	469b      	mov	fp, r3
    7412:	e785      	b.n	7320 <__aeabi_fdiv+0x30>
    7414:	0020      	movs	r0, r4
    7416:	f001 fc0d 	bl	8c34 <__clzsi2>
    741a:	2676      	movs	r6, #118	; 0x76
    741c:	1f43      	subs	r3, r0, #5
    741e:	409c      	lsls	r4, r3
    7420:	2300      	movs	r3, #0
    7422:	4276      	negs	r6, r6
    7424:	1a36      	subs	r6, r6, r0
    7426:	4699      	mov	r9, r3
    7428:	469b      	mov	fp, r3
    742a:	e779      	b.n	7320 <__aeabi_fdiv+0x30>
    742c:	464a      	mov	r2, r9
    742e:	2303      	movs	r3, #3
    7430:	431a      	orrs	r2, r3
    7432:	4691      	mov	r9, r2
    7434:	2103      	movs	r1, #3
    7436:	e786      	b.n	7346 <__aeabi_fdiv+0x56>
    7438:	0028      	movs	r0, r5
    743a:	f001 fbfb 	bl	8c34 <__clzsi2>
    743e:	1f43      	subs	r3, r0, #5
    7440:	1836      	adds	r6, r6, r0
    7442:	409d      	lsls	r5, r3
    7444:	3676      	adds	r6, #118	; 0x76
    7446:	2100      	movs	r1, #0
    7448:	e77d      	b.n	7346 <__aeabi_fdiv+0x56>
    744a:	2480      	movs	r4, #128	; 0x80
    744c:	2300      	movs	r3, #0
    744e:	03e4      	lsls	r4, r4, #15
    7450:	22ff      	movs	r2, #255	; 0xff
    7452:	e7ac      	b.n	73ae <__aeabi_fdiv+0xbe>
    7454:	2500      	movs	r5, #0
    7456:	2380      	movs	r3, #128	; 0x80
    7458:	03db      	lsls	r3, r3, #15
    745a:	421c      	tst	r4, r3
    745c:	d028      	beq.n	74b0 <__aeabi_fdiv+0x1c0>
    745e:	421d      	tst	r5, r3
    7460:	d126      	bne.n	74b0 <__aeabi_fdiv+0x1c0>
    7462:	432b      	orrs	r3, r5
    7464:	025c      	lsls	r4, r3, #9
    7466:	0a64      	lsrs	r4, r4, #9
    7468:	4643      	mov	r3, r8
    746a:	22ff      	movs	r2, #255	; 0xff
    746c:	e79f      	b.n	73ae <__aeabi_fdiv+0xbe>
    746e:	0162      	lsls	r2, r4, #5
    7470:	016c      	lsls	r4, r5, #5
    7472:	42a2      	cmp	r2, r4
    7474:	d224      	bcs.n	74c0 <__aeabi_fdiv+0x1d0>
    7476:	211b      	movs	r1, #27
    7478:	2500      	movs	r5, #0
    747a:	3e01      	subs	r6, #1
    747c:	2701      	movs	r7, #1
    747e:	0010      	movs	r0, r2
    7480:	006d      	lsls	r5, r5, #1
    7482:	0052      	lsls	r2, r2, #1
    7484:	2800      	cmp	r0, #0
    7486:	db01      	blt.n	748c <__aeabi_fdiv+0x19c>
    7488:	4294      	cmp	r4, r2
    748a:	d801      	bhi.n	7490 <__aeabi_fdiv+0x1a0>
    748c:	1b12      	subs	r2, r2, r4
    748e:	433d      	orrs	r5, r7
    7490:	3901      	subs	r1, #1
    7492:	2900      	cmp	r1, #0
    7494:	d1f3      	bne.n	747e <__aeabi_fdiv+0x18e>
    7496:	0014      	movs	r4, r2
    7498:	1e62      	subs	r2, r4, #1
    749a:	4194      	sbcs	r4, r2
    749c:	4325      	orrs	r5, r4
    749e:	e76d      	b.n	737c <__aeabi_fdiv+0x8c>
    74a0:	46ba      	mov	sl, r7
    74a2:	4659      	mov	r1, fp
    74a4:	0025      	movs	r5, r4
    74a6:	4653      	mov	r3, sl
    74a8:	2902      	cmp	r1, #2
    74aa:	d000      	beq.n	74ae <__aeabi_fdiv+0x1be>
    74ac:	e761      	b.n	7372 <__aeabi_fdiv+0x82>
    74ae:	e77c      	b.n	73aa <__aeabi_fdiv+0xba>
    74b0:	2380      	movs	r3, #128	; 0x80
    74b2:	03db      	lsls	r3, r3, #15
    74b4:	431c      	orrs	r4, r3
    74b6:	0264      	lsls	r4, r4, #9
    74b8:	0a64      	lsrs	r4, r4, #9
    74ba:	003b      	movs	r3, r7
    74bc:	22ff      	movs	r2, #255	; 0xff
    74be:	e776      	b.n	73ae <__aeabi_fdiv+0xbe>
    74c0:	1b12      	subs	r2, r2, r4
    74c2:	211a      	movs	r1, #26
    74c4:	2501      	movs	r5, #1
    74c6:	e7d9      	b.n	747c <__aeabi_fdiv+0x18c>
    74c8:	369e      	adds	r6, #158	; 0x9e
    74ca:	002a      	movs	r2, r5
    74cc:	40b5      	lsls	r5, r6
    74ce:	002c      	movs	r4, r5
    74d0:	40c2      	lsrs	r2, r0
    74d2:	1e65      	subs	r5, r4, #1
    74d4:	41ac      	sbcs	r4, r5
    74d6:	4314      	orrs	r4, r2
    74d8:	0762      	lsls	r2, r4, #29
    74da:	d004      	beq.n	74e6 <__aeabi_fdiv+0x1f6>
    74dc:	220f      	movs	r2, #15
    74de:	4022      	ands	r2, r4
    74e0:	2a04      	cmp	r2, #4
    74e2:	d000      	beq.n	74e6 <__aeabi_fdiv+0x1f6>
    74e4:	3404      	adds	r4, #4
    74e6:	0162      	lsls	r2, r4, #5
    74e8:	d403      	bmi.n	74f2 <__aeabi_fdiv+0x202>
    74ea:	01a4      	lsls	r4, r4, #6
    74ec:	0a64      	lsrs	r4, r4, #9
    74ee:	2200      	movs	r2, #0
    74f0:	e75d      	b.n	73ae <__aeabi_fdiv+0xbe>
    74f2:	2201      	movs	r2, #1
    74f4:	2400      	movs	r4, #0
    74f6:	e75a      	b.n	73ae <__aeabi_fdiv+0xbe>
    74f8:	2480      	movs	r4, #128	; 0x80
    74fa:	03e4      	lsls	r4, r4, #15
    74fc:	432c      	orrs	r4, r5
    74fe:	0264      	lsls	r4, r4, #9
    7500:	0a64      	lsrs	r4, r4, #9
    7502:	22ff      	movs	r2, #255	; 0xff
    7504:	e753      	b.n	73ae <__aeabi_fdiv+0xbe>
    7506:	46c0      	nop			; (mov r8, r8)
    7508:	0000a73c 	.word	0x0000a73c
    750c:	f7ffffff 	.word	0xf7ffffff
    7510:	0000a77c 	.word	0x0000a77c

00007514 <__eqsf2>:
__eqsf2():
    7514:	b570      	push	{r4, r5, r6, lr}
    7516:	0042      	lsls	r2, r0, #1
    7518:	024e      	lsls	r6, r1, #9
    751a:	004c      	lsls	r4, r1, #1
    751c:	0245      	lsls	r5, r0, #9
    751e:	0a6d      	lsrs	r5, r5, #9
    7520:	0e12      	lsrs	r2, r2, #24
    7522:	0fc3      	lsrs	r3, r0, #31
    7524:	0a76      	lsrs	r6, r6, #9
    7526:	0e24      	lsrs	r4, r4, #24
    7528:	0fc9      	lsrs	r1, r1, #31
    752a:	2aff      	cmp	r2, #255	; 0xff
    752c:	d00f      	beq.n	754e <__eqsf2+0x3a>
    752e:	2cff      	cmp	r4, #255	; 0xff
    7530:	d011      	beq.n	7556 <__eqsf2+0x42>
    7532:	2001      	movs	r0, #1
    7534:	42a2      	cmp	r2, r4
    7536:	d000      	beq.n	753a <__eqsf2+0x26>
    7538:	bd70      	pop	{r4, r5, r6, pc}
    753a:	42b5      	cmp	r5, r6
    753c:	d1fc      	bne.n	7538 <__eqsf2+0x24>
    753e:	428b      	cmp	r3, r1
    7540:	d00d      	beq.n	755e <__eqsf2+0x4a>
    7542:	2a00      	cmp	r2, #0
    7544:	d1f8      	bne.n	7538 <__eqsf2+0x24>
    7546:	0028      	movs	r0, r5
    7548:	1e45      	subs	r5, r0, #1
    754a:	41a8      	sbcs	r0, r5
    754c:	e7f4      	b.n	7538 <__eqsf2+0x24>
    754e:	2001      	movs	r0, #1
    7550:	2d00      	cmp	r5, #0
    7552:	d1f1      	bne.n	7538 <__eqsf2+0x24>
    7554:	e7eb      	b.n	752e <__eqsf2+0x1a>
    7556:	2001      	movs	r0, #1
    7558:	2e00      	cmp	r6, #0
    755a:	d1ed      	bne.n	7538 <__eqsf2+0x24>
    755c:	e7e9      	b.n	7532 <__eqsf2+0x1e>
    755e:	2000      	movs	r0, #0
    7560:	e7ea      	b.n	7538 <__eqsf2+0x24>
    7562:	46c0      	nop			; (mov r8, r8)

00007564 <__gesf2>:
__gesf2():
    7564:	b570      	push	{r4, r5, r6, lr}
    7566:	004a      	lsls	r2, r1, #1
    7568:	024e      	lsls	r6, r1, #9
    756a:	0245      	lsls	r5, r0, #9
    756c:	0044      	lsls	r4, r0, #1
    756e:	0a6d      	lsrs	r5, r5, #9
    7570:	0e24      	lsrs	r4, r4, #24
    7572:	0fc3      	lsrs	r3, r0, #31
    7574:	0a76      	lsrs	r6, r6, #9
    7576:	0e12      	lsrs	r2, r2, #24
    7578:	0fc9      	lsrs	r1, r1, #31
    757a:	2cff      	cmp	r4, #255	; 0xff
    757c:	d015      	beq.n	75aa <__gesf2+0x46>
    757e:	2aff      	cmp	r2, #255	; 0xff
    7580:	d00e      	beq.n	75a0 <__gesf2+0x3c>
    7582:	2c00      	cmp	r4, #0
    7584:	d115      	bne.n	75b2 <__gesf2+0x4e>
    7586:	2a00      	cmp	r2, #0
    7588:	d101      	bne.n	758e <__gesf2+0x2a>
    758a:	2e00      	cmp	r6, #0
    758c:	d01c      	beq.n	75c8 <__gesf2+0x64>
    758e:	2d00      	cmp	r5, #0
    7590:	d014      	beq.n	75bc <__gesf2+0x58>
    7592:	428b      	cmp	r3, r1
    7594:	d027      	beq.n	75e6 <__gesf2+0x82>
    7596:	2002      	movs	r0, #2
    7598:	3b01      	subs	r3, #1
    759a:	4018      	ands	r0, r3
    759c:	3801      	subs	r0, #1
    759e:	bd70      	pop	{r4, r5, r6, pc}
    75a0:	2e00      	cmp	r6, #0
    75a2:	d0ee      	beq.n	7582 <__gesf2+0x1e>
    75a4:	2002      	movs	r0, #2
    75a6:	4240      	negs	r0, r0
    75a8:	e7f9      	b.n	759e <__gesf2+0x3a>
    75aa:	2d00      	cmp	r5, #0
    75ac:	d1fa      	bne.n	75a4 <__gesf2+0x40>
    75ae:	2aff      	cmp	r2, #255	; 0xff
    75b0:	d00e      	beq.n	75d0 <__gesf2+0x6c>
    75b2:	2a00      	cmp	r2, #0
    75b4:	d10e      	bne.n	75d4 <__gesf2+0x70>
    75b6:	2e00      	cmp	r6, #0
    75b8:	d0ed      	beq.n	7596 <__gesf2+0x32>
    75ba:	e00b      	b.n	75d4 <__gesf2+0x70>
    75bc:	2301      	movs	r3, #1
    75be:	3901      	subs	r1, #1
    75c0:	4399      	bics	r1, r3
    75c2:	0008      	movs	r0, r1
    75c4:	3001      	adds	r0, #1
    75c6:	e7ea      	b.n	759e <__gesf2+0x3a>
    75c8:	2000      	movs	r0, #0
    75ca:	2d00      	cmp	r5, #0
    75cc:	d0e7      	beq.n	759e <__gesf2+0x3a>
    75ce:	e7e2      	b.n	7596 <__gesf2+0x32>
    75d0:	2e00      	cmp	r6, #0
    75d2:	d1e7      	bne.n	75a4 <__gesf2+0x40>
    75d4:	428b      	cmp	r3, r1
    75d6:	d1de      	bne.n	7596 <__gesf2+0x32>
    75d8:	4294      	cmp	r4, r2
    75da:	dd05      	ble.n	75e8 <__gesf2+0x84>
    75dc:	2102      	movs	r1, #2
    75de:	1e58      	subs	r0, r3, #1
    75e0:	4008      	ands	r0, r1
    75e2:	3801      	subs	r0, #1
    75e4:	e7db      	b.n	759e <__gesf2+0x3a>
    75e6:	2400      	movs	r4, #0
    75e8:	42a2      	cmp	r2, r4
    75ea:	dc04      	bgt.n	75f6 <__gesf2+0x92>
    75ec:	42b5      	cmp	r5, r6
    75ee:	d8d2      	bhi.n	7596 <__gesf2+0x32>
    75f0:	2000      	movs	r0, #0
    75f2:	42b5      	cmp	r5, r6
    75f4:	d2d3      	bcs.n	759e <__gesf2+0x3a>
    75f6:	1e58      	subs	r0, r3, #1
    75f8:	2301      	movs	r3, #1
    75fa:	4398      	bics	r0, r3
    75fc:	3001      	adds	r0, #1
    75fe:	e7ce      	b.n	759e <__gesf2+0x3a>

00007600 <__lesf2>:
__ltsf2():
    7600:	b530      	push	{r4, r5, lr}
    7602:	0042      	lsls	r2, r0, #1
    7604:	0244      	lsls	r4, r0, #9
    7606:	024d      	lsls	r5, r1, #9
    7608:	0fc3      	lsrs	r3, r0, #31
    760a:	0048      	lsls	r0, r1, #1
    760c:	0a64      	lsrs	r4, r4, #9
    760e:	0e12      	lsrs	r2, r2, #24
    7610:	0a6d      	lsrs	r5, r5, #9
    7612:	0e00      	lsrs	r0, r0, #24
    7614:	0fc9      	lsrs	r1, r1, #31
    7616:	2aff      	cmp	r2, #255	; 0xff
    7618:	d012      	beq.n	7640 <__lesf2+0x40>
    761a:	28ff      	cmp	r0, #255	; 0xff
    761c:	d00c      	beq.n	7638 <__lesf2+0x38>
    761e:	2a00      	cmp	r2, #0
    7620:	d112      	bne.n	7648 <__lesf2+0x48>
    7622:	2800      	cmp	r0, #0
    7624:	d119      	bne.n	765a <__lesf2+0x5a>
    7626:	2d00      	cmp	r5, #0
    7628:	d117      	bne.n	765a <__lesf2+0x5a>
    762a:	2c00      	cmp	r4, #0
    762c:	d02b      	beq.n	7686 <__lesf2+0x86>
    762e:	2002      	movs	r0, #2
    7630:	3b01      	subs	r3, #1
    7632:	4018      	ands	r0, r3
    7634:	3801      	subs	r0, #1
    7636:	e026      	b.n	7686 <__lesf2+0x86>
    7638:	2d00      	cmp	r5, #0
    763a:	d0f0      	beq.n	761e <__lesf2+0x1e>
    763c:	2002      	movs	r0, #2
    763e:	e022      	b.n	7686 <__lesf2+0x86>
    7640:	2c00      	cmp	r4, #0
    7642:	d1fb      	bne.n	763c <__lesf2+0x3c>
    7644:	28ff      	cmp	r0, #255	; 0xff
    7646:	d01f      	beq.n	7688 <__lesf2+0x88>
    7648:	2800      	cmp	r0, #0
    764a:	d11f      	bne.n	768c <__lesf2+0x8c>
    764c:	2d00      	cmp	r5, #0
    764e:	d11d      	bne.n	768c <__lesf2+0x8c>
    7650:	2002      	movs	r0, #2
    7652:	3b01      	subs	r3, #1
    7654:	4018      	ands	r0, r3
    7656:	3801      	subs	r0, #1
    7658:	e015      	b.n	7686 <__lesf2+0x86>
    765a:	2c00      	cmp	r4, #0
    765c:	d00e      	beq.n	767c <__lesf2+0x7c>
    765e:	428b      	cmp	r3, r1
    7660:	d1e5      	bne.n	762e <__lesf2+0x2e>
    7662:	2200      	movs	r2, #0
    7664:	4290      	cmp	r0, r2
    7666:	dc04      	bgt.n	7672 <__lesf2+0x72>
    7668:	42ac      	cmp	r4, r5
    766a:	d8e0      	bhi.n	762e <__lesf2+0x2e>
    766c:	2000      	movs	r0, #0
    766e:	42ac      	cmp	r4, r5
    7670:	d209      	bcs.n	7686 <__lesf2+0x86>
    7672:	1e58      	subs	r0, r3, #1
    7674:	2301      	movs	r3, #1
    7676:	4398      	bics	r0, r3
    7678:	3001      	adds	r0, #1
    767a:	e004      	b.n	7686 <__lesf2+0x86>
    767c:	2301      	movs	r3, #1
    767e:	3901      	subs	r1, #1
    7680:	4399      	bics	r1, r3
    7682:	0008      	movs	r0, r1
    7684:	3001      	adds	r0, #1
    7686:	bd30      	pop	{r4, r5, pc}
    7688:	2d00      	cmp	r5, #0
    768a:	d1d7      	bne.n	763c <__lesf2+0x3c>
    768c:	428b      	cmp	r3, r1
    768e:	d1ce      	bne.n	762e <__lesf2+0x2e>
    7690:	4282      	cmp	r2, r0
    7692:	dde7      	ble.n	7664 <__lesf2+0x64>
    7694:	2102      	movs	r1, #2
    7696:	1e58      	subs	r0, r3, #1
    7698:	4008      	ands	r0, r1
    769a:	3801      	subs	r0, #1
    769c:	e7f3      	b.n	7686 <__lesf2+0x86>
    769e:	46c0      	nop			; (mov r8, r8)

000076a0 <__aeabi_fmul>:
__aeabi_fmul():
    76a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    76a2:	464e      	mov	r6, r9
    76a4:	4657      	mov	r7, sl
    76a6:	4645      	mov	r5, r8
    76a8:	46de      	mov	lr, fp
    76aa:	b5e0      	push	{r5, r6, r7, lr}
    76ac:	0243      	lsls	r3, r0, #9
    76ae:	0a5b      	lsrs	r3, r3, #9
    76b0:	0045      	lsls	r5, r0, #1
    76b2:	b083      	sub	sp, #12
    76b4:	1c0f      	adds	r7, r1, #0
    76b6:	4699      	mov	r9, r3
    76b8:	0e2d      	lsrs	r5, r5, #24
    76ba:	0fc6      	lsrs	r6, r0, #31
    76bc:	2d00      	cmp	r5, #0
    76be:	d057      	beq.n	7770 <__aeabi_fmul+0xd0>
    76c0:	2dff      	cmp	r5, #255	; 0xff
    76c2:	d024      	beq.n	770e <__aeabi_fmul+0x6e>
    76c4:	2080      	movs	r0, #128	; 0x80
    76c6:	00db      	lsls	r3, r3, #3
    76c8:	04c0      	lsls	r0, r0, #19
    76ca:	4318      	orrs	r0, r3
    76cc:	2300      	movs	r3, #0
    76ce:	4681      	mov	r9, r0
    76d0:	469a      	mov	sl, r3
    76d2:	469b      	mov	fp, r3
    76d4:	3d7f      	subs	r5, #127	; 0x7f
    76d6:	027c      	lsls	r4, r7, #9
    76d8:	007a      	lsls	r2, r7, #1
    76da:	0ffb      	lsrs	r3, r7, #31
    76dc:	0a64      	lsrs	r4, r4, #9
    76de:	0e12      	lsrs	r2, r2, #24
    76e0:	4698      	mov	r8, r3
    76e2:	d023      	beq.n	772c <__aeabi_fmul+0x8c>
    76e4:	2aff      	cmp	r2, #255	; 0xff
    76e6:	d04b      	beq.n	7780 <__aeabi_fmul+0xe0>
    76e8:	00e3      	lsls	r3, r4, #3
    76ea:	2480      	movs	r4, #128	; 0x80
    76ec:	2000      	movs	r0, #0
    76ee:	04e4      	lsls	r4, r4, #19
    76f0:	3a7f      	subs	r2, #127	; 0x7f
    76f2:	431c      	orrs	r4, r3
    76f4:	18ad      	adds	r5, r5, r2
    76f6:	1c6b      	adds	r3, r5, #1
    76f8:	4647      	mov	r7, r8
    76fa:	9301      	str	r3, [sp, #4]
    76fc:	4653      	mov	r3, sl
    76fe:	4077      	eors	r7, r6
    7700:	003a      	movs	r2, r7
    7702:	2b0f      	cmp	r3, #15
    7704:	d848      	bhi.n	7798 <__aeabi_fmul+0xf8>
    7706:	497d      	ldr	r1, [pc, #500]	; (78fc <__aeabi_fmul+0x25c>)
    7708:	009b      	lsls	r3, r3, #2
    770a:	58cb      	ldr	r3, [r1, r3]
    770c:	469f      	mov	pc, r3
    770e:	2b00      	cmp	r3, #0
    7710:	d000      	beq.n	7714 <__aeabi_fmul+0x74>
    7712:	e085      	b.n	7820 <__aeabi_fmul+0x180>
    7714:	3308      	adds	r3, #8
    7716:	469a      	mov	sl, r3
    7718:	3b06      	subs	r3, #6
    771a:	469b      	mov	fp, r3
    771c:	027c      	lsls	r4, r7, #9
    771e:	007a      	lsls	r2, r7, #1
    7720:	0ffb      	lsrs	r3, r7, #31
    7722:	25ff      	movs	r5, #255	; 0xff
    7724:	0a64      	lsrs	r4, r4, #9
    7726:	0e12      	lsrs	r2, r2, #24
    7728:	4698      	mov	r8, r3
    772a:	d1db      	bne.n	76e4 <__aeabi_fmul+0x44>
    772c:	2c00      	cmp	r4, #0
    772e:	d000      	beq.n	7732 <__aeabi_fmul+0x92>
    7730:	e090      	b.n	7854 <__aeabi_fmul+0x1b4>
    7732:	4652      	mov	r2, sl
    7734:	2301      	movs	r3, #1
    7736:	431a      	orrs	r2, r3
    7738:	4692      	mov	sl, r2
    773a:	2001      	movs	r0, #1
    773c:	e7db      	b.n	76f6 <__aeabi_fmul+0x56>
    773e:	464c      	mov	r4, r9
    7740:	4658      	mov	r0, fp
    7742:	0017      	movs	r7, r2
    7744:	2802      	cmp	r0, #2
    7746:	d024      	beq.n	7792 <__aeabi_fmul+0xf2>
    7748:	2803      	cmp	r0, #3
    774a:	d100      	bne.n	774e <__aeabi_fmul+0xae>
    774c:	e0cf      	b.n	78ee <__aeabi_fmul+0x24e>
    774e:	2200      	movs	r2, #0
    7750:	2300      	movs	r3, #0
    7752:	2801      	cmp	r0, #1
    7754:	d14d      	bne.n	77f2 <__aeabi_fmul+0x152>
    7756:	0258      	lsls	r0, r3, #9
    7758:	05d2      	lsls	r2, r2, #23
    775a:	0a40      	lsrs	r0, r0, #9
    775c:	07ff      	lsls	r7, r7, #31
    775e:	4310      	orrs	r0, r2
    7760:	4338      	orrs	r0, r7
    7762:	b003      	add	sp, #12
    7764:	bc3c      	pop	{r2, r3, r4, r5}
    7766:	4690      	mov	r8, r2
    7768:	4699      	mov	r9, r3
    776a:	46a2      	mov	sl, r4
    776c:	46ab      	mov	fp, r5
    776e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7770:	2b00      	cmp	r3, #0
    7772:	d15b      	bne.n	782c <__aeabi_fmul+0x18c>
    7774:	2304      	movs	r3, #4
    7776:	469a      	mov	sl, r3
    7778:	3b03      	subs	r3, #3
    777a:	2500      	movs	r5, #0
    777c:	469b      	mov	fp, r3
    777e:	e7aa      	b.n	76d6 <__aeabi_fmul+0x36>
    7780:	35ff      	adds	r5, #255	; 0xff
    7782:	2c00      	cmp	r4, #0
    7784:	d160      	bne.n	7848 <__aeabi_fmul+0x1a8>
    7786:	4652      	mov	r2, sl
    7788:	2302      	movs	r3, #2
    778a:	431a      	orrs	r2, r3
    778c:	4692      	mov	sl, r2
    778e:	2002      	movs	r0, #2
    7790:	e7b1      	b.n	76f6 <__aeabi_fmul+0x56>
    7792:	22ff      	movs	r2, #255	; 0xff
    7794:	2300      	movs	r3, #0
    7796:	e7de      	b.n	7756 <__aeabi_fmul+0xb6>
    7798:	464b      	mov	r3, r9
    779a:	0c1b      	lsrs	r3, r3, #16
    779c:	469c      	mov	ip, r3
    779e:	464b      	mov	r3, r9
    77a0:	0426      	lsls	r6, r4, #16
    77a2:	0c36      	lsrs	r6, r6, #16
    77a4:	0418      	lsls	r0, r3, #16
    77a6:	4661      	mov	r1, ip
    77a8:	0033      	movs	r3, r6
    77aa:	0c22      	lsrs	r2, r4, #16
    77ac:	4664      	mov	r4, ip
    77ae:	0c00      	lsrs	r0, r0, #16
    77b0:	4343      	muls	r3, r0
    77b2:	434e      	muls	r6, r1
    77b4:	4350      	muls	r0, r2
    77b6:	4354      	muls	r4, r2
    77b8:	1980      	adds	r0, r0, r6
    77ba:	0c1a      	lsrs	r2, r3, #16
    77bc:	1812      	adds	r2, r2, r0
    77be:	4296      	cmp	r6, r2
    77c0:	d903      	bls.n	77ca <__aeabi_fmul+0x12a>
    77c2:	2180      	movs	r1, #128	; 0x80
    77c4:	0249      	lsls	r1, r1, #9
    77c6:	468c      	mov	ip, r1
    77c8:	4464      	add	r4, ip
    77ca:	041b      	lsls	r3, r3, #16
    77cc:	0c1b      	lsrs	r3, r3, #16
    77ce:	0410      	lsls	r0, r2, #16
    77d0:	18c0      	adds	r0, r0, r3
    77d2:	0183      	lsls	r3, r0, #6
    77d4:	1e5e      	subs	r6, r3, #1
    77d6:	41b3      	sbcs	r3, r6
    77d8:	0e80      	lsrs	r0, r0, #26
    77da:	4318      	orrs	r0, r3
    77dc:	0c13      	lsrs	r3, r2, #16
    77de:	191b      	adds	r3, r3, r4
    77e0:	019b      	lsls	r3, r3, #6
    77e2:	4303      	orrs	r3, r0
    77e4:	001c      	movs	r4, r3
    77e6:	0123      	lsls	r3, r4, #4
    77e8:	d579      	bpl.n	78de <__aeabi_fmul+0x23e>
    77ea:	2301      	movs	r3, #1
    77ec:	0862      	lsrs	r2, r4, #1
    77ee:	401c      	ands	r4, r3
    77f0:	4314      	orrs	r4, r2
    77f2:	9a01      	ldr	r2, [sp, #4]
    77f4:	327f      	adds	r2, #127	; 0x7f
    77f6:	2a00      	cmp	r2, #0
    77f8:	dd4d      	ble.n	7896 <__aeabi_fmul+0x1f6>
    77fa:	0763      	lsls	r3, r4, #29
    77fc:	d004      	beq.n	7808 <__aeabi_fmul+0x168>
    77fe:	230f      	movs	r3, #15
    7800:	4023      	ands	r3, r4
    7802:	2b04      	cmp	r3, #4
    7804:	d000      	beq.n	7808 <__aeabi_fmul+0x168>
    7806:	3404      	adds	r4, #4
    7808:	0123      	lsls	r3, r4, #4
    780a:	d503      	bpl.n	7814 <__aeabi_fmul+0x174>
    780c:	4b3c      	ldr	r3, [pc, #240]	; (7900 <__aeabi_fmul+0x260>)
    780e:	9a01      	ldr	r2, [sp, #4]
    7810:	401c      	ands	r4, r3
    7812:	3280      	adds	r2, #128	; 0x80
    7814:	2afe      	cmp	r2, #254	; 0xfe
    7816:	dcbc      	bgt.n	7792 <__aeabi_fmul+0xf2>
    7818:	01a3      	lsls	r3, r4, #6
    781a:	0a5b      	lsrs	r3, r3, #9
    781c:	b2d2      	uxtb	r2, r2
    781e:	e79a      	b.n	7756 <__aeabi_fmul+0xb6>
    7820:	230c      	movs	r3, #12
    7822:	469a      	mov	sl, r3
    7824:	3b09      	subs	r3, #9
    7826:	25ff      	movs	r5, #255	; 0xff
    7828:	469b      	mov	fp, r3
    782a:	e754      	b.n	76d6 <__aeabi_fmul+0x36>
    782c:	0018      	movs	r0, r3
    782e:	f001 fa01 	bl	8c34 <__clzsi2>
    7832:	464a      	mov	r2, r9
    7834:	1f43      	subs	r3, r0, #5
    7836:	2576      	movs	r5, #118	; 0x76
    7838:	409a      	lsls	r2, r3
    783a:	2300      	movs	r3, #0
    783c:	426d      	negs	r5, r5
    783e:	4691      	mov	r9, r2
    7840:	1a2d      	subs	r5, r5, r0
    7842:	469a      	mov	sl, r3
    7844:	469b      	mov	fp, r3
    7846:	e746      	b.n	76d6 <__aeabi_fmul+0x36>
    7848:	4652      	mov	r2, sl
    784a:	2303      	movs	r3, #3
    784c:	431a      	orrs	r2, r3
    784e:	4692      	mov	sl, r2
    7850:	2003      	movs	r0, #3
    7852:	e750      	b.n	76f6 <__aeabi_fmul+0x56>
    7854:	0020      	movs	r0, r4
    7856:	f001 f9ed 	bl	8c34 <__clzsi2>
    785a:	1f43      	subs	r3, r0, #5
    785c:	1a2d      	subs	r5, r5, r0
    785e:	409c      	lsls	r4, r3
    7860:	3d76      	subs	r5, #118	; 0x76
    7862:	2000      	movs	r0, #0
    7864:	e747      	b.n	76f6 <__aeabi_fmul+0x56>
    7866:	2380      	movs	r3, #128	; 0x80
    7868:	2700      	movs	r7, #0
    786a:	03db      	lsls	r3, r3, #15
    786c:	22ff      	movs	r2, #255	; 0xff
    786e:	e772      	b.n	7756 <__aeabi_fmul+0xb6>
    7870:	4642      	mov	r2, r8
    7872:	e766      	b.n	7742 <__aeabi_fmul+0xa2>
    7874:	464c      	mov	r4, r9
    7876:	0032      	movs	r2, r6
    7878:	4658      	mov	r0, fp
    787a:	e762      	b.n	7742 <__aeabi_fmul+0xa2>
    787c:	2380      	movs	r3, #128	; 0x80
    787e:	464a      	mov	r2, r9
    7880:	03db      	lsls	r3, r3, #15
    7882:	421a      	tst	r2, r3
    7884:	d022      	beq.n	78cc <__aeabi_fmul+0x22c>
    7886:	421c      	tst	r4, r3
    7888:	d120      	bne.n	78cc <__aeabi_fmul+0x22c>
    788a:	4323      	orrs	r3, r4
    788c:	025b      	lsls	r3, r3, #9
    788e:	0a5b      	lsrs	r3, r3, #9
    7890:	4647      	mov	r7, r8
    7892:	22ff      	movs	r2, #255	; 0xff
    7894:	e75f      	b.n	7756 <__aeabi_fmul+0xb6>
    7896:	2301      	movs	r3, #1
    7898:	1a9a      	subs	r2, r3, r2
    789a:	2a1b      	cmp	r2, #27
    789c:	dc21      	bgt.n	78e2 <__aeabi_fmul+0x242>
    789e:	0023      	movs	r3, r4
    78a0:	9901      	ldr	r1, [sp, #4]
    78a2:	40d3      	lsrs	r3, r2
    78a4:	319e      	adds	r1, #158	; 0x9e
    78a6:	408c      	lsls	r4, r1
    78a8:	001a      	movs	r2, r3
    78aa:	0023      	movs	r3, r4
    78ac:	1e5c      	subs	r4, r3, #1
    78ae:	41a3      	sbcs	r3, r4
    78b0:	4313      	orrs	r3, r2
    78b2:	075a      	lsls	r2, r3, #29
    78b4:	d004      	beq.n	78c0 <__aeabi_fmul+0x220>
    78b6:	220f      	movs	r2, #15
    78b8:	401a      	ands	r2, r3
    78ba:	2a04      	cmp	r2, #4
    78bc:	d000      	beq.n	78c0 <__aeabi_fmul+0x220>
    78be:	3304      	adds	r3, #4
    78c0:	015a      	lsls	r2, r3, #5
    78c2:	d411      	bmi.n	78e8 <__aeabi_fmul+0x248>
    78c4:	019b      	lsls	r3, r3, #6
    78c6:	0a5b      	lsrs	r3, r3, #9
    78c8:	2200      	movs	r2, #0
    78ca:	e744      	b.n	7756 <__aeabi_fmul+0xb6>
    78cc:	2380      	movs	r3, #128	; 0x80
    78ce:	464a      	mov	r2, r9
    78d0:	03db      	lsls	r3, r3, #15
    78d2:	4313      	orrs	r3, r2
    78d4:	025b      	lsls	r3, r3, #9
    78d6:	0a5b      	lsrs	r3, r3, #9
    78d8:	0037      	movs	r7, r6
    78da:	22ff      	movs	r2, #255	; 0xff
    78dc:	e73b      	b.n	7756 <__aeabi_fmul+0xb6>
    78de:	9501      	str	r5, [sp, #4]
    78e0:	e787      	b.n	77f2 <__aeabi_fmul+0x152>
    78e2:	2200      	movs	r2, #0
    78e4:	2300      	movs	r3, #0
    78e6:	e736      	b.n	7756 <__aeabi_fmul+0xb6>
    78e8:	2201      	movs	r2, #1
    78ea:	2300      	movs	r3, #0
    78ec:	e733      	b.n	7756 <__aeabi_fmul+0xb6>
    78ee:	2380      	movs	r3, #128	; 0x80
    78f0:	03db      	lsls	r3, r3, #15
    78f2:	4323      	orrs	r3, r4
    78f4:	025b      	lsls	r3, r3, #9
    78f6:	0a5b      	lsrs	r3, r3, #9
    78f8:	22ff      	movs	r2, #255	; 0xff
    78fa:	e72c      	b.n	7756 <__aeabi_fmul+0xb6>
    78fc:	0000a7bc 	.word	0x0000a7bc
    7900:	f7ffffff 	.word	0xf7ffffff

00007904 <__aeabi_fsub>:
__aeabi_fsub():
    7904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7906:	4647      	mov	r7, r8
    7908:	46ce      	mov	lr, r9
    790a:	0044      	lsls	r4, r0, #1
    790c:	0fc2      	lsrs	r2, r0, #31
    790e:	b580      	push	{r7, lr}
    7910:	0247      	lsls	r7, r0, #9
    7912:	0248      	lsls	r0, r1, #9
    7914:	0a40      	lsrs	r0, r0, #9
    7916:	4684      	mov	ip, r0
    7918:	4666      	mov	r6, ip
    791a:	0048      	lsls	r0, r1, #1
    791c:	0a7f      	lsrs	r7, r7, #9
    791e:	0e24      	lsrs	r4, r4, #24
    7920:	00f6      	lsls	r6, r6, #3
    7922:	0025      	movs	r5, r4
    7924:	4690      	mov	r8, r2
    7926:	00fb      	lsls	r3, r7, #3
    7928:	0e00      	lsrs	r0, r0, #24
    792a:	0fc9      	lsrs	r1, r1, #31
    792c:	46b1      	mov	r9, r6
    792e:	28ff      	cmp	r0, #255	; 0xff
    7930:	d100      	bne.n	7934 <__aeabi_fsub+0x30>
    7932:	e085      	b.n	7a40 <__aeabi_fsub+0x13c>
    7934:	2601      	movs	r6, #1
    7936:	4071      	eors	r1, r6
    7938:	1a26      	subs	r6, r4, r0
    793a:	4291      	cmp	r1, r2
    793c:	d057      	beq.n	79ee <__aeabi_fsub+0xea>
    793e:	2e00      	cmp	r6, #0
    7940:	dd43      	ble.n	79ca <__aeabi_fsub+0xc6>
    7942:	2800      	cmp	r0, #0
    7944:	d000      	beq.n	7948 <__aeabi_fsub+0x44>
    7946:	e07f      	b.n	7a48 <__aeabi_fsub+0x144>
    7948:	4649      	mov	r1, r9
    794a:	2900      	cmp	r1, #0
    794c:	d100      	bne.n	7950 <__aeabi_fsub+0x4c>
    794e:	e0aa      	b.n	7aa6 <__aeabi_fsub+0x1a2>
    7950:	3e01      	subs	r6, #1
    7952:	2e00      	cmp	r6, #0
    7954:	d000      	beq.n	7958 <__aeabi_fsub+0x54>
    7956:	e0f7      	b.n	7b48 <__aeabi_fsub+0x244>
    7958:	1a5b      	subs	r3, r3, r1
    795a:	015a      	lsls	r2, r3, #5
    795c:	d400      	bmi.n	7960 <__aeabi_fsub+0x5c>
    795e:	e08b      	b.n	7a78 <__aeabi_fsub+0x174>
    7960:	019b      	lsls	r3, r3, #6
    7962:	099c      	lsrs	r4, r3, #6
    7964:	0020      	movs	r0, r4
    7966:	f001 f965 	bl	8c34 <__clzsi2>
    796a:	3805      	subs	r0, #5
    796c:	4084      	lsls	r4, r0
    796e:	4285      	cmp	r5, r0
    7970:	dd00      	ble.n	7974 <__aeabi_fsub+0x70>
    7972:	e0d3      	b.n	7b1c <__aeabi_fsub+0x218>
    7974:	1b45      	subs	r5, r0, r5
    7976:	0023      	movs	r3, r4
    7978:	2020      	movs	r0, #32
    797a:	3501      	adds	r5, #1
    797c:	40eb      	lsrs	r3, r5
    797e:	1b45      	subs	r5, r0, r5
    7980:	40ac      	lsls	r4, r5
    7982:	1e62      	subs	r2, r4, #1
    7984:	4194      	sbcs	r4, r2
    7986:	4323      	orrs	r3, r4
    7988:	2407      	movs	r4, #7
    798a:	2500      	movs	r5, #0
    798c:	401c      	ands	r4, r3
    798e:	2201      	movs	r2, #1
    7990:	4641      	mov	r1, r8
    7992:	400a      	ands	r2, r1
    7994:	2c00      	cmp	r4, #0
    7996:	d004      	beq.n	79a2 <__aeabi_fsub+0x9e>
    7998:	210f      	movs	r1, #15
    799a:	4019      	ands	r1, r3
    799c:	2904      	cmp	r1, #4
    799e:	d000      	beq.n	79a2 <__aeabi_fsub+0x9e>
    79a0:	3304      	adds	r3, #4
    79a2:	0159      	lsls	r1, r3, #5
    79a4:	d400      	bmi.n	79a8 <__aeabi_fsub+0xa4>
    79a6:	e080      	b.n	7aaa <__aeabi_fsub+0x1a6>
    79a8:	3501      	adds	r5, #1
    79aa:	b2ec      	uxtb	r4, r5
    79ac:	2dff      	cmp	r5, #255	; 0xff
    79ae:	d000      	beq.n	79b2 <__aeabi_fsub+0xae>
    79b0:	e0a3      	b.n	7afa <__aeabi_fsub+0x1f6>
    79b2:	24ff      	movs	r4, #255	; 0xff
    79b4:	2300      	movs	r3, #0
    79b6:	025b      	lsls	r3, r3, #9
    79b8:	05e4      	lsls	r4, r4, #23
    79ba:	0a58      	lsrs	r0, r3, #9
    79bc:	07d2      	lsls	r2, r2, #31
    79be:	4320      	orrs	r0, r4
    79c0:	4310      	orrs	r0, r2
    79c2:	bc0c      	pop	{r2, r3}
    79c4:	4690      	mov	r8, r2
    79c6:	4699      	mov	r9, r3
    79c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79ca:	2e00      	cmp	r6, #0
    79cc:	d174      	bne.n	7ab8 <__aeabi_fsub+0x1b4>
    79ce:	1c60      	adds	r0, r4, #1
    79d0:	b2c0      	uxtb	r0, r0
    79d2:	2801      	cmp	r0, #1
    79d4:	dc00      	bgt.n	79d8 <__aeabi_fsub+0xd4>
    79d6:	e0a7      	b.n	7b28 <__aeabi_fsub+0x224>
    79d8:	464a      	mov	r2, r9
    79da:	1a9c      	subs	r4, r3, r2
    79dc:	0162      	lsls	r2, r4, #5
    79de:	d500      	bpl.n	79e2 <__aeabi_fsub+0xde>
    79e0:	e0b6      	b.n	7b50 <__aeabi_fsub+0x24c>
    79e2:	2c00      	cmp	r4, #0
    79e4:	d1be      	bne.n	7964 <__aeabi_fsub+0x60>
    79e6:	2200      	movs	r2, #0
    79e8:	2400      	movs	r4, #0
    79ea:	2300      	movs	r3, #0
    79ec:	e7e3      	b.n	79b6 <__aeabi_fsub+0xb2>
    79ee:	2e00      	cmp	r6, #0
    79f0:	dc00      	bgt.n	79f4 <__aeabi_fsub+0xf0>
    79f2:	e085      	b.n	7b00 <__aeabi_fsub+0x1fc>
    79f4:	2800      	cmp	r0, #0
    79f6:	d046      	beq.n	7a86 <__aeabi_fsub+0x182>
    79f8:	2cff      	cmp	r4, #255	; 0xff
    79fa:	d049      	beq.n	7a90 <__aeabi_fsub+0x18c>
    79fc:	2280      	movs	r2, #128	; 0x80
    79fe:	4648      	mov	r0, r9
    7a00:	04d2      	lsls	r2, r2, #19
    7a02:	4310      	orrs	r0, r2
    7a04:	4681      	mov	r9, r0
    7a06:	2201      	movs	r2, #1
    7a08:	2e1b      	cmp	r6, #27
    7a0a:	dc09      	bgt.n	7a20 <__aeabi_fsub+0x11c>
    7a0c:	2020      	movs	r0, #32
    7a0e:	464c      	mov	r4, r9
    7a10:	1b80      	subs	r0, r0, r6
    7a12:	4084      	lsls	r4, r0
    7a14:	464a      	mov	r2, r9
    7a16:	0020      	movs	r0, r4
    7a18:	40f2      	lsrs	r2, r6
    7a1a:	1e44      	subs	r4, r0, #1
    7a1c:	41a0      	sbcs	r0, r4
    7a1e:	4302      	orrs	r2, r0
    7a20:	189b      	adds	r3, r3, r2
    7a22:	015a      	lsls	r2, r3, #5
    7a24:	d528      	bpl.n	7a78 <__aeabi_fsub+0x174>
    7a26:	3501      	adds	r5, #1
    7a28:	2dff      	cmp	r5, #255	; 0xff
    7a2a:	d100      	bne.n	7a2e <__aeabi_fsub+0x12a>
    7a2c:	e0a8      	b.n	7b80 <__aeabi_fsub+0x27c>
    7a2e:	2201      	movs	r2, #1
    7a30:	2407      	movs	r4, #7
    7a32:	4994      	ldr	r1, [pc, #592]	; (7c84 <__aeabi_fsub+0x380>)
    7a34:	401a      	ands	r2, r3
    7a36:	085b      	lsrs	r3, r3, #1
    7a38:	400b      	ands	r3, r1
    7a3a:	4313      	orrs	r3, r2
    7a3c:	401c      	ands	r4, r3
    7a3e:	e7a6      	b.n	798e <__aeabi_fsub+0x8a>
    7a40:	2e00      	cmp	r6, #0
    7a42:	d000      	beq.n	7a46 <__aeabi_fsub+0x142>
    7a44:	e778      	b.n	7938 <__aeabi_fsub+0x34>
    7a46:	e775      	b.n	7934 <__aeabi_fsub+0x30>
    7a48:	2cff      	cmp	r4, #255	; 0xff
    7a4a:	d054      	beq.n	7af6 <__aeabi_fsub+0x1f2>
    7a4c:	2280      	movs	r2, #128	; 0x80
    7a4e:	4649      	mov	r1, r9
    7a50:	04d2      	lsls	r2, r2, #19
    7a52:	4311      	orrs	r1, r2
    7a54:	4689      	mov	r9, r1
    7a56:	2201      	movs	r2, #1
    7a58:	2e1b      	cmp	r6, #27
    7a5a:	dc09      	bgt.n	7a70 <__aeabi_fsub+0x16c>
    7a5c:	2120      	movs	r1, #32
    7a5e:	4648      	mov	r0, r9
    7a60:	1b89      	subs	r1, r1, r6
    7a62:	4088      	lsls	r0, r1
    7a64:	464a      	mov	r2, r9
    7a66:	0001      	movs	r1, r0
    7a68:	40f2      	lsrs	r2, r6
    7a6a:	1e48      	subs	r0, r1, #1
    7a6c:	4181      	sbcs	r1, r0
    7a6e:	430a      	orrs	r2, r1
    7a70:	1a9b      	subs	r3, r3, r2
    7a72:	015a      	lsls	r2, r3, #5
    7a74:	d500      	bpl.n	7a78 <__aeabi_fsub+0x174>
    7a76:	e773      	b.n	7960 <__aeabi_fsub+0x5c>
    7a78:	2201      	movs	r2, #1
    7a7a:	4641      	mov	r1, r8
    7a7c:	400a      	ands	r2, r1
    7a7e:	0759      	lsls	r1, r3, #29
    7a80:	d000      	beq.n	7a84 <__aeabi_fsub+0x180>
    7a82:	e789      	b.n	7998 <__aeabi_fsub+0x94>
    7a84:	e011      	b.n	7aaa <__aeabi_fsub+0x1a6>
    7a86:	4648      	mov	r0, r9
    7a88:	2800      	cmp	r0, #0
    7a8a:	d158      	bne.n	7b3e <__aeabi_fsub+0x23a>
    7a8c:	2cff      	cmp	r4, #255	; 0xff
    7a8e:	d10c      	bne.n	7aaa <__aeabi_fsub+0x1a6>
    7a90:	08db      	lsrs	r3, r3, #3
    7a92:	2b00      	cmp	r3, #0
    7a94:	d100      	bne.n	7a98 <__aeabi_fsub+0x194>
    7a96:	e78c      	b.n	79b2 <__aeabi_fsub+0xae>
    7a98:	2080      	movs	r0, #128	; 0x80
    7a9a:	03c0      	lsls	r0, r0, #15
    7a9c:	4303      	orrs	r3, r0
    7a9e:	025b      	lsls	r3, r3, #9
    7aa0:	0a5b      	lsrs	r3, r3, #9
    7aa2:	24ff      	movs	r4, #255	; 0xff
    7aa4:	e787      	b.n	79b6 <__aeabi_fsub+0xb2>
    7aa6:	2cff      	cmp	r4, #255	; 0xff
    7aa8:	d025      	beq.n	7af6 <__aeabi_fsub+0x1f2>
    7aaa:	08db      	lsrs	r3, r3, #3
    7aac:	2dff      	cmp	r5, #255	; 0xff
    7aae:	d0f0      	beq.n	7a92 <__aeabi_fsub+0x18e>
    7ab0:	025b      	lsls	r3, r3, #9
    7ab2:	0a5b      	lsrs	r3, r3, #9
    7ab4:	b2ec      	uxtb	r4, r5
    7ab6:	e77e      	b.n	79b6 <__aeabi_fsub+0xb2>
    7ab8:	2c00      	cmp	r4, #0
    7aba:	d04d      	beq.n	7b58 <__aeabi_fsub+0x254>
    7abc:	28ff      	cmp	r0, #255	; 0xff
    7abe:	d018      	beq.n	7af2 <__aeabi_fsub+0x1ee>
    7ac0:	2480      	movs	r4, #128	; 0x80
    7ac2:	04e4      	lsls	r4, r4, #19
    7ac4:	4272      	negs	r2, r6
    7ac6:	4323      	orrs	r3, r4
    7ac8:	2a1b      	cmp	r2, #27
    7aca:	dd00      	ble.n	7ace <__aeabi_fsub+0x1ca>
    7acc:	e0c4      	b.n	7c58 <__aeabi_fsub+0x354>
    7ace:	001c      	movs	r4, r3
    7ad0:	2520      	movs	r5, #32
    7ad2:	40d4      	lsrs	r4, r2
    7ad4:	1aaa      	subs	r2, r5, r2
    7ad6:	4093      	lsls	r3, r2
    7ad8:	1e5a      	subs	r2, r3, #1
    7ada:	4193      	sbcs	r3, r2
    7adc:	4323      	orrs	r3, r4
    7ade:	464a      	mov	r2, r9
    7ae0:	0005      	movs	r5, r0
    7ae2:	1ad3      	subs	r3, r2, r3
    7ae4:	4688      	mov	r8, r1
    7ae6:	e738      	b.n	795a <__aeabi_fsub+0x56>
    7ae8:	1c72      	adds	r2, r6, #1
    7aea:	d0f8      	beq.n	7ade <__aeabi_fsub+0x1da>
    7aec:	43f2      	mvns	r2, r6
    7aee:	28ff      	cmp	r0, #255	; 0xff
    7af0:	d1ea      	bne.n	7ac8 <__aeabi_fsub+0x1c4>
    7af2:	000a      	movs	r2, r1
    7af4:	464b      	mov	r3, r9
    7af6:	25ff      	movs	r5, #255	; 0xff
    7af8:	e7d7      	b.n	7aaa <__aeabi_fsub+0x1a6>
    7afa:	019b      	lsls	r3, r3, #6
    7afc:	0a5b      	lsrs	r3, r3, #9
    7afe:	e75a      	b.n	79b6 <__aeabi_fsub+0xb2>
    7b00:	2e00      	cmp	r6, #0
    7b02:	d141      	bne.n	7b88 <__aeabi_fsub+0x284>
    7b04:	1c65      	adds	r5, r4, #1
    7b06:	b2e9      	uxtb	r1, r5
    7b08:	2901      	cmp	r1, #1
    7b0a:	dd45      	ble.n	7b98 <__aeabi_fsub+0x294>
    7b0c:	2dff      	cmp	r5, #255	; 0xff
    7b0e:	d100      	bne.n	7b12 <__aeabi_fsub+0x20e>
    7b10:	e74f      	b.n	79b2 <__aeabi_fsub+0xae>
    7b12:	2407      	movs	r4, #7
    7b14:	444b      	add	r3, r9
    7b16:	085b      	lsrs	r3, r3, #1
    7b18:	401c      	ands	r4, r3
    7b1a:	e738      	b.n	798e <__aeabi_fsub+0x8a>
    7b1c:	2207      	movs	r2, #7
    7b1e:	4b5a      	ldr	r3, [pc, #360]	; (7c88 <__aeabi_fsub+0x384>)
    7b20:	1a2d      	subs	r5, r5, r0
    7b22:	4023      	ands	r3, r4
    7b24:	4014      	ands	r4, r2
    7b26:	e732      	b.n	798e <__aeabi_fsub+0x8a>
    7b28:	2c00      	cmp	r4, #0
    7b2a:	d11d      	bne.n	7b68 <__aeabi_fsub+0x264>
    7b2c:	2b00      	cmp	r3, #0
    7b2e:	d17a      	bne.n	7c26 <__aeabi_fsub+0x322>
    7b30:	464b      	mov	r3, r9
    7b32:	2b00      	cmp	r3, #0
    7b34:	d100      	bne.n	7b38 <__aeabi_fsub+0x234>
    7b36:	e091      	b.n	7c5c <__aeabi_fsub+0x358>
    7b38:	000a      	movs	r2, r1
    7b3a:	2500      	movs	r5, #0
    7b3c:	e7b5      	b.n	7aaa <__aeabi_fsub+0x1a6>
    7b3e:	3e01      	subs	r6, #1
    7b40:	2e00      	cmp	r6, #0
    7b42:	d119      	bne.n	7b78 <__aeabi_fsub+0x274>
    7b44:	444b      	add	r3, r9
    7b46:	e76c      	b.n	7a22 <__aeabi_fsub+0x11e>
    7b48:	2cff      	cmp	r4, #255	; 0xff
    7b4a:	d184      	bne.n	7a56 <__aeabi_fsub+0x152>
    7b4c:	25ff      	movs	r5, #255	; 0xff
    7b4e:	e7ac      	b.n	7aaa <__aeabi_fsub+0x1a6>
    7b50:	464a      	mov	r2, r9
    7b52:	4688      	mov	r8, r1
    7b54:	1ad4      	subs	r4, r2, r3
    7b56:	e705      	b.n	7964 <__aeabi_fsub+0x60>
    7b58:	2b00      	cmp	r3, #0
    7b5a:	d1c5      	bne.n	7ae8 <__aeabi_fsub+0x1e4>
    7b5c:	000a      	movs	r2, r1
    7b5e:	28ff      	cmp	r0, #255	; 0xff
    7b60:	d0c8      	beq.n	7af4 <__aeabi_fsub+0x1f0>
    7b62:	0005      	movs	r5, r0
    7b64:	464b      	mov	r3, r9
    7b66:	e7a0      	b.n	7aaa <__aeabi_fsub+0x1a6>
    7b68:	2b00      	cmp	r3, #0
    7b6a:	d149      	bne.n	7c00 <__aeabi_fsub+0x2fc>
    7b6c:	464b      	mov	r3, r9
    7b6e:	2b00      	cmp	r3, #0
    7b70:	d077      	beq.n	7c62 <__aeabi_fsub+0x35e>
    7b72:	000a      	movs	r2, r1
    7b74:	25ff      	movs	r5, #255	; 0xff
    7b76:	e798      	b.n	7aaa <__aeabi_fsub+0x1a6>
    7b78:	2cff      	cmp	r4, #255	; 0xff
    7b7a:	d000      	beq.n	7b7e <__aeabi_fsub+0x27a>
    7b7c:	e743      	b.n	7a06 <__aeabi_fsub+0x102>
    7b7e:	e787      	b.n	7a90 <__aeabi_fsub+0x18c>
    7b80:	000a      	movs	r2, r1
    7b82:	24ff      	movs	r4, #255	; 0xff
    7b84:	2300      	movs	r3, #0
    7b86:	e716      	b.n	79b6 <__aeabi_fsub+0xb2>
    7b88:	2c00      	cmp	r4, #0
    7b8a:	d115      	bne.n	7bb8 <__aeabi_fsub+0x2b4>
    7b8c:	2b00      	cmp	r3, #0
    7b8e:	d157      	bne.n	7c40 <__aeabi_fsub+0x33c>
    7b90:	28ff      	cmp	r0, #255	; 0xff
    7b92:	d1e6      	bne.n	7b62 <__aeabi_fsub+0x25e>
    7b94:	464b      	mov	r3, r9
    7b96:	e77b      	b.n	7a90 <__aeabi_fsub+0x18c>
    7b98:	2c00      	cmp	r4, #0
    7b9a:	d120      	bne.n	7bde <__aeabi_fsub+0x2da>
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	d057      	beq.n	7c50 <__aeabi_fsub+0x34c>
    7ba0:	4649      	mov	r1, r9
    7ba2:	2900      	cmp	r1, #0
    7ba4:	d053      	beq.n	7c4e <__aeabi_fsub+0x34a>
    7ba6:	444b      	add	r3, r9
    7ba8:	015a      	lsls	r2, r3, #5
    7baa:	d568      	bpl.n	7c7e <__aeabi_fsub+0x37a>
    7bac:	2407      	movs	r4, #7
    7bae:	4a36      	ldr	r2, [pc, #216]	; (7c88 <__aeabi_fsub+0x384>)
    7bb0:	401c      	ands	r4, r3
    7bb2:	2501      	movs	r5, #1
    7bb4:	4013      	ands	r3, r2
    7bb6:	e6ea      	b.n	798e <__aeabi_fsub+0x8a>
    7bb8:	28ff      	cmp	r0, #255	; 0xff
    7bba:	d0eb      	beq.n	7b94 <__aeabi_fsub+0x290>
    7bbc:	2280      	movs	r2, #128	; 0x80
    7bbe:	04d2      	lsls	r2, r2, #19
    7bc0:	4276      	negs	r6, r6
    7bc2:	4313      	orrs	r3, r2
    7bc4:	2e1b      	cmp	r6, #27
    7bc6:	dc53      	bgt.n	7c70 <__aeabi_fsub+0x36c>
    7bc8:	2520      	movs	r5, #32
    7bca:	1bad      	subs	r5, r5, r6
    7bcc:	001a      	movs	r2, r3
    7bce:	40ab      	lsls	r3, r5
    7bd0:	40f2      	lsrs	r2, r6
    7bd2:	1e5c      	subs	r4, r3, #1
    7bd4:	41a3      	sbcs	r3, r4
    7bd6:	4313      	orrs	r3, r2
    7bd8:	444b      	add	r3, r9
    7bda:	0005      	movs	r5, r0
    7bdc:	e721      	b.n	7a22 <__aeabi_fsub+0x11e>
    7bde:	2b00      	cmp	r3, #0
    7be0:	d0d8      	beq.n	7b94 <__aeabi_fsub+0x290>
    7be2:	4649      	mov	r1, r9
    7be4:	2900      	cmp	r1, #0
    7be6:	d100      	bne.n	7bea <__aeabi_fsub+0x2e6>
    7be8:	e752      	b.n	7a90 <__aeabi_fsub+0x18c>
    7bea:	2180      	movs	r1, #128	; 0x80
    7bec:	03c9      	lsls	r1, r1, #15
    7bee:	420f      	tst	r7, r1
    7bf0:	d100      	bne.n	7bf4 <__aeabi_fsub+0x2f0>
    7bf2:	e74d      	b.n	7a90 <__aeabi_fsub+0x18c>
    7bf4:	4660      	mov	r0, ip
    7bf6:	4208      	tst	r0, r1
    7bf8:	d000      	beq.n	7bfc <__aeabi_fsub+0x2f8>
    7bfa:	e749      	b.n	7a90 <__aeabi_fsub+0x18c>
    7bfc:	464b      	mov	r3, r9
    7bfe:	e747      	b.n	7a90 <__aeabi_fsub+0x18c>
    7c00:	4648      	mov	r0, r9
    7c02:	25ff      	movs	r5, #255	; 0xff
    7c04:	2800      	cmp	r0, #0
    7c06:	d100      	bne.n	7c0a <__aeabi_fsub+0x306>
    7c08:	e74f      	b.n	7aaa <__aeabi_fsub+0x1a6>
    7c0a:	2280      	movs	r2, #128	; 0x80
    7c0c:	03d2      	lsls	r2, r2, #15
    7c0e:	4217      	tst	r7, r2
    7c10:	d004      	beq.n	7c1c <__aeabi_fsub+0x318>
    7c12:	4660      	mov	r0, ip
    7c14:	4210      	tst	r0, r2
    7c16:	d101      	bne.n	7c1c <__aeabi_fsub+0x318>
    7c18:	464b      	mov	r3, r9
    7c1a:	4688      	mov	r8, r1
    7c1c:	2201      	movs	r2, #1
    7c1e:	4641      	mov	r1, r8
    7c20:	25ff      	movs	r5, #255	; 0xff
    7c22:	400a      	ands	r2, r1
    7c24:	e741      	b.n	7aaa <__aeabi_fsub+0x1a6>
    7c26:	4648      	mov	r0, r9
    7c28:	2800      	cmp	r0, #0
    7c2a:	d01f      	beq.n	7c6c <__aeabi_fsub+0x368>
    7c2c:	1a1a      	subs	r2, r3, r0
    7c2e:	0150      	lsls	r0, r2, #5
    7c30:	d520      	bpl.n	7c74 <__aeabi_fsub+0x370>
    7c32:	464a      	mov	r2, r9
    7c34:	2407      	movs	r4, #7
    7c36:	1ad3      	subs	r3, r2, r3
    7c38:	401c      	ands	r4, r3
    7c3a:	4688      	mov	r8, r1
    7c3c:	2500      	movs	r5, #0
    7c3e:	e6a6      	b.n	798e <__aeabi_fsub+0x8a>
    7c40:	1c74      	adds	r4, r6, #1
    7c42:	d0c9      	beq.n	7bd8 <__aeabi_fsub+0x2d4>
    7c44:	43f6      	mvns	r6, r6
    7c46:	28ff      	cmp	r0, #255	; 0xff
    7c48:	d1bc      	bne.n	7bc4 <__aeabi_fsub+0x2c0>
    7c4a:	464b      	mov	r3, r9
    7c4c:	e720      	b.n	7a90 <__aeabi_fsub+0x18c>
    7c4e:	4699      	mov	r9, r3
    7c50:	464b      	mov	r3, r9
    7c52:	2500      	movs	r5, #0
    7c54:	08db      	lsrs	r3, r3, #3
    7c56:	e72b      	b.n	7ab0 <__aeabi_fsub+0x1ac>
    7c58:	2301      	movs	r3, #1
    7c5a:	e740      	b.n	7ade <__aeabi_fsub+0x1da>
    7c5c:	2200      	movs	r2, #0
    7c5e:	2300      	movs	r3, #0
    7c60:	e6a9      	b.n	79b6 <__aeabi_fsub+0xb2>
    7c62:	2380      	movs	r3, #128	; 0x80
    7c64:	2200      	movs	r2, #0
    7c66:	03db      	lsls	r3, r3, #15
    7c68:	24ff      	movs	r4, #255	; 0xff
    7c6a:	e6a4      	b.n	79b6 <__aeabi_fsub+0xb2>
    7c6c:	2500      	movs	r5, #0
    7c6e:	e71c      	b.n	7aaa <__aeabi_fsub+0x1a6>
    7c70:	2301      	movs	r3, #1
    7c72:	e7b1      	b.n	7bd8 <__aeabi_fsub+0x2d4>
    7c74:	2a00      	cmp	r2, #0
    7c76:	d0f1      	beq.n	7c5c <__aeabi_fsub+0x358>
    7c78:	0013      	movs	r3, r2
    7c7a:	2500      	movs	r5, #0
    7c7c:	e6fc      	b.n	7a78 <__aeabi_fsub+0x174>
    7c7e:	2500      	movs	r5, #0
    7c80:	e6fa      	b.n	7a78 <__aeabi_fsub+0x174>
    7c82:	46c0      	nop			; (mov r8, r8)
    7c84:	7dffffff 	.word	0x7dffffff
    7c88:	fbffffff 	.word	0xfbffffff

00007c8c <__aeabi_f2iz>:
__aeabi_f2iz():
    7c8c:	0241      	lsls	r1, r0, #9
    7c8e:	0042      	lsls	r2, r0, #1
    7c90:	0fc3      	lsrs	r3, r0, #31
    7c92:	0a49      	lsrs	r1, r1, #9
    7c94:	0e12      	lsrs	r2, r2, #24
    7c96:	2000      	movs	r0, #0
    7c98:	2a7e      	cmp	r2, #126	; 0x7e
    7c9a:	d90d      	bls.n	7cb8 <__aeabi_f2iz+0x2c>
    7c9c:	2a9d      	cmp	r2, #157	; 0x9d
    7c9e:	d80c      	bhi.n	7cba <__aeabi_f2iz+0x2e>
    7ca0:	2080      	movs	r0, #128	; 0x80
    7ca2:	0400      	lsls	r0, r0, #16
    7ca4:	4301      	orrs	r1, r0
    7ca6:	2a95      	cmp	r2, #149	; 0x95
    7ca8:	dc0a      	bgt.n	7cc0 <__aeabi_f2iz+0x34>
    7caa:	2096      	movs	r0, #150	; 0x96
    7cac:	1a82      	subs	r2, r0, r2
    7cae:	40d1      	lsrs	r1, r2
    7cb0:	4248      	negs	r0, r1
    7cb2:	2b00      	cmp	r3, #0
    7cb4:	d100      	bne.n	7cb8 <__aeabi_f2iz+0x2c>
    7cb6:	0008      	movs	r0, r1
    7cb8:	4770      	bx	lr
    7cba:	4a03      	ldr	r2, [pc, #12]	; (7cc8 <__aeabi_f2iz+0x3c>)
    7cbc:	1898      	adds	r0, r3, r2
    7cbe:	e7fb      	b.n	7cb8 <__aeabi_f2iz+0x2c>
    7cc0:	3a96      	subs	r2, #150	; 0x96
    7cc2:	4091      	lsls	r1, r2
    7cc4:	e7f4      	b.n	7cb0 <__aeabi_f2iz+0x24>
    7cc6:	46c0      	nop			; (mov r8, r8)
    7cc8:	7fffffff 	.word	0x7fffffff

00007ccc <__aeabi_i2f>:
__aeabi_i2f():
    7ccc:	b570      	push	{r4, r5, r6, lr}
    7cce:	2800      	cmp	r0, #0
    7cd0:	d03d      	beq.n	7d4e <__aeabi_i2f+0x82>
    7cd2:	17c3      	asrs	r3, r0, #31
    7cd4:	18c5      	adds	r5, r0, r3
    7cd6:	405d      	eors	r5, r3
    7cd8:	0fc4      	lsrs	r4, r0, #31
    7cda:	0028      	movs	r0, r5
    7cdc:	f000 ffaa 	bl	8c34 <__clzsi2>
    7ce0:	229e      	movs	r2, #158	; 0x9e
    7ce2:	1a12      	subs	r2, r2, r0
    7ce4:	2a96      	cmp	r2, #150	; 0x96
    7ce6:	dc07      	bgt.n	7cf8 <__aeabi_i2f+0x2c>
    7ce8:	b2d2      	uxtb	r2, r2
    7cea:	2808      	cmp	r0, #8
    7cec:	dd33      	ble.n	7d56 <__aeabi_i2f+0x8a>
    7cee:	3808      	subs	r0, #8
    7cf0:	4085      	lsls	r5, r0
    7cf2:	0268      	lsls	r0, r5, #9
    7cf4:	0a40      	lsrs	r0, r0, #9
    7cf6:	e023      	b.n	7d40 <__aeabi_i2f+0x74>
    7cf8:	2a99      	cmp	r2, #153	; 0x99
    7cfa:	dd0b      	ble.n	7d14 <__aeabi_i2f+0x48>
    7cfc:	2305      	movs	r3, #5
    7cfe:	0029      	movs	r1, r5
    7d00:	1a1b      	subs	r3, r3, r0
    7d02:	40d9      	lsrs	r1, r3
    7d04:	0003      	movs	r3, r0
    7d06:	331b      	adds	r3, #27
    7d08:	409d      	lsls	r5, r3
    7d0a:	002b      	movs	r3, r5
    7d0c:	1e5d      	subs	r5, r3, #1
    7d0e:	41ab      	sbcs	r3, r5
    7d10:	4319      	orrs	r1, r3
    7d12:	000d      	movs	r5, r1
    7d14:	2805      	cmp	r0, #5
    7d16:	dd01      	ble.n	7d1c <__aeabi_i2f+0x50>
    7d18:	1f43      	subs	r3, r0, #5
    7d1a:	409d      	lsls	r5, r3
    7d1c:	002b      	movs	r3, r5
    7d1e:	490f      	ldr	r1, [pc, #60]	; (7d5c <__aeabi_i2f+0x90>)
    7d20:	400b      	ands	r3, r1
    7d22:	076e      	lsls	r6, r5, #29
    7d24:	d009      	beq.n	7d3a <__aeabi_i2f+0x6e>
    7d26:	260f      	movs	r6, #15
    7d28:	4035      	ands	r5, r6
    7d2a:	2d04      	cmp	r5, #4
    7d2c:	d005      	beq.n	7d3a <__aeabi_i2f+0x6e>
    7d2e:	3304      	adds	r3, #4
    7d30:	015d      	lsls	r5, r3, #5
    7d32:	d502      	bpl.n	7d3a <__aeabi_i2f+0x6e>
    7d34:	229f      	movs	r2, #159	; 0x9f
    7d36:	400b      	ands	r3, r1
    7d38:	1a12      	subs	r2, r2, r0
    7d3a:	019b      	lsls	r3, r3, #6
    7d3c:	0a58      	lsrs	r0, r3, #9
    7d3e:	b2d2      	uxtb	r2, r2
    7d40:	0240      	lsls	r0, r0, #9
    7d42:	05d2      	lsls	r2, r2, #23
    7d44:	0a40      	lsrs	r0, r0, #9
    7d46:	07e4      	lsls	r4, r4, #31
    7d48:	4310      	orrs	r0, r2
    7d4a:	4320      	orrs	r0, r4
    7d4c:	bd70      	pop	{r4, r5, r6, pc}
    7d4e:	2400      	movs	r4, #0
    7d50:	2200      	movs	r2, #0
    7d52:	2000      	movs	r0, #0
    7d54:	e7f4      	b.n	7d40 <__aeabi_i2f+0x74>
    7d56:	0268      	lsls	r0, r5, #9
    7d58:	0a40      	lsrs	r0, r0, #9
    7d5a:	e7f1      	b.n	7d40 <__aeabi_i2f+0x74>
    7d5c:	fbffffff 	.word	0xfbffffff

00007d60 <__aeabi_ui2f>:
__aeabi_ui2f():
    7d60:	b570      	push	{r4, r5, r6, lr}
    7d62:	1e04      	subs	r4, r0, #0
    7d64:	d034      	beq.n	7dd0 <__aeabi_ui2f+0x70>
    7d66:	f000 ff65 	bl	8c34 <__clzsi2>
    7d6a:	229e      	movs	r2, #158	; 0x9e
    7d6c:	1a12      	subs	r2, r2, r0
    7d6e:	2a96      	cmp	r2, #150	; 0x96
    7d70:	dc07      	bgt.n	7d82 <__aeabi_ui2f+0x22>
    7d72:	b2d2      	uxtb	r2, r2
    7d74:	2808      	cmp	r0, #8
    7d76:	dd2e      	ble.n	7dd6 <__aeabi_ui2f+0x76>
    7d78:	3808      	subs	r0, #8
    7d7a:	4084      	lsls	r4, r0
    7d7c:	0260      	lsls	r0, r4, #9
    7d7e:	0a40      	lsrs	r0, r0, #9
    7d80:	e021      	b.n	7dc6 <__aeabi_ui2f+0x66>
    7d82:	2a99      	cmp	r2, #153	; 0x99
    7d84:	dd09      	ble.n	7d9a <__aeabi_ui2f+0x3a>
    7d86:	0003      	movs	r3, r0
    7d88:	0021      	movs	r1, r4
    7d8a:	331b      	adds	r3, #27
    7d8c:	4099      	lsls	r1, r3
    7d8e:	1e4b      	subs	r3, r1, #1
    7d90:	4199      	sbcs	r1, r3
    7d92:	2305      	movs	r3, #5
    7d94:	1a1b      	subs	r3, r3, r0
    7d96:	40dc      	lsrs	r4, r3
    7d98:	430c      	orrs	r4, r1
    7d9a:	2805      	cmp	r0, #5
    7d9c:	dd01      	ble.n	7da2 <__aeabi_ui2f+0x42>
    7d9e:	1f43      	subs	r3, r0, #5
    7da0:	409c      	lsls	r4, r3
    7da2:	0023      	movs	r3, r4
    7da4:	490d      	ldr	r1, [pc, #52]	; (7ddc <__aeabi_ui2f+0x7c>)
    7da6:	400b      	ands	r3, r1
    7da8:	0765      	lsls	r5, r4, #29
    7daa:	d009      	beq.n	7dc0 <__aeabi_ui2f+0x60>
    7dac:	250f      	movs	r5, #15
    7dae:	402c      	ands	r4, r5
    7db0:	2c04      	cmp	r4, #4
    7db2:	d005      	beq.n	7dc0 <__aeabi_ui2f+0x60>
    7db4:	3304      	adds	r3, #4
    7db6:	015c      	lsls	r4, r3, #5
    7db8:	d502      	bpl.n	7dc0 <__aeabi_ui2f+0x60>
    7dba:	229f      	movs	r2, #159	; 0x9f
    7dbc:	400b      	ands	r3, r1
    7dbe:	1a12      	subs	r2, r2, r0
    7dc0:	019b      	lsls	r3, r3, #6
    7dc2:	0a58      	lsrs	r0, r3, #9
    7dc4:	b2d2      	uxtb	r2, r2
    7dc6:	0240      	lsls	r0, r0, #9
    7dc8:	05d2      	lsls	r2, r2, #23
    7dca:	0a40      	lsrs	r0, r0, #9
    7dcc:	4310      	orrs	r0, r2
    7dce:	bd70      	pop	{r4, r5, r6, pc}
    7dd0:	2200      	movs	r2, #0
    7dd2:	2000      	movs	r0, #0
    7dd4:	e7f7      	b.n	7dc6 <__aeabi_ui2f+0x66>
    7dd6:	0260      	lsls	r0, r4, #9
    7dd8:	0a40      	lsrs	r0, r0, #9
    7dda:	e7f4      	b.n	7dc6 <__aeabi_ui2f+0x66>
    7ddc:	fbffffff 	.word	0xfbffffff

00007de0 <__eqdf2>:
__nedf2():
    7de0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7de2:	464f      	mov	r7, r9
    7de4:	4646      	mov	r6, r8
    7de6:	46d6      	mov	lr, sl
    7de8:	4684      	mov	ip, r0
    7dea:	b5c0      	push	{r6, r7, lr}
    7dec:	4680      	mov	r8, r0
    7dee:	4e19      	ldr	r6, [pc, #100]	; (7e54 <__eqdf2+0x74>)
    7df0:	0318      	lsls	r0, r3, #12
    7df2:	030f      	lsls	r7, r1, #12
    7df4:	004d      	lsls	r5, r1, #1
    7df6:	0b00      	lsrs	r0, r0, #12
    7df8:	005c      	lsls	r4, r3, #1
    7dfa:	4682      	mov	sl, r0
    7dfc:	0b3f      	lsrs	r7, r7, #12
    7dfe:	0d6d      	lsrs	r5, r5, #21
    7e00:	0fc9      	lsrs	r1, r1, #31
    7e02:	4691      	mov	r9, r2
    7e04:	0d64      	lsrs	r4, r4, #21
    7e06:	0fdb      	lsrs	r3, r3, #31
    7e08:	2001      	movs	r0, #1
    7e0a:	42b5      	cmp	r5, r6
    7e0c:	d00a      	beq.n	7e24 <__eqdf2+0x44>
    7e0e:	42b4      	cmp	r4, r6
    7e10:	d003      	beq.n	7e1a <__eqdf2+0x3a>
    7e12:	42a5      	cmp	r5, r4
    7e14:	d101      	bne.n	7e1a <__eqdf2+0x3a>
    7e16:	4557      	cmp	r7, sl
    7e18:	d00c      	beq.n	7e34 <__eqdf2+0x54>
    7e1a:	bc1c      	pop	{r2, r3, r4}
    7e1c:	4690      	mov	r8, r2
    7e1e:	4699      	mov	r9, r3
    7e20:	46a2      	mov	sl, r4
    7e22:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7e24:	4666      	mov	r6, ip
    7e26:	433e      	orrs	r6, r7
    7e28:	d1f7      	bne.n	7e1a <__eqdf2+0x3a>
    7e2a:	42ac      	cmp	r4, r5
    7e2c:	d1f5      	bne.n	7e1a <__eqdf2+0x3a>
    7e2e:	4654      	mov	r4, sl
    7e30:	4314      	orrs	r4, r2
    7e32:	d1f2      	bne.n	7e1a <__eqdf2+0x3a>
    7e34:	2001      	movs	r0, #1
    7e36:	45c8      	cmp	r8, r9
    7e38:	d1ef      	bne.n	7e1a <__eqdf2+0x3a>
    7e3a:	4299      	cmp	r1, r3
    7e3c:	d007      	beq.n	7e4e <__eqdf2+0x6e>
    7e3e:	2d00      	cmp	r5, #0
    7e40:	d1eb      	bne.n	7e1a <__eqdf2+0x3a>
    7e42:	4663      	mov	r3, ip
    7e44:	431f      	orrs	r7, r3
    7e46:	0038      	movs	r0, r7
    7e48:	1e47      	subs	r7, r0, #1
    7e4a:	41b8      	sbcs	r0, r7
    7e4c:	e7e5      	b.n	7e1a <__eqdf2+0x3a>
    7e4e:	2000      	movs	r0, #0
    7e50:	e7e3      	b.n	7e1a <__eqdf2+0x3a>
    7e52:	46c0      	nop			; (mov r8, r8)
    7e54:	000007ff 	.word	0x000007ff

00007e58 <__gedf2>:
__gedf2():
    7e58:	b5f0      	push	{r4, r5, r6, r7, lr}
    7e5a:	464f      	mov	r7, r9
    7e5c:	4646      	mov	r6, r8
    7e5e:	46d6      	mov	lr, sl
    7e60:	004d      	lsls	r5, r1, #1
    7e62:	b5c0      	push	{r6, r7, lr}
    7e64:	030e      	lsls	r6, r1, #12
    7e66:	0fc9      	lsrs	r1, r1, #31
    7e68:	468a      	mov	sl, r1
    7e6a:	492c      	ldr	r1, [pc, #176]	; (7f1c <__gedf2+0xc4>)
    7e6c:	031f      	lsls	r7, r3, #12
    7e6e:	005c      	lsls	r4, r3, #1
    7e70:	4680      	mov	r8, r0
    7e72:	0b36      	lsrs	r6, r6, #12
    7e74:	0d6d      	lsrs	r5, r5, #21
    7e76:	4691      	mov	r9, r2
    7e78:	0b3f      	lsrs	r7, r7, #12
    7e7a:	0d64      	lsrs	r4, r4, #21
    7e7c:	0fdb      	lsrs	r3, r3, #31
    7e7e:	428d      	cmp	r5, r1
    7e80:	d01e      	beq.n	7ec0 <__gedf2+0x68>
    7e82:	428c      	cmp	r4, r1
    7e84:	d016      	beq.n	7eb4 <__gedf2+0x5c>
    7e86:	2d00      	cmp	r5, #0
    7e88:	d11e      	bne.n	7ec8 <__gedf2+0x70>
    7e8a:	4330      	orrs	r0, r6
    7e8c:	4684      	mov	ip, r0
    7e8e:	2c00      	cmp	r4, #0
    7e90:	d101      	bne.n	7e96 <__gedf2+0x3e>
    7e92:	433a      	orrs	r2, r7
    7e94:	d023      	beq.n	7ede <__gedf2+0x86>
    7e96:	4662      	mov	r2, ip
    7e98:	2a00      	cmp	r2, #0
    7e9a:	d01a      	beq.n	7ed2 <__gedf2+0x7a>
    7e9c:	459a      	cmp	sl, r3
    7e9e:	d029      	beq.n	7ef4 <__gedf2+0x9c>
    7ea0:	4651      	mov	r1, sl
    7ea2:	2002      	movs	r0, #2
    7ea4:	3901      	subs	r1, #1
    7ea6:	4008      	ands	r0, r1
    7ea8:	3801      	subs	r0, #1
    7eaa:	bc1c      	pop	{r2, r3, r4}
    7eac:	4690      	mov	r8, r2
    7eae:	4699      	mov	r9, r3
    7eb0:	46a2      	mov	sl, r4
    7eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7eb4:	0039      	movs	r1, r7
    7eb6:	4311      	orrs	r1, r2
    7eb8:	d0e5      	beq.n	7e86 <__gedf2+0x2e>
    7eba:	2002      	movs	r0, #2
    7ebc:	4240      	negs	r0, r0
    7ebe:	e7f4      	b.n	7eaa <__gedf2+0x52>
    7ec0:	4330      	orrs	r0, r6
    7ec2:	d1fa      	bne.n	7eba <__gedf2+0x62>
    7ec4:	42ac      	cmp	r4, r5
    7ec6:	d00f      	beq.n	7ee8 <__gedf2+0x90>
    7ec8:	2c00      	cmp	r4, #0
    7eca:	d10f      	bne.n	7eec <__gedf2+0x94>
    7ecc:	433a      	orrs	r2, r7
    7ece:	d0e7      	beq.n	7ea0 <__gedf2+0x48>
    7ed0:	e00c      	b.n	7eec <__gedf2+0x94>
    7ed2:	2201      	movs	r2, #1
    7ed4:	3b01      	subs	r3, #1
    7ed6:	4393      	bics	r3, r2
    7ed8:	0018      	movs	r0, r3
    7eda:	3001      	adds	r0, #1
    7edc:	e7e5      	b.n	7eaa <__gedf2+0x52>
    7ede:	4663      	mov	r3, ip
    7ee0:	2000      	movs	r0, #0
    7ee2:	2b00      	cmp	r3, #0
    7ee4:	d0e1      	beq.n	7eaa <__gedf2+0x52>
    7ee6:	e7db      	b.n	7ea0 <__gedf2+0x48>
    7ee8:	433a      	orrs	r2, r7
    7eea:	d1e6      	bne.n	7eba <__gedf2+0x62>
    7eec:	459a      	cmp	sl, r3
    7eee:	d1d7      	bne.n	7ea0 <__gedf2+0x48>
    7ef0:	42a5      	cmp	r5, r4
    7ef2:	dcd5      	bgt.n	7ea0 <__gedf2+0x48>
    7ef4:	42a5      	cmp	r5, r4
    7ef6:	db05      	blt.n	7f04 <__gedf2+0xac>
    7ef8:	42be      	cmp	r6, r7
    7efa:	d8d1      	bhi.n	7ea0 <__gedf2+0x48>
    7efc:	d008      	beq.n	7f10 <__gedf2+0xb8>
    7efe:	2000      	movs	r0, #0
    7f00:	42be      	cmp	r6, r7
    7f02:	d2d2      	bcs.n	7eaa <__gedf2+0x52>
    7f04:	4650      	mov	r0, sl
    7f06:	2301      	movs	r3, #1
    7f08:	3801      	subs	r0, #1
    7f0a:	4398      	bics	r0, r3
    7f0c:	3001      	adds	r0, #1
    7f0e:	e7cc      	b.n	7eaa <__gedf2+0x52>
    7f10:	45c8      	cmp	r8, r9
    7f12:	d8c5      	bhi.n	7ea0 <__gedf2+0x48>
    7f14:	2000      	movs	r0, #0
    7f16:	45c8      	cmp	r8, r9
    7f18:	d3f4      	bcc.n	7f04 <__gedf2+0xac>
    7f1a:	e7c6      	b.n	7eaa <__gedf2+0x52>
    7f1c:	000007ff 	.word	0x000007ff

00007f20 <__ledf2>:
__ledf2():
    7f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f22:	464f      	mov	r7, r9
    7f24:	4646      	mov	r6, r8
    7f26:	46d6      	mov	lr, sl
    7f28:	004d      	lsls	r5, r1, #1
    7f2a:	b5c0      	push	{r6, r7, lr}
    7f2c:	030e      	lsls	r6, r1, #12
    7f2e:	0fc9      	lsrs	r1, r1, #31
    7f30:	468a      	mov	sl, r1
    7f32:	492e      	ldr	r1, [pc, #184]	; (7fec <__ledf2+0xcc>)
    7f34:	031f      	lsls	r7, r3, #12
    7f36:	005c      	lsls	r4, r3, #1
    7f38:	4680      	mov	r8, r0
    7f3a:	0b36      	lsrs	r6, r6, #12
    7f3c:	0d6d      	lsrs	r5, r5, #21
    7f3e:	4691      	mov	r9, r2
    7f40:	0b3f      	lsrs	r7, r7, #12
    7f42:	0d64      	lsrs	r4, r4, #21
    7f44:	0fdb      	lsrs	r3, r3, #31
    7f46:	428d      	cmp	r5, r1
    7f48:	d018      	beq.n	7f7c <__ledf2+0x5c>
    7f4a:	428c      	cmp	r4, r1
    7f4c:	d011      	beq.n	7f72 <__ledf2+0x52>
    7f4e:	2d00      	cmp	r5, #0
    7f50:	d118      	bne.n	7f84 <__ledf2+0x64>
    7f52:	4330      	orrs	r0, r6
    7f54:	4684      	mov	ip, r0
    7f56:	2c00      	cmp	r4, #0
    7f58:	d11e      	bne.n	7f98 <__ledf2+0x78>
    7f5a:	433a      	orrs	r2, r7
    7f5c:	d11c      	bne.n	7f98 <__ledf2+0x78>
    7f5e:	4663      	mov	r3, ip
    7f60:	2000      	movs	r0, #0
    7f62:	2b00      	cmp	r3, #0
    7f64:	d030      	beq.n	7fc8 <__ledf2+0xa8>
    7f66:	4651      	mov	r1, sl
    7f68:	2002      	movs	r0, #2
    7f6a:	3901      	subs	r1, #1
    7f6c:	4008      	ands	r0, r1
    7f6e:	3801      	subs	r0, #1
    7f70:	e02a      	b.n	7fc8 <__ledf2+0xa8>
    7f72:	0039      	movs	r1, r7
    7f74:	4311      	orrs	r1, r2
    7f76:	d0ea      	beq.n	7f4e <__ledf2+0x2e>
    7f78:	2002      	movs	r0, #2
    7f7a:	e025      	b.n	7fc8 <__ledf2+0xa8>
    7f7c:	4330      	orrs	r0, r6
    7f7e:	d1fb      	bne.n	7f78 <__ledf2+0x58>
    7f80:	42ac      	cmp	r4, r5
    7f82:	d026      	beq.n	7fd2 <__ledf2+0xb2>
    7f84:	2c00      	cmp	r4, #0
    7f86:	d126      	bne.n	7fd6 <__ledf2+0xb6>
    7f88:	433a      	orrs	r2, r7
    7f8a:	d124      	bne.n	7fd6 <__ledf2+0xb6>
    7f8c:	4651      	mov	r1, sl
    7f8e:	2002      	movs	r0, #2
    7f90:	3901      	subs	r1, #1
    7f92:	4008      	ands	r0, r1
    7f94:	3801      	subs	r0, #1
    7f96:	e017      	b.n	7fc8 <__ledf2+0xa8>
    7f98:	4662      	mov	r2, ip
    7f9a:	2a00      	cmp	r2, #0
    7f9c:	d00f      	beq.n	7fbe <__ledf2+0x9e>
    7f9e:	459a      	cmp	sl, r3
    7fa0:	d1e1      	bne.n	7f66 <__ledf2+0x46>
    7fa2:	42a5      	cmp	r5, r4
    7fa4:	db05      	blt.n	7fb2 <__ledf2+0x92>
    7fa6:	42be      	cmp	r6, r7
    7fa8:	d8dd      	bhi.n	7f66 <__ledf2+0x46>
    7faa:	d019      	beq.n	7fe0 <__ledf2+0xc0>
    7fac:	2000      	movs	r0, #0
    7fae:	42be      	cmp	r6, r7
    7fb0:	d20a      	bcs.n	7fc8 <__ledf2+0xa8>
    7fb2:	4650      	mov	r0, sl
    7fb4:	2301      	movs	r3, #1
    7fb6:	3801      	subs	r0, #1
    7fb8:	4398      	bics	r0, r3
    7fba:	3001      	adds	r0, #1
    7fbc:	e004      	b.n	7fc8 <__ledf2+0xa8>
    7fbe:	2201      	movs	r2, #1
    7fc0:	3b01      	subs	r3, #1
    7fc2:	4393      	bics	r3, r2
    7fc4:	0018      	movs	r0, r3
    7fc6:	3001      	adds	r0, #1
    7fc8:	bc1c      	pop	{r2, r3, r4}
    7fca:	4690      	mov	r8, r2
    7fcc:	4699      	mov	r9, r3
    7fce:	46a2      	mov	sl, r4
    7fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fd2:	433a      	orrs	r2, r7
    7fd4:	d1d0      	bne.n	7f78 <__ledf2+0x58>
    7fd6:	459a      	cmp	sl, r3
    7fd8:	d1c5      	bne.n	7f66 <__ledf2+0x46>
    7fda:	42a5      	cmp	r5, r4
    7fdc:	dcc3      	bgt.n	7f66 <__ledf2+0x46>
    7fde:	e7e0      	b.n	7fa2 <__ledf2+0x82>
    7fe0:	45c8      	cmp	r8, r9
    7fe2:	d8c0      	bhi.n	7f66 <__ledf2+0x46>
    7fe4:	2000      	movs	r0, #0
    7fe6:	45c8      	cmp	r8, r9
    7fe8:	d3e3      	bcc.n	7fb2 <__ledf2+0x92>
    7fea:	e7ed      	b.n	7fc8 <__ledf2+0xa8>
    7fec:	000007ff 	.word	0x000007ff

00007ff0 <__aeabi_dmul>:
__aeabi_dmul():
    7ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ff2:	4657      	mov	r7, sl
    7ff4:	46de      	mov	lr, fp
    7ff6:	464e      	mov	r6, r9
    7ff8:	4645      	mov	r5, r8
    7ffa:	b5e0      	push	{r5, r6, r7, lr}
    7ffc:	4683      	mov	fp, r0
    7ffe:	0006      	movs	r6, r0
    8000:	030f      	lsls	r7, r1, #12
    8002:	0048      	lsls	r0, r1, #1
    8004:	b087      	sub	sp, #28
    8006:	4692      	mov	sl, r2
    8008:	001d      	movs	r5, r3
    800a:	0b3f      	lsrs	r7, r7, #12
    800c:	0d40      	lsrs	r0, r0, #21
    800e:	0fcc      	lsrs	r4, r1, #31
    8010:	2800      	cmp	r0, #0
    8012:	d100      	bne.n	8016 <__aeabi_dmul+0x26>
    8014:	e06f      	b.n	80f6 <__aeabi_dmul+0x106>
    8016:	4bde      	ldr	r3, [pc, #888]	; (8390 <__aeabi_dmul+0x3a0>)
    8018:	4298      	cmp	r0, r3
    801a:	d038      	beq.n	808e <__aeabi_dmul+0x9e>
    801c:	2380      	movs	r3, #128	; 0x80
    801e:	00ff      	lsls	r7, r7, #3
    8020:	041b      	lsls	r3, r3, #16
    8022:	431f      	orrs	r7, r3
    8024:	0f73      	lsrs	r3, r6, #29
    8026:	433b      	orrs	r3, r7
    8028:	9301      	str	r3, [sp, #4]
    802a:	4bda      	ldr	r3, [pc, #872]	; (8394 <__aeabi_dmul+0x3a4>)
    802c:	2700      	movs	r7, #0
    802e:	4699      	mov	r9, r3
    8030:	2300      	movs	r3, #0
    8032:	469b      	mov	fp, r3
    8034:	00f6      	lsls	r6, r6, #3
    8036:	4481      	add	r9, r0
    8038:	032b      	lsls	r3, r5, #12
    803a:	0069      	lsls	r1, r5, #1
    803c:	0b1b      	lsrs	r3, r3, #12
    803e:	4652      	mov	r2, sl
    8040:	4698      	mov	r8, r3
    8042:	0d49      	lsrs	r1, r1, #21
    8044:	0fed      	lsrs	r5, r5, #31
    8046:	2900      	cmp	r1, #0
    8048:	d100      	bne.n	804c <__aeabi_dmul+0x5c>
    804a:	e085      	b.n	8158 <__aeabi_dmul+0x168>
    804c:	4bd0      	ldr	r3, [pc, #832]	; (8390 <__aeabi_dmul+0x3a0>)
    804e:	4299      	cmp	r1, r3
    8050:	d100      	bne.n	8054 <__aeabi_dmul+0x64>
    8052:	e073      	b.n	813c <__aeabi_dmul+0x14c>
    8054:	4643      	mov	r3, r8
    8056:	00da      	lsls	r2, r3, #3
    8058:	2380      	movs	r3, #128	; 0x80
    805a:	041b      	lsls	r3, r3, #16
    805c:	4313      	orrs	r3, r2
    805e:	4652      	mov	r2, sl
    8060:	48cc      	ldr	r0, [pc, #816]	; (8394 <__aeabi_dmul+0x3a4>)
    8062:	0f52      	lsrs	r2, r2, #29
    8064:	4684      	mov	ip, r0
    8066:	4313      	orrs	r3, r2
    8068:	4652      	mov	r2, sl
    806a:	2000      	movs	r0, #0
    806c:	4461      	add	r1, ip
    806e:	00d2      	lsls	r2, r2, #3
    8070:	4489      	add	r9, r1
    8072:	0021      	movs	r1, r4
    8074:	4069      	eors	r1, r5
    8076:	9100      	str	r1, [sp, #0]
    8078:	468c      	mov	ip, r1
    807a:	2101      	movs	r1, #1
    807c:	4449      	add	r1, r9
    807e:	468a      	mov	sl, r1
    8080:	2f0f      	cmp	r7, #15
    8082:	d900      	bls.n	8086 <__aeabi_dmul+0x96>
    8084:	e090      	b.n	81a8 <__aeabi_dmul+0x1b8>
    8086:	49c4      	ldr	r1, [pc, #784]	; (8398 <__aeabi_dmul+0x3a8>)
    8088:	00bf      	lsls	r7, r7, #2
    808a:	59cf      	ldr	r7, [r1, r7]
    808c:	46bf      	mov	pc, r7
    808e:	465b      	mov	r3, fp
    8090:	433b      	orrs	r3, r7
    8092:	9301      	str	r3, [sp, #4]
    8094:	d000      	beq.n	8098 <__aeabi_dmul+0xa8>
    8096:	e16a      	b.n	836e <__aeabi_dmul+0x37e>
    8098:	2302      	movs	r3, #2
    809a:	2708      	movs	r7, #8
    809c:	2600      	movs	r6, #0
    809e:	4681      	mov	r9, r0
    80a0:	469b      	mov	fp, r3
    80a2:	e7c9      	b.n	8038 <__aeabi_dmul+0x48>
    80a4:	0032      	movs	r2, r6
    80a6:	4658      	mov	r0, fp
    80a8:	9b01      	ldr	r3, [sp, #4]
    80aa:	4661      	mov	r1, ip
    80ac:	9100      	str	r1, [sp, #0]
    80ae:	2802      	cmp	r0, #2
    80b0:	d100      	bne.n	80b4 <__aeabi_dmul+0xc4>
    80b2:	e075      	b.n	81a0 <__aeabi_dmul+0x1b0>
    80b4:	2803      	cmp	r0, #3
    80b6:	d100      	bne.n	80ba <__aeabi_dmul+0xca>
    80b8:	e1fe      	b.n	84b8 <__aeabi_dmul+0x4c8>
    80ba:	2801      	cmp	r0, #1
    80bc:	d000      	beq.n	80c0 <__aeabi_dmul+0xd0>
    80be:	e12c      	b.n	831a <__aeabi_dmul+0x32a>
    80c0:	2300      	movs	r3, #0
    80c2:	2700      	movs	r7, #0
    80c4:	2600      	movs	r6, #0
    80c6:	2500      	movs	r5, #0
    80c8:	033f      	lsls	r7, r7, #12
    80ca:	0d2a      	lsrs	r2, r5, #20
    80cc:	0b3f      	lsrs	r7, r7, #12
    80ce:	48b3      	ldr	r0, [pc, #716]	; (839c <__aeabi_dmul+0x3ac>)
    80d0:	0512      	lsls	r2, r2, #20
    80d2:	433a      	orrs	r2, r7
    80d4:	4002      	ands	r2, r0
    80d6:	051b      	lsls	r3, r3, #20
    80d8:	4313      	orrs	r3, r2
    80da:	9a00      	ldr	r2, [sp, #0]
    80dc:	005b      	lsls	r3, r3, #1
    80de:	07d1      	lsls	r1, r2, #31
    80e0:	085b      	lsrs	r3, r3, #1
    80e2:	430b      	orrs	r3, r1
    80e4:	0030      	movs	r0, r6
    80e6:	0019      	movs	r1, r3
    80e8:	b007      	add	sp, #28
    80ea:	bc3c      	pop	{r2, r3, r4, r5}
    80ec:	4690      	mov	r8, r2
    80ee:	4699      	mov	r9, r3
    80f0:	46a2      	mov	sl, r4
    80f2:	46ab      	mov	fp, r5
    80f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    80f6:	465b      	mov	r3, fp
    80f8:	433b      	orrs	r3, r7
    80fa:	9301      	str	r3, [sp, #4]
    80fc:	d100      	bne.n	8100 <__aeabi_dmul+0x110>
    80fe:	e12f      	b.n	8360 <__aeabi_dmul+0x370>
    8100:	2f00      	cmp	r7, #0
    8102:	d100      	bne.n	8106 <__aeabi_dmul+0x116>
    8104:	e1a5      	b.n	8452 <__aeabi_dmul+0x462>
    8106:	0038      	movs	r0, r7
    8108:	f000 fd94 	bl	8c34 <__clzsi2>
    810c:	0003      	movs	r3, r0
    810e:	3b0b      	subs	r3, #11
    8110:	2b1c      	cmp	r3, #28
    8112:	dd00      	ble.n	8116 <__aeabi_dmul+0x126>
    8114:	e196      	b.n	8444 <__aeabi_dmul+0x454>
    8116:	221d      	movs	r2, #29
    8118:	1ad3      	subs	r3, r2, r3
    811a:	465a      	mov	r2, fp
    811c:	0001      	movs	r1, r0
    811e:	40da      	lsrs	r2, r3
    8120:	465e      	mov	r6, fp
    8122:	3908      	subs	r1, #8
    8124:	408f      	lsls	r7, r1
    8126:	0013      	movs	r3, r2
    8128:	408e      	lsls	r6, r1
    812a:	433b      	orrs	r3, r7
    812c:	9301      	str	r3, [sp, #4]
    812e:	4b9c      	ldr	r3, [pc, #624]	; (83a0 <__aeabi_dmul+0x3b0>)
    8130:	2700      	movs	r7, #0
    8132:	1a1b      	subs	r3, r3, r0
    8134:	4699      	mov	r9, r3
    8136:	2300      	movs	r3, #0
    8138:	469b      	mov	fp, r3
    813a:	e77d      	b.n	8038 <__aeabi_dmul+0x48>
    813c:	4641      	mov	r1, r8
    813e:	4653      	mov	r3, sl
    8140:	430b      	orrs	r3, r1
    8142:	4993      	ldr	r1, [pc, #588]	; (8390 <__aeabi_dmul+0x3a0>)
    8144:	468c      	mov	ip, r1
    8146:	44e1      	add	r9, ip
    8148:	2b00      	cmp	r3, #0
    814a:	d000      	beq.n	814e <__aeabi_dmul+0x15e>
    814c:	e11a      	b.n	8384 <__aeabi_dmul+0x394>
    814e:	2202      	movs	r2, #2
    8150:	2002      	movs	r0, #2
    8152:	4317      	orrs	r7, r2
    8154:	2200      	movs	r2, #0
    8156:	e78c      	b.n	8072 <__aeabi_dmul+0x82>
    8158:	4313      	orrs	r3, r2
    815a:	d100      	bne.n	815e <__aeabi_dmul+0x16e>
    815c:	e10d      	b.n	837a <__aeabi_dmul+0x38a>
    815e:	4643      	mov	r3, r8
    8160:	2b00      	cmp	r3, #0
    8162:	d100      	bne.n	8166 <__aeabi_dmul+0x176>
    8164:	e181      	b.n	846a <__aeabi_dmul+0x47a>
    8166:	4640      	mov	r0, r8
    8168:	f000 fd64 	bl	8c34 <__clzsi2>
    816c:	0002      	movs	r2, r0
    816e:	3a0b      	subs	r2, #11
    8170:	2a1c      	cmp	r2, #28
    8172:	dd00      	ble.n	8176 <__aeabi_dmul+0x186>
    8174:	e172      	b.n	845c <__aeabi_dmul+0x46c>
    8176:	0001      	movs	r1, r0
    8178:	4643      	mov	r3, r8
    817a:	3908      	subs	r1, #8
    817c:	408b      	lsls	r3, r1
    817e:	4698      	mov	r8, r3
    8180:	231d      	movs	r3, #29
    8182:	1a9a      	subs	r2, r3, r2
    8184:	4653      	mov	r3, sl
    8186:	40d3      	lsrs	r3, r2
    8188:	001a      	movs	r2, r3
    818a:	4643      	mov	r3, r8
    818c:	4313      	orrs	r3, r2
    818e:	4652      	mov	r2, sl
    8190:	408a      	lsls	r2, r1
    8192:	4649      	mov	r1, r9
    8194:	1a08      	subs	r0, r1, r0
    8196:	4982      	ldr	r1, [pc, #520]	; (83a0 <__aeabi_dmul+0x3b0>)
    8198:	4689      	mov	r9, r1
    819a:	4481      	add	r9, r0
    819c:	2000      	movs	r0, #0
    819e:	e768      	b.n	8072 <__aeabi_dmul+0x82>
    81a0:	4b7b      	ldr	r3, [pc, #492]	; (8390 <__aeabi_dmul+0x3a0>)
    81a2:	2700      	movs	r7, #0
    81a4:	2600      	movs	r6, #0
    81a6:	e78e      	b.n	80c6 <__aeabi_dmul+0xd6>
    81a8:	0c14      	lsrs	r4, r2, #16
    81aa:	0412      	lsls	r2, r2, #16
    81ac:	0c12      	lsrs	r2, r2, #16
    81ae:	0011      	movs	r1, r2
    81b0:	0c37      	lsrs	r7, r6, #16
    81b2:	0436      	lsls	r6, r6, #16
    81b4:	0c35      	lsrs	r5, r6, #16
    81b6:	4379      	muls	r1, r7
    81b8:	0028      	movs	r0, r5
    81ba:	468c      	mov	ip, r1
    81bc:	002e      	movs	r6, r5
    81be:	4360      	muls	r0, r4
    81c0:	4460      	add	r0, ip
    81c2:	4683      	mov	fp, r0
    81c4:	4356      	muls	r6, r2
    81c6:	0021      	movs	r1, r4
    81c8:	0c30      	lsrs	r0, r6, #16
    81ca:	4680      	mov	r8, r0
    81cc:	4658      	mov	r0, fp
    81ce:	4379      	muls	r1, r7
    81d0:	4440      	add	r0, r8
    81d2:	9102      	str	r1, [sp, #8]
    81d4:	4584      	cmp	ip, r0
    81d6:	d906      	bls.n	81e6 <__aeabi_dmul+0x1f6>
    81d8:	4688      	mov	r8, r1
    81da:	2180      	movs	r1, #128	; 0x80
    81dc:	0249      	lsls	r1, r1, #9
    81de:	468c      	mov	ip, r1
    81e0:	44e0      	add	r8, ip
    81e2:	4641      	mov	r1, r8
    81e4:	9102      	str	r1, [sp, #8]
    81e6:	0436      	lsls	r6, r6, #16
    81e8:	0c01      	lsrs	r1, r0, #16
    81ea:	0c36      	lsrs	r6, r6, #16
    81ec:	0400      	lsls	r0, r0, #16
    81ee:	468b      	mov	fp, r1
    81f0:	1981      	adds	r1, r0, r6
    81f2:	0c1e      	lsrs	r6, r3, #16
    81f4:	041b      	lsls	r3, r3, #16
    81f6:	0c1b      	lsrs	r3, r3, #16
    81f8:	9103      	str	r1, [sp, #12]
    81fa:	0019      	movs	r1, r3
    81fc:	4379      	muls	r1, r7
    81fe:	468c      	mov	ip, r1
    8200:	0028      	movs	r0, r5
    8202:	4375      	muls	r5, r6
    8204:	4465      	add	r5, ip
    8206:	46a8      	mov	r8, r5
    8208:	4358      	muls	r0, r3
    820a:	0c05      	lsrs	r5, r0, #16
    820c:	4445      	add	r5, r8
    820e:	4377      	muls	r7, r6
    8210:	42a9      	cmp	r1, r5
    8212:	d903      	bls.n	821c <__aeabi_dmul+0x22c>
    8214:	2180      	movs	r1, #128	; 0x80
    8216:	0249      	lsls	r1, r1, #9
    8218:	468c      	mov	ip, r1
    821a:	4467      	add	r7, ip
    821c:	0c29      	lsrs	r1, r5, #16
    821e:	468c      	mov	ip, r1
    8220:	0039      	movs	r1, r7
    8222:	0400      	lsls	r0, r0, #16
    8224:	0c00      	lsrs	r0, r0, #16
    8226:	042d      	lsls	r5, r5, #16
    8228:	182d      	adds	r5, r5, r0
    822a:	4461      	add	r1, ip
    822c:	44ab      	add	fp, r5
    822e:	9105      	str	r1, [sp, #20]
    8230:	4659      	mov	r1, fp
    8232:	9104      	str	r1, [sp, #16]
    8234:	9901      	ldr	r1, [sp, #4]
    8236:	040f      	lsls	r7, r1, #16
    8238:	0c3f      	lsrs	r7, r7, #16
    823a:	0c08      	lsrs	r0, r1, #16
    823c:	0039      	movs	r1, r7
    823e:	4351      	muls	r1, r2
    8240:	4342      	muls	r2, r0
    8242:	4690      	mov	r8, r2
    8244:	0002      	movs	r2, r0
    8246:	468c      	mov	ip, r1
    8248:	0c09      	lsrs	r1, r1, #16
    824a:	468b      	mov	fp, r1
    824c:	4362      	muls	r2, r4
    824e:	437c      	muls	r4, r7
    8250:	4444      	add	r4, r8
    8252:	445c      	add	r4, fp
    8254:	45a0      	cmp	r8, r4
    8256:	d903      	bls.n	8260 <__aeabi_dmul+0x270>
    8258:	2180      	movs	r1, #128	; 0x80
    825a:	0249      	lsls	r1, r1, #9
    825c:	4688      	mov	r8, r1
    825e:	4442      	add	r2, r8
    8260:	0c21      	lsrs	r1, r4, #16
    8262:	4688      	mov	r8, r1
    8264:	4661      	mov	r1, ip
    8266:	0409      	lsls	r1, r1, #16
    8268:	0c09      	lsrs	r1, r1, #16
    826a:	468c      	mov	ip, r1
    826c:	0039      	movs	r1, r7
    826e:	4359      	muls	r1, r3
    8270:	4343      	muls	r3, r0
    8272:	4370      	muls	r0, r6
    8274:	437e      	muls	r6, r7
    8276:	0c0f      	lsrs	r7, r1, #16
    8278:	18f6      	adds	r6, r6, r3
    827a:	0424      	lsls	r4, r4, #16
    827c:	19be      	adds	r6, r7, r6
    827e:	4464      	add	r4, ip
    8280:	4442      	add	r2, r8
    8282:	468c      	mov	ip, r1
    8284:	42b3      	cmp	r3, r6
    8286:	d903      	bls.n	8290 <__aeabi_dmul+0x2a0>
    8288:	2380      	movs	r3, #128	; 0x80
    828a:	025b      	lsls	r3, r3, #9
    828c:	4698      	mov	r8, r3
    828e:	4440      	add	r0, r8
    8290:	9b02      	ldr	r3, [sp, #8]
    8292:	4661      	mov	r1, ip
    8294:	4698      	mov	r8, r3
    8296:	9b04      	ldr	r3, [sp, #16]
    8298:	0437      	lsls	r7, r6, #16
    829a:	4443      	add	r3, r8
    829c:	469b      	mov	fp, r3
    829e:	45ab      	cmp	fp, r5
    82a0:	41ad      	sbcs	r5, r5
    82a2:	426b      	negs	r3, r5
    82a4:	040d      	lsls	r5, r1, #16
    82a6:	9905      	ldr	r1, [sp, #20]
    82a8:	0c2d      	lsrs	r5, r5, #16
    82aa:	468c      	mov	ip, r1
    82ac:	197f      	adds	r7, r7, r5
    82ae:	4467      	add	r7, ip
    82b0:	18fd      	adds	r5, r7, r3
    82b2:	46a8      	mov	r8, r5
    82b4:	465d      	mov	r5, fp
    82b6:	192d      	adds	r5, r5, r4
    82b8:	42a5      	cmp	r5, r4
    82ba:	41a4      	sbcs	r4, r4
    82bc:	4693      	mov	fp, r2
    82be:	4264      	negs	r4, r4
    82c0:	46a4      	mov	ip, r4
    82c2:	44c3      	add	fp, r8
    82c4:	44dc      	add	ip, fp
    82c6:	428f      	cmp	r7, r1
    82c8:	41bf      	sbcs	r7, r7
    82ca:	4598      	cmp	r8, r3
    82cc:	419b      	sbcs	r3, r3
    82ce:	4593      	cmp	fp, r2
    82d0:	4192      	sbcs	r2, r2
    82d2:	45a4      	cmp	ip, r4
    82d4:	41a4      	sbcs	r4, r4
    82d6:	425b      	negs	r3, r3
    82d8:	427f      	negs	r7, r7
    82da:	431f      	orrs	r7, r3
    82dc:	0c36      	lsrs	r6, r6, #16
    82de:	4252      	negs	r2, r2
    82e0:	4264      	negs	r4, r4
    82e2:	19bf      	adds	r7, r7, r6
    82e4:	4322      	orrs	r2, r4
    82e6:	18bf      	adds	r7, r7, r2
    82e8:	4662      	mov	r2, ip
    82ea:	1838      	adds	r0, r7, r0
    82ec:	0243      	lsls	r3, r0, #9
    82ee:	0dd2      	lsrs	r2, r2, #23
    82f0:	9903      	ldr	r1, [sp, #12]
    82f2:	4313      	orrs	r3, r2
    82f4:	026a      	lsls	r2, r5, #9
    82f6:	430a      	orrs	r2, r1
    82f8:	1e50      	subs	r0, r2, #1
    82fa:	4182      	sbcs	r2, r0
    82fc:	4661      	mov	r1, ip
    82fe:	0ded      	lsrs	r5, r5, #23
    8300:	432a      	orrs	r2, r5
    8302:	024e      	lsls	r6, r1, #9
    8304:	4332      	orrs	r2, r6
    8306:	01d9      	lsls	r1, r3, #7
    8308:	d400      	bmi.n	830c <__aeabi_dmul+0x31c>
    830a:	e0b3      	b.n	8474 <__aeabi_dmul+0x484>
    830c:	2601      	movs	r6, #1
    830e:	0850      	lsrs	r0, r2, #1
    8310:	4032      	ands	r2, r6
    8312:	4302      	orrs	r2, r0
    8314:	07de      	lsls	r6, r3, #31
    8316:	4332      	orrs	r2, r6
    8318:	085b      	lsrs	r3, r3, #1
    831a:	4c22      	ldr	r4, [pc, #136]	; (83a4 <__aeabi_dmul+0x3b4>)
    831c:	4454      	add	r4, sl
    831e:	2c00      	cmp	r4, #0
    8320:	dd62      	ble.n	83e8 <__aeabi_dmul+0x3f8>
    8322:	0751      	lsls	r1, r2, #29
    8324:	d009      	beq.n	833a <__aeabi_dmul+0x34a>
    8326:	200f      	movs	r0, #15
    8328:	4010      	ands	r0, r2
    832a:	2804      	cmp	r0, #4
    832c:	d005      	beq.n	833a <__aeabi_dmul+0x34a>
    832e:	1d10      	adds	r0, r2, #4
    8330:	4290      	cmp	r0, r2
    8332:	4192      	sbcs	r2, r2
    8334:	4252      	negs	r2, r2
    8336:	189b      	adds	r3, r3, r2
    8338:	0002      	movs	r2, r0
    833a:	01d9      	lsls	r1, r3, #7
    833c:	d504      	bpl.n	8348 <__aeabi_dmul+0x358>
    833e:	2480      	movs	r4, #128	; 0x80
    8340:	4819      	ldr	r0, [pc, #100]	; (83a8 <__aeabi_dmul+0x3b8>)
    8342:	00e4      	lsls	r4, r4, #3
    8344:	4003      	ands	r3, r0
    8346:	4454      	add	r4, sl
    8348:	4818      	ldr	r0, [pc, #96]	; (83ac <__aeabi_dmul+0x3bc>)
    834a:	4284      	cmp	r4, r0
    834c:	dd00      	ble.n	8350 <__aeabi_dmul+0x360>
    834e:	e727      	b.n	81a0 <__aeabi_dmul+0x1b0>
    8350:	075e      	lsls	r6, r3, #29
    8352:	025b      	lsls	r3, r3, #9
    8354:	08d2      	lsrs	r2, r2, #3
    8356:	0b1f      	lsrs	r7, r3, #12
    8358:	0563      	lsls	r3, r4, #21
    835a:	4316      	orrs	r6, r2
    835c:	0d5b      	lsrs	r3, r3, #21
    835e:	e6b2      	b.n	80c6 <__aeabi_dmul+0xd6>
    8360:	2300      	movs	r3, #0
    8362:	4699      	mov	r9, r3
    8364:	3301      	adds	r3, #1
    8366:	2704      	movs	r7, #4
    8368:	2600      	movs	r6, #0
    836a:	469b      	mov	fp, r3
    836c:	e664      	b.n	8038 <__aeabi_dmul+0x48>
    836e:	2303      	movs	r3, #3
    8370:	9701      	str	r7, [sp, #4]
    8372:	4681      	mov	r9, r0
    8374:	270c      	movs	r7, #12
    8376:	469b      	mov	fp, r3
    8378:	e65e      	b.n	8038 <__aeabi_dmul+0x48>
    837a:	2201      	movs	r2, #1
    837c:	2001      	movs	r0, #1
    837e:	4317      	orrs	r7, r2
    8380:	2200      	movs	r2, #0
    8382:	e676      	b.n	8072 <__aeabi_dmul+0x82>
    8384:	2303      	movs	r3, #3
    8386:	2003      	movs	r0, #3
    8388:	431f      	orrs	r7, r3
    838a:	4643      	mov	r3, r8
    838c:	e671      	b.n	8072 <__aeabi_dmul+0x82>
    838e:	46c0      	nop			; (mov r8, r8)
    8390:	000007ff 	.word	0x000007ff
    8394:	fffffc01 	.word	0xfffffc01
    8398:	0000a7fc 	.word	0x0000a7fc
    839c:	800fffff 	.word	0x800fffff
    83a0:	fffffc0d 	.word	0xfffffc0d
    83a4:	000003ff 	.word	0x000003ff
    83a8:	feffffff 	.word	0xfeffffff
    83ac:	000007fe 	.word	0x000007fe
    83b0:	2300      	movs	r3, #0
    83b2:	2780      	movs	r7, #128	; 0x80
    83b4:	9300      	str	r3, [sp, #0]
    83b6:	033f      	lsls	r7, r7, #12
    83b8:	2600      	movs	r6, #0
    83ba:	4b43      	ldr	r3, [pc, #268]	; (84c8 <__aeabi_dmul+0x4d8>)
    83bc:	e683      	b.n	80c6 <__aeabi_dmul+0xd6>
    83be:	9b01      	ldr	r3, [sp, #4]
    83c0:	0032      	movs	r2, r6
    83c2:	46a4      	mov	ip, r4
    83c4:	4658      	mov	r0, fp
    83c6:	e670      	b.n	80aa <__aeabi_dmul+0xba>
    83c8:	46ac      	mov	ip, r5
    83ca:	e66e      	b.n	80aa <__aeabi_dmul+0xba>
    83cc:	2780      	movs	r7, #128	; 0x80
    83ce:	9901      	ldr	r1, [sp, #4]
    83d0:	033f      	lsls	r7, r7, #12
    83d2:	4239      	tst	r1, r7
    83d4:	d02d      	beq.n	8432 <__aeabi_dmul+0x442>
    83d6:	423b      	tst	r3, r7
    83d8:	d12b      	bne.n	8432 <__aeabi_dmul+0x442>
    83da:	431f      	orrs	r7, r3
    83dc:	033f      	lsls	r7, r7, #12
    83de:	0b3f      	lsrs	r7, r7, #12
    83e0:	9500      	str	r5, [sp, #0]
    83e2:	0016      	movs	r6, r2
    83e4:	4b38      	ldr	r3, [pc, #224]	; (84c8 <__aeabi_dmul+0x4d8>)
    83e6:	e66e      	b.n	80c6 <__aeabi_dmul+0xd6>
    83e8:	2501      	movs	r5, #1
    83ea:	1b2d      	subs	r5, r5, r4
    83ec:	2d38      	cmp	r5, #56	; 0x38
    83ee:	dd00      	ble.n	83f2 <__aeabi_dmul+0x402>
    83f0:	e666      	b.n	80c0 <__aeabi_dmul+0xd0>
    83f2:	2d1f      	cmp	r5, #31
    83f4:	dc40      	bgt.n	8478 <__aeabi_dmul+0x488>
    83f6:	4835      	ldr	r0, [pc, #212]	; (84cc <__aeabi_dmul+0x4dc>)
    83f8:	001c      	movs	r4, r3
    83fa:	4450      	add	r0, sl
    83fc:	0016      	movs	r6, r2
    83fe:	4082      	lsls	r2, r0
    8400:	4084      	lsls	r4, r0
    8402:	40ee      	lsrs	r6, r5
    8404:	1e50      	subs	r0, r2, #1
    8406:	4182      	sbcs	r2, r0
    8408:	4334      	orrs	r4, r6
    840a:	4314      	orrs	r4, r2
    840c:	40eb      	lsrs	r3, r5
    840e:	0762      	lsls	r2, r4, #29
    8410:	d009      	beq.n	8426 <__aeabi_dmul+0x436>
    8412:	220f      	movs	r2, #15
    8414:	4022      	ands	r2, r4
    8416:	2a04      	cmp	r2, #4
    8418:	d005      	beq.n	8426 <__aeabi_dmul+0x436>
    841a:	0022      	movs	r2, r4
    841c:	1d14      	adds	r4, r2, #4
    841e:	4294      	cmp	r4, r2
    8420:	4180      	sbcs	r0, r0
    8422:	4240      	negs	r0, r0
    8424:	181b      	adds	r3, r3, r0
    8426:	021a      	lsls	r2, r3, #8
    8428:	d53e      	bpl.n	84a8 <__aeabi_dmul+0x4b8>
    842a:	2301      	movs	r3, #1
    842c:	2700      	movs	r7, #0
    842e:	2600      	movs	r6, #0
    8430:	e649      	b.n	80c6 <__aeabi_dmul+0xd6>
    8432:	2780      	movs	r7, #128	; 0x80
    8434:	9b01      	ldr	r3, [sp, #4]
    8436:	033f      	lsls	r7, r7, #12
    8438:	431f      	orrs	r7, r3
    843a:	033f      	lsls	r7, r7, #12
    843c:	0b3f      	lsrs	r7, r7, #12
    843e:	9400      	str	r4, [sp, #0]
    8440:	4b21      	ldr	r3, [pc, #132]	; (84c8 <__aeabi_dmul+0x4d8>)
    8442:	e640      	b.n	80c6 <__aeabi_dmul+0xd6>
    8444:	0003      	movs	r3, r0
    8446:	465a      	mov	r2, fp
    8448:	3b28      	subs	r3, #40	; 0x28
    844a:	409a      	lsls	r2, r3
    844c:	2600      	movs	r6, #0
    844e:	9201      	str	r2, [sp, #4]
    8450:	e66d      	b.n	812e <__aeabi_dmul+0x13e>
    8452:	4658      	mov	r0, fp
    8454:	f000 fbee 	bl	8c34 <__clzsi2>
    8458:	3020      	adds	r0, #32
    845a:	e657      	b.n	810c <__aeabi_dmul+0x11c>
    845c:	0003      	movs	r3, r0
    845e:	4652      	mov	r2, sl
    8460:	3b28      	subs	r3, #40	; 0x28
    8462:	409a      	lsls	r2, r3
    8464:	0013      	movs	r3, r2
    8466:	2200      	movs	r2, #0
    8468:	e693      	b.n	8192 <__aeabi_dmul+0x1a2>
    846a:	4650      	mov	r0, sl
    846c:	f000 fbe2 	bl	8c34 <__clzsi2>
    8470:	3020      	adds	r0, #32
    8472:	e67b      	b.n	816c <__aeabi_dmul+0x17c>
    8474:	46ca      	mov	sl, r9
    8476:	e750      	b.n	831a <__aeabi_dmul+0x32a>
    8478:	201f      	movs	r0, #31
    847a:	001e      	movs	r6, r3
    847c:	4240      	negs	r0, r0
    847e:	1b04      	subs	r4, r0, r4
    8480:	40e6      	lsrs	r6, r4
    8482:	2d20      	cmp	r5, #32
    8484:	d003      	beq.n	848e <__aeabi_dmul+0x49e>
    8486:	4c12      	ldr	r4, [pc, #72]	; (84d0 <__aeabi_dmul+0x4e0>)
    8488:	4454      	add	r4, sl
    848a:	40a3      	lsls	r3, r4
    848c:	431a      	orrs	r2, r3
    848e:	1e50      	subs	r0, r2, #1
    8490:	4182      	sbcs	r2, r0
    8492:	4332      	orrs	r2, r6
    8494:	2607      	movs	r6, #7
    8496:	2700      	movs	r7, #0
    8498:	4016      	ands	r6, r2
    849a:	d009      	beq.n	84b0 <__aeabi_dmul+0x4c0>
    849c:	200f      	movs	r0, #15
    849e:	2300      	movs	r3, #0
    84a0:	4010      	ands	r0, r2
    84a2:	0014      	movs	r4, r2
    84a4:	2804      	cmp	r0, #4
    84a6:	d1b9      	bne.n	841c <__aeabi_dmul+0x42c>
    84a8:	0022      	movs	r2, r4
    84aa:	075e      	lsls	r6, r3, #29
    84ac:	025b      	lsls	r3, r3, #9
    84ae:	0b1f      	lsrs	r7, r3, #12
    84b0:	08d2      	lsrs	r2, r2, #3
    84b2:	4316      	orrs	r6, r2
    84b4:	2300      	movs	r3, #0
    84b6:	e606      	b.n	80c6 <__aeabi_dmul+0xd6>
    84b8:	2780      	movs	r7, #128	; 0x80
    84ba:	033f      	lsls	r7, r7, #12
    84bc:	431f      	orrs	r7, r3
    84be:	033f      	lsls	r7, r7, #12
    84c0:	0b3f      	lsrs	r7, r7, #12
    84c2:	0016      	movs	r6, r2
    84c4:	4b00      	ldr	r3, [pc, #0]	; (84c8 <__aeabi_dmul+0x4d8>)
    84c6:	e5fe      	b.n	80c6 <__aeabi_dmul+0xd6>
    84c8:	000007ff 	.word	0x000007ff
    84cc:	0000041e 	.word	0x0000041e
    84d0:	0000043e 	.word	0x0000043e

000084d4 <__aeabi_dsub>:
__aeabi_dsub():
    84d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    84d6:	4657      	mov	r7, sl
    84d8:	464e      	mov	r6, r9
    84da:	4645      	mov	r5, r8
    84dc:	46de      	mov	lr, fp
    84de:	000c      	movs	r4, r1
    84e0:	0309      	lsls	r1, r1, #12
    84e2:	b5e0      	push	{r5, r6, r7, lr}
    84e4:	0a49      	lsrs	r1, r1, #9
    84e6:	0f46      	lsrs	r6, r0, #29
    84e8:	005f      	lsls	r7, r3, #1
    84ea:	4331      	orrs	r1, r6
    84ec:	031e      	lsls	r6, r3, #12
    84ee:	0fdb      	lsrs	r3, r3, #31
    84f0:	0a76      	lsrs	r6, r6, #9
    84f2:	469b      	mov	fp, r3
    84f4:	0f53      	lsrs	r3, r2, #29
    84f6:	4333      	orrs	r3, r6
    84f8:	4ec8      	ldr	r6, [pc, #800]	; (881c <__aeabi_dsub+0x348>)
    84fa:	0065      	lsls	r5, r4, #1
    84fc:	00c0      	lsls	r0, r0, #3
    84fe:	0fe4      	lsrs	r4, r4, #31
    8500:	00d2      	lsls	r2, r2, #3
    8502:	0d6d      	lsrs	r5, r5, #21
    8504:	46a2      	mov	sl, r4
    8506:	4681      	mov	r9, r0
    8508:	0d7f      	lsrs	r7, r7, #21
    850a:	469c      	mov	ip, r3
    850c:	4690      	mov	r8, r2
    850e:	42b7      	cmp	r7, r6
    8510:	d100      	bne.n	8514 <__aeabi_dsub+0x40>
    8512:	e0b9      	b.n	8688 <__aeabi_dsub+0x1b4>
    8514:	465b      	mov	r3, fp
    8516:	2601      	movs	r6, #1
    8518:	4073      	eors	r3, r6
    851a:	469b      	mov	fp, r3
    851c:	1bee      	subs	r6, r5, r7
    851e:	45a3      	cmp	fp, r4
    8520:	d100      	bne.n	8524 <__aeabi_dsub+0x50>
    8522:	e083      	b.n	862c <__aeabi_dsub+0x158>
    8524:	2e00      	cmp	r6, #0
    8526:	dd63      	ble.n	85f0 <__aeabi_dsub+0x11c>
    8528:	2f00      	cmp	r7, #0
    852a:	d000      	beq.n	852e <__aeabi_dsub+0x5a>
    852c:	e0b1      	b.n	8692 <__aeabi_dsub+0x1be>
    852e:	4663      	mov	r3, ip
    8530:	4313      	orrs	r3, r2
    8532:	d100      	bne.n	8536 <__aeabi_dsub+0x62>
    8534:	e123      	b.n	877e <__aeabi_dsub+0x2aa>
    8536:	1e73      	subs	r3, r6, #1
    8538:	2b00      	cmp	r3, #0
    853a:	d000      	beq.n	853e <__aeabi_dsub+0x6a>
    853c:	e1ba      	b.n	88b4 <__aeabi_dsub+0x3e0>
    853e:	1a86      	subs	r6, r0, r2
    8540:	4663      	mov	r3, ip
    8542:	42b0      	cmp	r0, r6
    8544:	4180      	sbcs	r0, r0
    8546:	2501      	movs	r5, #1
    8548:	1ac9      	subs	r1, r1, r3
    854a:	4240      	negs	r0, r0
    854c:	1a09      	subs	r1, r1, r0
    854e:	020b      	lsls	r3, r1, #8
    8550:	d400      	bmi.n	8554 <__aeabi_dsub+0x80>
    8552:	e147      	b.n	87e4 <__aeabi_dsub+0x310>
    8554:	0249      	lsls	r1, r1, #9
    8556:	0a4b      	lsrs	r3, r1, #9
    8558:	4698      	mov	r8, r3
    855a:	4643      	mov	r3, r8
    855c:	2b00      	cmp	r3, #0
    855e:	d100      	bne.n	8562 <__aeabi_dsub+0x8e>
    8560:	e189      	b.n	8876 <__aeabi_dsub+0x3a2>
    8562:	4640      	mov	r0, r8
    8564:	f000 fb66 	bl	8c34 <__clzsi2>
    8568:	0003      	movs	r3, r0
    856a:	3b08      	subs	r3, #8
    856c:	2b1f      	cmp	r3, #31
    856e:	dd00      	ble.n	8572 <__aeabi_dsub+0x9e>
    8570:	e17c      	b.n	886c <__aeabi_dsub+0x398>
    8572:	2220      	movs	r2, #32
    8574:	0030      	movs	r0, r6
    8576:	1ad2      	subs	r2, r2, r3
    8578:	4641      	mov	r1, r8
    857a:	40d0      	lsrs	r0, r2
    857c:	4099      	lsls	r1, r3
    857e:	0002      	movs	r2, r0
    8580:	409e      	lsls	r6, r3
    8582:	430a      	orrs	r2, r1
    8584:	429d      	cmp	r5, r3
    8586:	dd00      	ble.n	858a <__aeabi_dsub+0xb6>
    8588:	e16a      	b.n	8860 <__aeabi_dsub+0x38c>
    858a:	1b5d      	subs	r5, r3, r5
    858c:	1c6b      	adds	r3, r5, #1
    858e:	2b1f      	cmp	r3, #31
    8590:	dd00      	ble.n	8594 <__aeabi_dsub+0xc0>
    8592:	e194      	b.n	88be <__aeabi_dsub+0x3ea>
    8594:	2120      	movs	r1, #32
    8596:	0010      	movs	r0, r2
    8598:	0035      	movs	r5, r6
    859a:	1ac9      	subs	r1, r1, r3
    859c:	408e      	lsls	r6, r1
    859e:	40da      	lsrs	r2, r3
    85a0:	4088      	lsls	r0, r1
    85a2:	40dd      	lsrs	r5, r3
    85a4:	1e71      	subs	r1, r6, #1
    85a6:	418e      	sbcs	r6, r1
    85a8:	0011      	movs	r1, r2
    85aa:	2207      	movs	r2, #7
    85ac:	4328      	orrs	r0, r5
    85ae:	2500      	movs	r5, #0
    85b0:	4306      	orrs	r6, r0
    85b2:	4032      	ands	r2, r6
    85b4:	2a00      	cmp	r2, #0
    85b6:	d009      	beq.n	85cc <__aeabi_dsub+0xf8>
    85b8:	230f      	movs	r3, #15
    85ba:	4033      	ands	r3, r6
    85bc:	2b04      	cmp	r3, #4
    85be:	d005      	beq.n	85cc <__aeabi_dsub+0xf8>
    85c0:	1d33      	adds	r3, r6, #4
    85c2:	42b3      	cmp	r3, r6
    85c4:	41b6      	sbcs	r6, r6
    85c6:	4276      	negs	r6, r6
    85c8:	1989      	adds	r1, r1, r6
    85ca:	001e      	movs	r6, r3
    85cc:	020b      	lsls	r3, r1, #8
    85ce:	d400      	bmi.n	85d2 <__aeabi_dsub+0xfe>
    85d0:	e23d      	b.n	8a4e <__aeabi_dsub+0x57a>
    85d2:	1c6a      	adds	r2, r5, #1
    85d4:	4b91      	ldr	r3, [pc, #580]	; (881c <__aeabi_dsub+0x348>)
    85d6:	0555      	lsls	r5, r2, #21
    85d8:	0d6d      	lsrs	r5, r5, #21
    85da:	429a      	cmp	r2, r3
    85dc:	d100      	bne.n	85e0 <__aeabi_dsub+0x10c>
    85de:	e119      	b.n	8814 <__aeabi_dsub+0x340>
    85e0:	4a8f      	ldr	r2, [pc, #572]	; (8820 <__aeabi_dsub+0x34c>)
    85e2:	08f6      	lsrs	r6, r6, #3
    85e4:	400a      	ands	r2, r1
    85e6:	0757      	lsls	r7, r2, #29
    85e8:	0252      	lsls	r2, r2, #9
    85ea:	4337      	orrs	r7, r6
    85ec:	0b12      	lsrs	r2, r2, #12
    85ee:	e09b      	b.n	8728 <__aeabi_dsub+0x254>
    85f0:	2e00      	cmp	r6, #0
    85f2:	d000      	beq.n	85f6 <__aeabi_dsub+0x122>
    85f4:	e0c5      	b.n	8782 <__aeabi_dsub+0x2ae>
    85f6:	1c6e      	adds	r6, r5, #1
    85f8:	0576      	lsls	r6, r6, #21
    85fa:	0d76      	lsrs	r6, r6, #21
    85fc:	2e01      	cmp	r6, #1
    85fe:	dc00      	bgt.n	8602 <__aeabi_dsub+0x12e>
    8600:	e148      	b.n	8894 <__aeabi_dsub+0x3c0>
    8602:	4667      	mov	r7, ip
    8604:	1a86      	subs	r6, r0, r2
    8606:	1bcb      	subs	r3, r1, r7
    8608:	42b0      	cmp	r0, r6
    860a:	41bf      	sbcs	r7, r7
    860c:	427f      	negs	r7, r7
    860e:	46b8      	mov	r8, r7
    8610:	001f      	movs	r7, r3
    8612:	4643      	mov	r3, r8
    8614:	1aff      	subs	r7, r7, r3
    8616:	003b      	movs	r3, r7
    8618:	46b8      	mov	r8, r7
    861a:	021b      	lsls	r3, r3, #8
    861c:	d500      	bpl.n	8620 <__aeabi_dsub+0x14c>
    861e:	e15f      	b.n	88e0 <__aeabi_dsub+0x40c>
    8620:	4337      	orrs	r7, r6
    8622:	d19a      	bne.n	855a <__aeabi_dsub+0x86>
    8624:	2200      	movs	r2, #0
    8626:	2400      	movs	r4, #0
    8628:	2500      	movs	r5, #0
    862a:	e079      	b.n	8720 <__aeabi_dsub+0x24c>
    862c:	2e00      	cmp	r6, #0
    862e:	dc00      	bgt.n	8632 <__aeabi_dsub+0x15e>
    8630:	e0fa      	b.n	8828 <__aeabi_dsub+0x354>
    8632:	2f00      	cmp	r7, #0
    8634:	d100      	bne.n	8638 <__aeabi_dsub+0x164>
    8636:	e08d      	b.n	8754 <__aeabi_dsub+0x280>
    8638:	4b78      	ldr	r3, [pc, #480]	; (881c <__aeabi_dsub+0x348>)
    863a:	429d      	cmp	r5, r3
    863c:	d067      	beq.n	870e <__aeabi_dsub+0x23a>
    863e:	2380      	movs	r3, #128	; 0x80
    8640:	4667      	mov	r7, ip
    8642:	041b      	lsls	r3, r3, #16
    8644:	431f      	orrs	r7, r3
    8646:	46bc      	mov	ip, r7
    8648:	2e38      	cmp	r6, #56	; 0x38
    864a:	dc00      	bgt.n	864e <__aeabi_dsub+0x17a>
    864c:	e152      	b.n	88f4 <__aeabi_dsub+0x420>
    864e:	4663      	mov	r3, ip
    8650:	4313      	orrs	r3, r2
    8652:	1e5a      	subs	r2, r3, #1
    8654:	4193      	sbcs	r3, r2
    8656:	181e      	adds	r6, r3, r0
    8658:	4286      	cmp	r6, r0
    865a:	4180      	sbcs	r0, r0
    865c:	4240      	negs	r0, r0
    865e:	1809      	adds	r1, r1, r0
    8660:	020b      	lsls	r3, r1, #8
    8662:	d400      	bmi.n	8666 <__aeabi_dsub+0x192>
    8664:	e0be      	b.n	87e4 <__aeabi_dsub+0x310>
    8666:	4b6d      	ldr	r3, [pc, #436]	; (881c <__aeabi_dsub+0x348>)
    8668:	3501      	adds	r5, #1
    866a:	429d      	cmp	r5, r3
    866c:	d100      	bne.n	8670 <__aeabi_dsub+0x19c>
    866e:	e0d2      	b.n	8816 <__aeabi_dsub+0x342>
    8670:	4a6b      	ldr	r2, [pc, #428]	; (8820 <__aeabi_dsub+0x34c>)
    8672:	0873      	lsrs	r3, r6, #1
    8674:	400a      	ands	r2, r1
    8676:	2101      	movs	r1, #1
    8678:	400e      	ands	r6, r1
    867a:	431e      	orrs	r6, r3
    867c:	0851      	lsrs	r1, r2, #1
    867e:	07d3      	lsls	r3, r2, #31
    8680:	2207      	movs	r2, #7
    8682:	431e      	orrs	r6, r3
    8684:	4032      	ands	r2, r6
    8686:	e795      	b.n	85b4 <__aeabi_dsub+0xe0>
    8688:	001e      	movs	r6, r3
    868a:	4316      	orrs	r6, r2
    868c:	d000      	beq.n	8690 <__aeabi_dsub+0x1bc>
    868e:	e745      	b.n	851c <__aeabi_dsub+0x48>
    8690:	e740      	b.n	8514 <__aeabi_dsub+0x40>
    8692:	4b62      	ldr	r3, [pc, #392]	; (881c <__aeabi_dsub+0x348>)
    8694:	429d      	cmp	r5, r3
    8696:	d03a      	beq.n	870e <__aeabi_dsub+0x23a>
    8698:	2380      	movs	r3, #128	; 0x80
    869a:	4667      	mov	r7, ip
    869c:	041b      	lsls	r3, r3, #16
    869e:	431f      	orrs	r7, r3
    86a0:	46bc      	mov	ip, r7
    86a2:	2e38      	cmp	r6, #56	; 0x38
    86a4:	dd00      	ble.n	86a8 <__aeabi_dsub+0x1d4>
    86a6:	e0eb      	b.n	8880 <__aeabi_dsub+0x3ac>
    86a8:	2e1f      	cmp	r6, #31
    86aa:	dc00      	bgt.n	86ae <__aeabi_dsub+0x1da>
    86ac:	e13a      	b.n	8924 <__aeabi_dsub+0x450>
    86ae:	0033      	movs	r3, r6
    86b0:	4667      	mov	r7, ip
    86b2:	3b20      	subs	r3, #32
    86b4:	40df      	lsrs	r7, r3
    86b6:	003b      	movs	r3, r7
    86b8:	2e20      	cmp	r6, #32
    86ba:	d005      	beq.n	86c8 <__aeabi_dsub+0x1f4>
    86bc:	2740      	movs	r7, #64	; 0x40
    86be:	1bbf      	subs	r7, r7, r6
    86c0:	4666      	mov	r6, ip
    86c2:	40be      	lsls	r6, r7
    86c4:	4332      	orrs	r2, r6
    86c6:	4690      	mov	r8, r2
    86c8:	4646      	mov	r6, r8
    86ca:	1e72      	subs	r2, r6, #1
    86cc:	4196      	sbcs	r6, r2
    86ce:	4333      	orrs	r3, r6
    86d0:	e0da      	b.n	8888 <__aeabi_dsub+0x3b4>
    86d2:	2b00      	cmp	r3, #0
    86d4:	d100      	bne.n	86d8 <__aeabi_dsub+0x204>
    86d6:	e214      	b.n	8b02 <__aeabi_dsub+0x62e>
    86d8:	4663      	mov	r3, ip
    86da:	4313      	orrs	r3, r2
    86dc:	d100      	bne.n	86e0 <__aeabi_dsub+0x20c>
    86de:	e168      	b.n	89b2 <__aeabi_dsub+0x4de>
    86e0:	2380      	movs	r3, #128	; 0x80
    86e2:	074e      	lsls	r6, r1, #29
    86e4:	08c0      	lsrs	r0, r0, #3
    86e6:	08c9      	lsrs	r1, r1, #3
    86e8:	031b      	lsls	r3, r3, #12
    86ea:	4306      	orrs	r6, r0
    86ec:	4219      	tst	r1, r3
    86ee:	d008      	beq.n	8702 <__aeabi_dsub+0x22e>
    86f0:	4660      	mov	r0, ip
    86f2:	08c0      	lsrs	r0, r0, #3
    86f4:	4218      	tst	r0, r3
    86f6:	d104      	bne.n	8702 <__aeabi_dsub+0x22e>
    86f8:	4663      	mov	r3, ip
    86fa:	0001      	movs	r1, r0
    86fc:	08d2      	lsrs	r2, r2, #3
    86fe:	075e      	lsls	r6, r3, #29
    8700:	4316      	orrs	r6, r2
    8702:	00f3      	lsls	r3, r6, #3
    8704:	4699      	mov	r9, r3
    8706:	00c9      	lsls	r1, r1, #3
    8708:	0f72      	lsrs	r2, r6, #29
    870a:	4d44      	ldr	r5, [pc, #272]	; (881c <__aeabi_dsub+0x348>)
    870c:	4311      	orrs	r1, r2
    870e:	464b      	mov	r3, r9
    8710:	08de      	lsrs	r6, r3, #3
    8712:	4b42      	ldr	r3, [pc, #264]	; (881c <__aeabi_dsub+0x348>)
    8714:	074f      	lsls	r7, r1, #29
    8716:	4337      	orrs	r7, r6
    8718:	08ca      	lsrs	r2, r1, #3
    871a:	429d      	cmp	r5, r3
    871c:	d100      	bne.n	8720 <__aeabi_dsub+0x24c>
    871e:	e06e      	b.n	87fe <__aeabi_dsub+0x32a>
    8720:	0312      	lsls	r2, r2, #12
    8722:	056d      	lsls	r5, r5, #21
    8724:	0b12      	lsrs	r2, r2, #12
    8726:	0d6d      	lsrs	r5, r5, #21
    8728:	2100      	movs	r1, #0
    872a:	0312      	lsls	r2, r2, #12
    872c:	0b13      	lsrs	r3, r2, #12
    872e:	0d0a      	lsrs	r2, r1, #20
    8730:	0512      	lsls	r2, r2, #20
    8732:	431a      	orrs	r2, r3
    8734:	4b3b      	ldr	r3, [pc, #236]	; (8824 <__aeabi_dsub+0x350>)
    8736:	052d      	lsls	r5, r5, #20
    8738:	4013      	ands	r3, r2
    873a:	432b      	orrs	r3, r5
    873c:	005b      	lsls	r3, r3, #1
    873e:	07e4      	lsls	r4, r4, #31
    8740:	085b      	lsrs	r3, r3, #1
    8742:	4323      	orrs	r3, r4
    8744:	0038      	movs	r0, r7
    8746:	0019      	movs	r1, r3
    8748:	bc3c      	pop	{r2, r3, r4, r5}
    874a:	4690      	mov	r8, r2
    874c:	4699      	mov	r9, r3
    874e:	46a2      	mov	sl, r4
    8750:	46ab      	mov	fp, r5
    8752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8754:	4663      	mov	r3, ip
    8756:	4313      	orrs	r3, r2
    8758:	d011      	beq.n	877e <__aeabi_dsub+0x2aa>
    875a:	1e73      	subs	r3, r6, #1
    875c:	2b00      	cmp	r3, #0
    875e:	d000      	beq.n	8762 <__aeabi_dsub+0x28e>
    8760:	e107      	b.n	8972 <__aeabi_dsub+0x49e>
    8762:	1886      	adds	r6, r0, r2
    8764:	4286      	cmp	r6, r0
    8766:	4180      	sbcs	r0, r0
    8768:	4461      	add	r1, ip
    876a:	4240      	negs	r0, r0
    876c:	1809      	adds	r1, r1, r0
    876e:	2501      	movs	r5, #1
    8770:	020b      	lsls	r3, r1, #8
    8772:	d537      	bpl.n	87e4 <__aeabi_dsub+0x310>
    8774:	2502      	movs	r5, #2
    8776:	e77b      	b.n	8670 <__aeabi_dsub+0x19c>
    8778:	003e      	movs	r6, r7
    877a:	4661      	mov	r1, ip
    877c:	4691      	mov	r9, r2
    877e:	0035      	movs	r5, r6
    8780:	e7c5      	b.n	870e <__aeabi_dsub+0x23a>
    8782:	465c      	mov	r4, fp
    8784:	2d00      	cmp	r5, #0
    8786:	d000      	beq.n	878a <__aeabi_dsub+0x2b6>
    8788:	e0e1      	b.n	894e <__aeabi_dsub+0x47a>
    878a:	000b      	movs	r3, r1
    878c:	4303      	orrs	r3, r0
    878e:	d0f3      	beq.n	8778 <__aeabi_dsub+0x2a4>
    8790:	1c73      	adds	r3, r6, #1
    8792:	d100      	bne.n	8796 <__aeabi_dsub+0x2c2>
    8794:	e1ac      	b.n	8af0 <__aeabi_dsub+0x61c>
    8796:	4b21      	ldr	r3, [pc, #132]	; (881c <__aeabi_dsub+0x348>)
    8798:	429f      	cmp	r7, r3
    879a:	d100      	bne.n	879e <__aeabi_dsub+0x2ca>
    879c:	e13a      	b.n	8a14 <__aeabi_dsub+0x540>
    879e:	43f3      	mvns	r3, r6
    87a0:	2b38      	cmp	r3, #56	; 0x38
    87a2:	dd00      	ble.n	87a6 <__aeabi_dsub+0x2d2>
    87a4:	e16f      	b.n	8a86 <__aeabi_dsub+0x5b2>
    87a6:	2b1f      	cmp	r3, #31
    87a8:	dd00      	ble.n	87ac <__aeabi_dsub+0x2d8>
    87aa:	e18c      	b.n	8ac6 <__aeabi_dsub+0x5f2>
    87ac:	2520      	movs	r5, #32
    87ae:	000e      	movs	r6, r1
    87b0:	1aed      	subs	r5, r5, r3
    87b2:	40ae      	lsls	r6, r5
    87b4:	46b0      	mov	r8, r6
    87b6:	0006      	movs	r6, r0
    87b8:	46aa      	mov	sl, r5
    87ba:	40de      	lsrs	r6, r3
    87bc:	4645      	mov	r5, r8
    87be:	4335      	orrs	r5, r6
    87c0:	002e      	movs	r6, r5
    87c2:	4655      	mov	r5, sl
    87c4:	40d9      	lsrs	r1, r3
    87c6:	40a8      	lsls	r0, r5
    87c8:	4663      	mov	r3, ip
    87ca:	1e45      	subs	r5, r0, #1
    87cc:	41a8      	sbcs	r0, r5
    87ce:	1a5b      	subs	r3, r3, r1
    87d0:	469c      	mov	ip, r3
    87d2:	4330      	orrs	r0, r6
    87d4:	1a16      	subs	r6, r2, r0
    87d6:	42b2      	cmp	r2, r6
    87d8:	4192      	sbcs	r2, r2
    87da:	4663      	mov	r3, ip
    87dc:	4252      	negs	r2, r2
    87de:	1a99      	subs	r1, r3, r2
    87e0:	003d      	movs	r5, r7
    87e2:	e6b4      	b.n	854e <__aeabi_dsub+0x7a>
    87e4:	2207      	movs	r2, #7
    87e6:	4032      	ands	r2, r6
    87e8:	2a00      	cmp	r2, #0
    87ea:	d000      	beq.n	87ee <__aeabi_dsub+0x31a>
    87ec:	e6e4      	b.n	85b8 <__aeabi_dsub+0xe4>
    87ee:	4b0b      	ldr	r3, [pc, #44]	; (881c <__aeabi_dsub+0x348>)
    87f0:	08f6      	lsrs	r6, r6, #3
    87f2:	074f      	lsls	r7, r1, #29
    87f4:	4337      	orrs	r7, r6
    87f6:	08ca      	lsrs	r2, r1, #3
    87f8:	429d      	cmp	r5, r3
    87fa:	d000      	beq.n	87fe <__aeabi_dsub+0x32a>
    87fc:	e790      	b.n	8720 <__aeabi_dsub+0x24c>
    87fe:	003b      	movs	r3, r7
    8800:	4313      	orrs	r3, r2
    8802:	d100      	bne.n	8806 <__aeabi_dsub+0x332>
    8804:	e1a6      	b.n	8b54 <__aeabi_dsub+0x680>
    8806:	2380      	movs	r3, #128	; 0x80
    8808:	031b      	lsls	r3, r3, #12
    880a:	431a      	orrs	r2, r3
    880c:	0312      	lsls	r2, r2, #12
    880e:	0b12      	lsrs	r2, r2, #12
    8810:	4d02      	ldr	r5, [pc, #8]	; (881c <__aeabi_dsub+0x348>)
    8812:	e789      	b.n	8728 <__aeabi_dsub+0x254>
    8814:	0015      	movs	r5, r2
    8816:	2200      	movs	r2, #0
    8818:	2700      	movs	r7, #0
    881a:	e785      	b.n	8728 <__aeabi_dsub+0x254>
    881c:	000007ff 	.word	0x000007ff
    8820:	ff7fffff 	.word	0xff7fffff
    8824:	800fffff 	.word	0x800fffff
    8828:	2e00      	cmp	r6, #0
    882a:	d000      	beq.n	882e <__aeabi_dsub+0x35a>
    882c:	e0c7      	b.n	89be <__aeabi_dsub+0x4ea>
    882e:	1c6b      	adds	r3, r5, #1
    8830:	055e      	lsls	r6, r3, #21
    8832:	0d76      	lsrs	r6, r6, #21
    8834:	2e01      	cmp	r6, #1
    8836:	dc00      	bgt.n	883a <__aeabi_dsub+0x366>
    8838:	e0f0      	b.n	8a1c <__aeabi_dsub+0x548>
    883a:	4dc8      	ldr	r5, [pc, #800]	; (8b5c <__aeabi_dsub+0x688>)
    883c:	42ab      	cmp	r3, r5
    883e:	d100      	bne.n	8842 <__aeabi_dsub+0x36e>
    8840:	e0b9      	b.n	89b6 <__aeabi_dsub+0x4e2>
    8842:	1885      	adds	r5, r0, r2
    8844:	000a      	movs	r2, r1
    8846:	4285      	cmp	r5, r0
    8848:	4189      	sbcs	r1, r1
    884a:	4462      	add	r2, ip
    884c:	4249      	negs	r1, r1
    884e:	1851      	adds	r1, r2, r1
    8850:	2207      	movs	r2, #7
    8852:	07ce      	lsls	r6, r1, #31
    8854:	086d      	lsrs	r5, r5, #1
    8856:	432e      	orrs	r6, r5
    8858:	0849      	lsrs	r1, r1, #1
    885a:	4032      	ands	r2, r6
    885c:	001d      	movs	r5, r3
    885e:	e6a9      	b.n	85b4 <__aeabi_dsub+0xe0>
    8860:	49bf      	ldr	r1, [pc, #764]	; (8b60 <__aeabi_dsub+0x68c>)
    8862:	1aed      	subs	r5, r5, r3
    8864:	4011      	ands	r1, r2
    8866:	2207      	movs	r2, #7
    8868:	4032      	ands	r2, r6
    886a:	e6a3      	b.n	85b4 <__aeabi_dsub+0xe0>
    886c:	0032      	movs	r2, r6
    886e:	3828      	subs	r0, #40	; 0x28
    8870:	4082      	lsls	r2, r0
    8872:	2600      	movs	r6, #0
    8874:	e686      	b.n	8584 <__aeabi_dsub+0xb0>
    8876:	0030      	movs	r0, r6
    8878:	f000 f9dc 	bl	8c34 <__clzsi2>
    887c:	3020      	adds	r0, #32
    887e:	e673      	b.n	8568 <__aeabi_dsub+0x94>
    8880:	4663      	mov	r3, ip
    8882:	4313      	orrs	r3, r2
    8884:	1e5a      	subs	r2, r3, #1
    8886:	4193      	sbcs	r3, r2
    8888:	1ac6      	subs	r6, r0, r3
    888a:	42b0      	cmp	r0, r6
    888c:	4180      	sbcs	r0, r0
    888e:	4240      	negs	r0, r0
    8890:	1a09      	subs	r1, r1, r0
    8892:	e65c      	b.n	854e <__aeabi_dsub+0x7a>
    8894:	000e      	movs	r6, r1
    8896:	4667      	mov	r7, ip
    8898:	4306      	orrs	r6, r0
    889a:	4317      	orrs	r7, r2
    889c:	2d00      	cmp	r5, #0
    889e:	d15e      	bne.n	895e <__aeabi_dsub+0x48a>
    88a0:	2e00      	cmp	r6, #0
    88a2:	d000      	beq.n	88a6 <__aeabi_dsub+0x3d2>
    88a4:	e0f3      	b.n	8a8e <__aeabi_dsub+0x5ba>
    88a6:	2f00      	cmp	r7, #0
    88a8:	d100      	bne.n	88ac <__aeabi_dsub+0x3d8>
    88aa:	e11e      	b.n	8aea <__aeabi_dsub+0x616>
    88ac:	465c      	mov	r4, fp
    88ae:	4661      	mov	r1, ip
    88b0:	4691      	mov	r9, r2
    88b2:	e72c      	b.n	870e <__aeabi_dsub+0x23a>
    88b4:	4fa9      	ldr	r7, [pc, #676]	; (8b5c <__aeabi_dsub+0x688>)
    88b6:	42be      	cmp	r6, r7
    88b8:	d07b      	beq.n	89b2 <__aeabi_dsub+0x4de>
    88ba:	001e      	movs	r6, r3
    88bc:	e6f1      	b.n	86a2 <__aeabi_dsub+0x1ce>
    88be:	0010      	movs	r0, r2
    88c0:	3d1f      	subs	r5, #31
    88c2:	40e8      	lsrs	r0, r5
    88c4:	2b20      	cmp	r3, #32
    88c6:	d003      	beq.n	88d0 <__aeabi_dsub+0x3fc>
    88c8:	2140      	movs	r1, #64	; 0x40
    88ca:	1acb      	subs	r3, r1, r3
    88cc:	409a      	lsls	r2, r3
    88ce:	4316      	orrs	r6, r2
    88d0:	1e73      	subs	r3, r6, #1
    88d2:	419e      	sbcs	r6, r3
    88d4:	2207      	movs	r2, #7
    88d6:	4306      	orrs	r6, r0
    88d8:	4032      	ands	r2, r6
    88da:	2100      	movs	r1, #0
    88dc:	2500      	movs	r5, #0
    88de:	e783      	b.n	87e8 <__aeabi_dsub+0x314>
    88e0:	1a16      	subs	r6, r2, r0
    88e2:	4663      	mov	r3, ip
    88e4:	42b2      	cmp	r2, r6
    88e6:	4180      	sbcs	r0, r0
    88e8:	1a59      	subs	r1, r3, r1
    88ea:	4240      	negs	r0, r0
    88ec:	1a0b      	subs	r3, r1, r0
    88ee:	4698      	mov	r8, r3
    88f0:	465c      	mov	r4, fp
    88f2:	e632      	b.n	855a <__aeabi_dsub+0x86>
    88f4:	2e1f      	cmp	r6, #31
    88f6:	dd00      	ble.n	88fa <__aeabi_dsub+0x426>
    88f8:	e0ab      	b.n	8a52 <__aeabi_dsub+0x57e>
    88fa:	2720      	movs	r7, #32
    88fc:	1bbb      	subs	r3, r7, r6
    88fe:	469a      	mov	sl, r3
    8900:	4663      	mov	r3, ip
    8902:	4657      	mov	r7, sl
    8904:	40bb      	lsls	r3, r7
    8906:	4699      	mov	r9, r3
    8908:	0013      	movs	r3, r2
    890a:	464f      	mov	r7, r9
    890c:	40f3      	lsrs	r3, r6
    890e:	431f      	orrs	r7, r3
    8910:	003b      	movs	r3, r7
    8912:	4657      	mov	r7, sl
    8914:	40ba      	lsls	r2, r7
    8916:	1e57      	subs	r7, r2, #1
    8918:	41ba      	sbcs	r2, r7
    891a:	4313      	orrs	r3, r2
    891c:	4662      	mov	r2, ip
    891e:	40f2      	lsrs	r2, r6
    8920:	1889      	adds	r1, r1, r2
    8922:	e698      	b.n	8656 <__aeabi_dsub+0x182>
    8924:	2720      	movs	r7, #32
    8926:	1bbb      	subs	r3, r7, r6
    8928:	469a      	mov	sl, r3
    892a:	4663      	mov	r3, ip
    892c:	4657      	mov	r7, sl
    892e:	40bb      	lsls	r3, r7
    8930:	4699      	mov	r9, r3
    8932:	0013      	movs	r3, r2
    8934:	464f      	mov	r7, r9
    8936:	40f3      	lsrs	r3, r6
    8938:	431f      	orrs	r7, r3
    893a:	003b      	movs	r3, r7
    893c:	4657      	mov	r7, sl
    893e:	40ba      	lsls	r2, r7
    8940:	1e57      	subs	r7, r2, #1
    8942:	41ba      	sbcs	r2, r7
    8944:	4313      	orrs	r3, r2
    8946:	4662      	mov	r2, ip
    8948:	40f2      	lsrs	r2, r6
    894a:	1a89      	subs	r1, r1, r2
    894c:	e79c      	b.n	8888 <__aeabi_dsub+0x3b4>
    894e:	4b83      	ldr	r3, [pc, #524]	; (8b5c <__aeabi_dsub+0x688>)
    8950:	429f      	cmp	r7, r3
    8952:	d05f      	beq.n	8a14 <__aeabi_dsub+0x540>
    8954:	2580      	movs	r5, #128	; 0x80
    8956:	042d      	lsls	r5, r5, #16
    8958:	4273      	negs	r3, r6
    895a:	4329      	orrs	r1, r5
    895c:	e720      	b.n	87a0 <__aeabi_dsub+0x2cc>
    895e:	2e00      	cmp	r6, #0
    8960:	d10c      	bne.n	897c <__aeabi_dsub+0x4a8>
    8962:	2f00      	cmp	r7, #0
    8964:	d100      	bne.n	8968 <__aeabi_dsub+0x494>
    8966:	e0d0      	b.n	8b0a <__aeabi_dsub+0x636>
    8968:	465c      	mov	r4, fp
    896a:	4661      	mov	r1, ip
    896c:	4691      	mov	r9, r2
    896e:	4d7b      	ldr	r5, [pc, #492]	; (8b5c <__aeabi_dsub+0x688>)
    8970:	e6cd      	b.n	870e <__aeabi_dsub+0x23a>
    8972:	4f7a      	ldr	r7, [pc, #488]	; (8b5c <__aeabi_dsub+0x688>)
    8974:	42be      	cmp	r6, r7
    8976:	d01c      	beq.n	89b2 <__aeabi_dsub+0x4de>
    8978:	001e      	movs	r6, r3
    897a:	e665      	b.n	8648 <__aeabi_dsub+0x174>
    897c:	2f00      	cmp	r7, #0
    897e:	d018      	beq.n	89b2 <__aeabi_dsub+0x4de>
    8980:	08c0      	lsrs	r0, r0, #3
    8982:	074e      	lsls	r6, r1, #29
    8984:	4306      	orrs	r6, r0
    8986:	2080      	movs	r0, #128	; 0x80
    8988:	08c9      	lsrs	r1, r1, #3
    898a:	0300      	lsls	r0, r0, #12
    898c:	4201      	tst	r1, r0
    898e:	d008      	beq.n	89a2 <__aeabi_dsub+0x4ce>
    8990:	4663      	mov	r3, ip
    8992:	08dc      	lsrs	r4, r3, #3
    8994:	4204      	tst	r4, r0
    8996:	d104      	bne.n	89a2 <__aeabi_dsub+0x4ce>
    8998:	0021      	movs	r1, r4
    899a:	46da      	mov	sl, fp
    899c:	08d2      	lsrs	r2, r2, #3
    899e:	075e      	lsls	r6, r3, #29
    89a0:	4316      	orrs	r6, r2
    89a2:	00f3      	lsls	r3, r6, #3
    89a4:	4699      	mov	r9, r3
    89a6:	2401      	movs	r4, #1
    89a8:	4653      	mov	r3, sl
    89aa:	00c9      	lsls	r1, r1, #3
    89ac:	0f72      	lsrs	r2, r6, #29
    89ae:	4311      	orrs	r1, r2
    89b0:	401c      	ands	r4, r3
    89b2:	4d6a      	ldr	r5, [pc, #424]	; (8b5c <__aeabi_dsub+0x688>)
    89b4:	e6ab      	b.n	870e <__aeabi_dsub+0x23a>
    89b6:	001d      	movs	r5, r3
    89b8:	2200      	movs	r2, #0
    89ba:	2700      	movs	r7, #0
    89bc:	e6b4      	b.n	8728 <__aeabi_dsub+0x254>
    89be:	2d00      	cmp	r5, #0
    89c0:	d159      	bne.n	8a76 <__aeabi_dsub+0x5a2>
    89c2:	000b      	movs	r3, r1
    89c4:	4303      	orrs	r3, r0
    89c6:	d100      	bne.n	89ca <__aeabi_dsub+0x4f6>
    89c8:	e6d6      	b.n	8778 <__aeabi_dsub+0x2a4>
    89ca:	1c73      	adds	r3, r6, #1
    89cc:	d100      	bne.n	89d0 <__aeabi_dsub+0x4fc>
    89ce:	e0b2      	b.n	8b36 <__aeabi_dsub+0x662>
    89d0:	4b62      	ldr	r3, [pc, #392]	; (8b5c <__aeabi_dsub+0x688>)
    89d2:	429f      	cmp	r7, r3
    89d4:	d01e      	beq.n	8a14 <__aeabi_dsub+0x540>
    89d6:	43f3      	mvns	r3, r6
    89d8:	2b38      	cmp	r3, #56	; 0x38
    89da:	dc6f      	bgt.n	8abc <__aeabi_dsub+0x5e8>
    89dc:	2b1f      	cmp	r3, #31
    89de:	dd00      	ble.n	89e2 <__aeabi_dsub+0x50e>
    89e0:	e097      	b.n	8b12 <__aeabi_dsub+0x63e>
    89e2:	2520      	movs	r5, #32
    89e4:	000e      	movs	r6, r1
    89e6:	1aed      	subs	r5, r5, r3
    89e8:	40ae      	lsls	r6, r5
    89ea:	46b0      	mov	r8, r6
    89ec:	0006      	movs	r6, r0
    89ee:	46aa      	mov	sl, r5
    89f0:	40de      	lsrs	r6, r3
    89f2:	4645      	mov	r5, r8
    89f4:	4335      	orrs	r5, r6
    89f6:	002e      	movs	r6, r5
    89f8:	4655      	mov	r5, sl
    89fa:	40a8      	lsls	r0, r5
    89fc:	40d9      	lsrs	r1, r3
    89fe:	1e45      	subs	r5, r0, #1
    8a00:	41a8      	sbcs	r0, r5
    8a02:	448c      	add	ip, r1
    8a04:	4306      	orrs	r6, r0
    8a06:	18b6      	adds	r6, r6, r2
    8a08:	4296      	cmp	r6, r2
    8a0a:	4192      	sbcs	r2, r2
    8a0c:	4251      	negs	r1, r2
    8a0e:	4461      	add	r1, ip
    8a10:	003d      	movs	r5, r7
    8a12:	e625      	b.n	8660 <__aeabi_dsub+0x18c>
    8a14:	003d      	movs	r5, r7
    8a16:	4661      	mov	r1, ip
    8a18:	4691      	mov	r9, r2
    8a1a:	e678      	b.n	870e <__aeabi_dsub+0x23a>
    8a1c:	000b      	movs	r3, r1
    8a1e:	4303      	orrs	r3, r0
    8a20:	2d00      	cmp	r5, #0
    8a22:	d000      	beq.n	8a26 <__aeabi_dsub+0x552>
    8a24:	e655      	b.n	86d2 <__aeabi_dsub+0x1fe>
    8a26:	2b00      	cmp	r3, #0
    8a28:	d0f5      	beq.n	8a16 <__aeabi_dsub+0x542>
    8a2a:	4663      	mov	r3, ip
    8a2c:	4313      	orrs	r3, r2
    8a2e:	d100      	bne.n	8a32 <__aeabi_dsub+0x55e>
    8a30:	e66d      	b.n	870e <__aeabi_dsub+0x23a>
    8a32:	1886      	adds	r6, r0, r2
    8a34:	4286      	cmp	r6, r0
    8a36:	4180      	sbcs	r0, r0
    8a38:	4461      	add	r1, ip
    8a3a:	4240      	negs	r0, r0
    8a3c:	1809      	adds	r1, r1, r0
    8a3e:	2200      	movs	r2, #0
    8a40:	020b      	lsls	r3, r1, #8
    8a42:	d400      	bmi.n	8a46 <__aeabi_dsub+0x572>
    8a44:	e6d0      	b.n	87e8 <__aeabi_dsub+0x314>
    8a46:	4b46      	ldr	r3, [pc, #280]	; (8b60 <__aeabi_dsub+0x68c>)
    8a48:	3501      	adds	r5, #1
    8a4a:	4019      	ands	r1, r3
    8a4c:	e5b2      	b.n	85b4 <__aeabi_dsub+0xe0>
    8a4e:	46b1      	mov	r9, r6
    8a50:	e65d      	b.n	870e <__aeabi_dsub+0x23a>
    8a52:	0033      	movs	r3, r6
    8a54:	4667      	mov	r7, ip
    8a56:	3b20      	subs	r3, #32
    8a58:	40df      	lsrs	r7, r3
    8a5a:	003b      	movs	r3, r7
    8a5c:	2e20      	cmp	r6, #32
    8a5e:	d005      	beq.n	8a6c <__aeabi_dsub+0x598>
    8a60:	2740      	movs	r7, #64	; 0x40
    8a62:	1bbf      	subs	r7, r7, r6
    8a64:	4666      	mov	r6, ip
    8a66:	40be      	lsls	r6, r7
    8a68:	4332      	orrs	r2, r6
    8a6a:	4690      	mov	r8, r2
    8a6c:	4646      	mov	r6, r8
    8a6e:	1e72      	subs	r2, r6, #1
    8a70:	4196      	sbcs	r6, r2
    8a72:	4333      	orrs	r3, r6
    8a74:	e5ef      	b.n	8656 <__aeabi_dsub+0x182>
    8a76:	4b39      	ldr	r3, [pc, #228]	; (8b5c <__aeabi_dsub+0x688>)
    8a78:	429f      	cmp	r7, r3
    8a7a:	d0cb      	beq.n	8a14 <__aeabi_dsub+0x540>
    8a7c:	2580      	movs	r5, #128	; 0x80
    8a7e:	042d      	lsls	r5, r5, #16
    8a80:	4273      	negs	r3, r6
    8a82:	4329      	orrs	r1, r5
    8a84:	e7a8      	b.n	89d8 <__aeabi_dsub+0x504>
    8a86:	4308      	orrs	r0, r1
    8a88:	1e41      	subs	r1, r0, #1
    8a8a:	4188      	sbcs	r0, r1
    8a8c:	e6a2      	b.n	87d4 <__aeabi_dsub+0x300>
    8a8e:	2f00      	cmp	r7, #0
    8a90:	d100      	bne.n	8a94 <__aeabi_dsub+0x5c0>
    8a92:	e63c      	b.n	870e <__aeabi_dsub+0x23a>
    8a94:	4663      	mov	r3, ip
    8a96:	1a86      	subs	r6, r0, r2
    8a98:	1acf      	subs	r7, r1, r3
    8a9a:	42b0      	cmp	r0, r6
    8a9c:	419b      	sbcs	r3, r3
    8a9e:	425b      	negs	r3, r3
    8aa0:	1afb      	subs	r3, r7, r3
    8aa2:	4698      	mov	r8, r3
    8aa4:	021b      	lsls	r3, r3, #8
    8aa6:	d54e      	bpl.n	8b46 <__aeabi_dsub+0x672>
    8aa8:	1a16      	subs	r6, r2, r0
    8aaa:	4663      	mov	r3, ip
    8aac:	42b2      	cmp	r2, r6
    8aae:	4192      	sbcs	r2, r2
    8ab0:	1a59      	subs	r1, r3, r1
    8ab2:	4252      	negs	r2, r2
    8ab4:	1a89      	subs	r1, r1, r2
    8ab6:	465c      	mov	r4, fp
    8ab8:	2200      	movs	r2, #0
    8aba:	e57b      	b.n	85b4 <__aeabi_dsub+0xe0>
    8abc:	4301      	orrs	r1, r0
    8abe:	000e      	movs	r6, r1
    8ac0:	1e71      	subs	r1, r6, #1
    8ac2:	418e      	sbcs	r6, r1
    8ac4:	e79f      	b.n	8a06 <__aeabi_dsub+0x532>
    8ac6:	001d      	movs	r5, r3
    8ac8:	000e      	movs	r6, r1
    8aca:	3d20      	subs	r5, #32
    8acc:	40ee      	lsrs	r6, r5
    8ace:	46b0      	mov	r8, r6
    8ad0:	2b20      	cmp	r3, #32
    8ad2:	d004      	beq.n	8ade <__aeabi_dsub+0x60a>
    8ad4:	2540      	movs	r5, #64	; 0x40
    8ad6:	1aeb      	subs	r3, r5, r3
    8ad8:	4099      	lsls	r1, r3
    8ada:	4308      	orrs	r0, r1
    8adc:	4681      	mov	r9, r0
    8ade:	4648      	mov	r0, r9
    8ae0:	4643      	mov	r3, r8
    8ae2:	1e41      	subs	r1, r0, #1
    8ae4:	4188      	sbcs	r0, r1
    8ae6:	4318      	orrs	r0, r3
    8ae8:	e674      	b.n	87d4 <__aeabi_dsub+0x300>
    8aea:	2200      	movs	r2, #0
    8aec:	2400      	movs	r4, #0
    8aee:	e617      	b.n	8720 <__aeabi_dsub+0x24c>
    8af0:	1a16      	subs	r6, r2, r0
    8af2:	4663      	mov	r3, ip
    8af4:	42b2      	cmp	r2, r6
    8af6:	4192      	sbcs	r2, r2
    8af8:	1a59      	subs	r1, r3, r1
    8afa:	4252      	negs	r2, r2
    8afc:	1a89      	subs	r1, r1, r2
    8afe:	003d      	movs	r5, r7
    8b00:	e525      	b.n	854e <__aeabi_dsub+0x7a>
    8b02:	4661      	mov	r1, ip
    8b04:	4691      	mov	r9, r2
    8b06:	4d15      	ldr	r5, [pc, #84]	; (8b5c <__aeabi_dsub+0x688>)
    8b08:	e601      	b.n	870e <__aeabi_dsub+0x23a>
    8b0a:	2280      	movs	r2, #128	; 0x80
    8b0c:	2400      	movs	r4, #0
    8b0e:	0312      	lsls	r2, r2, #12
    8b10:	e679      	b.n	8806 <__aeabi_dsub+0x332>
    8b12:	001d      	movs	r5, r3
    8b14:	000e      	movs	r6, r1
    8b16:	3d20      	subs	r5, #32
    8b18:	40ee      	lsrs	r6, r5
    8b1a:	46b0      	mov	r8, r6
    8b1c:	2b20      	cmp	r3, #32
    8b1e:	d004      	beq.n	8b2a <__aeabi_dsub+0x656>
    8b20:	2540      	movs	r5, #64	; 0x40
    8b22:	1aeb      	subs	r3, r5, r3
    8b24:	4099      	lsls	r1, r3
    8b26:	4308      	orrs	r0, r1
    8b28:	4681      	mov	r9, r0
    8b2a:	464e      	mov	r6, r9
    8b2c:	4643      	mov	r3, r8
    8b2e:	1e71      	subs	r1, r6, #1
    8b30:	418e      	sbcs	r6, r1
    8b32:	431e      	orrs	r6, r3
    8b34:	e767      	b.n	8a06 <__aeabi_dsub+0x532>
    8b36:	1886      	adds	r6, r0, r2
    8b38:	4296      	cmp	r6, r2
    8b3a:	419b      	sbcs	r3, r3
    8b3c:	4461      	add	r1, ip
    8b3e:	425b      	negs	r3, r3
    8b40:	18c9      	adds	r1, r1, r3
    8b42:	003d      	movs	r5, r7
    8b44:	e58c      	b.n	8660 <__aeabi_dsub+0x18c>
    8b46:	4647      	mov	r7, r8
    8b48:	4337      	orrs	r7, r6
    8b4a:	d0ce      	beq.n	8aea <__aeabi_dsub+0x616>
    8b4c:	2207      	movs	r2, #7
    8b4e:	4641      	mov	r1, r8
    8b50:	4032      	ands	r2, r6
    8b52:	e649      	b.n	87e8 <__aeabi_dsub+0x314>
    8b54:	2700      	movs	r7, #0
    8b56:	003a      	movs	r2, r7
    8b58:	e5e6      	b.n	8728 <__aeabi_dsub+0x254>
    8b5a:	46c0      	nop			; (mov r8, r8)
    8b5c:	000007ff 	.word	0x000007ff
    8b60:	ff7fffff 	.word	0xff7fffff

00008b64 <__aeabi_d2iz>:
__aeabi_d2iz():
    8b64:	b530      	push	{r4, r5, lr}
    8b66:	4d14      	ldr	r5, [pc, #80]	; (8bb8 <__aeabi_d2iz+0x54>)
    8b68:	030a      	lsls	r2, r1, #12
    8b6a:	004b      	lsls	r3, r1, #1
    8b6c:	0b12      	lsrs	r2, r2, #12
    8b6e:	0d5b      	lsrs	r3, r3, #21
    8b70:	0fc9      	lsrs	r1, r1, #31
    8b72:	2400      	movs	r4, #0
    8b74:	42ab      	cmp	r3, r5
    8b76:	dd11      	ble.n	8b9c <__aeabi_d2iz+0x38>
    8b78:	4c10      	ldr	r4, [pc, #64]	; (8bbc <__aeabi_d2iz+0x58>)
    8b7a:	42a3      	cmp	r3, r4
    8b7c:	dc10      	bgt.n	8ba0 <__aeabi_d2iz+0x3c>
    8b7e:	2480      	movs	r4, #128	; 0x80
    8b80:	0364      	lsls	r4, r4, #13
    8b82:	4322      	orrs	r2, r4
    8b84:	4c0e      	ldr	r4, [pc, #56]	; (8bc0 <__aeabi_d2iz+0x5c>)
    8b86:	1ae4      	subs	r4, r4, r3
    8b88:	2c1f      	cmp	r4, #31
    8b8a:	dd0c      	ble.n	8ba6 <__aeabi_d2iz+0x42>
    8b8c:	480d      	ldr	r0, [pc, #52]	; (8bc4 <__aeabi_d2iz+0x60>)
    8b8e:	1ac3      	subs	r3, r0, r3
    8b90:	40da      	lsrs	r2, r3
    8b92:	0013      	movs	r3, r2
    8b94:	425c      	negs	r4, r3
    8b96:	2900      	cmp	r1, #0
    8b98:	d100      	bne.n	8b9c <__aeabi_d2iz+0x38>
    8b9a:	001c      	movs	r4, r3
    8b9c:	0020      	movs	r0, r4
    8b9e:	bd30      	pop	{r4, r5, pc}
    8ba0:	4b09      	ldr	r3, [pc, #36]	; (8bc8 <__aeabi_d2iz+0x64>)
    8ba2:	18cc      	adds	r4, r1, r3
    8ba4:	e7fa      	b.n	8b9c <__aeabi_d2iz+0x38>
    8ba6:	4d09      	ldr	r5, [pc, #36]	; (8bcc <__aeabi_d2iz+0x68>)
    8ba8:	40e0      	lsrs	r0, r4
    8baa:	46ac      	mov	ip, r5
    8bac:	4463      	add	r3, ip
    8bae:	409a      	lsls	r2, r3
    8bb0:	0013      	movs	r3, r2
    8bb2:	4303      	orrs	r3, r0
    8bb4:	e7ee      	b.n	8b94 <__aeabi_d2iz+0x30>
    8bb6:	46c0      	nop			; (mov r8, r8)
    8bb8:	000003fe 	.word	0x000003fe
    8bbc:	0000041d 	.word	0x0000041d
    8bc0:	00000433 	.word	0x00000433
    8bc4:	00000413 	.word	0x00000413
    8bc8:	7fffffff 	.word	0x7fffffff
    8bcc:	fffffbed 	.word	0xfffffbed

00008bd0 <__aeabi_ui2d>:
__aeabi_ui2d():
    8bd0:	b510      	push	{r4, lr}
    8bd2:	1e04      	subs	r4, r0, #0
    8bd4:	d025      	beq.n	8c22 <__aeabi_ui2d+0x52>
    8bd6:	f000 f82d 	bl	8c34 <__clzsi2>
    8bda:	4b14      	ldr	r3, [pc, #80]	; (8c2c <__aeabi_ui2d+0x5c>)
    8bdc:	1a1b      	subs	r3, r3, r0
    8bde:	055b      	lsls	r3, r3, #21
    8be0:	0d5b      	lsrs	r3, r3, #21
    8be2:	280a      	cmp	r0, #10
    8be4:	dd12      	ble.n	8c0c <__aeabi_ui2d+0x3c>
    8be6:	380b      	subs	r0, #11
    8be8:	4084      	lsls	r4, r0
    8bea:	2200      	movs	r2, #0
    8bec:	0324      	lsls	r4, r4, #12
    8bee:	0b24      	lsrs	r4, r4, #12
    8bf0:	2100      	movs	r1, #0
    8bf2:	0010      	movs	r0, r2
    8bf4:	0324      	lsls	r4, r4, #12
    8bf6:	0d0a      	lsrs	r2, r1, #20
    8bf8:	0b24      	lsrs	r4, r4, #12
    8bfa:	0512      	lsls	r2, r2, #20
    8bfc:	4322      	orrs	r2, r4
    8bfe:	4c0c      	ldr	r4, [pc, #48]	; (8c30 <__aeabi_ui2d+0x60>)
    8c00:	051b      	lsls	r3, r3, #20
    8c02:	4022      	ands	r2, r4
    8c04:	4313      	orrs	r3, r2
    8c06:	005b      	lsls	r3, r3, #1
    8c08:	0859      	lsrs	r1, r3, #1
    8c0a:	bd10      	pop	{r4, pc}
    8c0c:	0002      	movs	r2, r0
    8c0e:	0021      	movs	r1, r4
    8c10:	3215      	adds	r2, #21
    8c12:	4091      	lsls	r1, r2
    8c14:	000a      	movs	r2, r1
    8c16:	210b      	movs	r1, #11
    8c18:	1a08      	subs	r0, r1, r0
    8c1a:	40c4      	lsrs	r4, r0
    8c1c:	0324      	lsls	r4, r4, #12
    8c1e:	0b24      	lsrs	r4, r4, #12
    8c20:	e7e6      	b.n	8bf0 <__aeabi_ui2d+0x20>
    8c22:	2300      	movs	r3, #0
    8c24:	2400      	movs	r4, #0
    8c26:	2200      	movs	r2, #0
    8c28:	e7e2      	b.n	8bf0 <__aeabi_ui2d+0x20>
    8c2a:	46c0      	nop			; (mov r8, r8)
    8c2c:	0000041e 	.word	0x0000041e
    8c30:	800fffff 	.word	0x800fffff

00008c34 <__clzsi2>:
__clzsi2():
    8c34:	211c      	movs	r1, #28
    8c36:	2301      	movs	r3, #1
    8c38:	041b      	lsls	r3, r3, #16
    8c3a:	4298      	cmp	r0, r3
    8c3c:	d301      	bcc.n	8c42 <__clzsi2+0xe>
    8c3e:	0c00      	lsrs	r0, r0, #16
    8c40:	3910      	subs	r1, #16
    8c42:	0a1b      	lsrs	r3, r3, #8
    8c44:	4298      	cmp	r0, r3
    8c46:	d301      	bcc.n	8c4c <__clzsi2+0x18>
    8c48:	0a00      	lsrs	r0, r0, #8
    8c4a:	3908      	subs	r1, #8
    8c4c:	091b      	lsrs	r3, r3, #4
    8c4e:	4298      	cmp	r0, r3
    8c50:	d301      	bcc.n	8c56 <__clzsi2+0x22>
    8c52:	0900      	lsrs	r0, r0, #4
    8c54:	3904      	subs	r1, #4
    8c56:	a202      	add	r2, pc, #8	; (adr r2, 8c60 <__clzsi2+0x2c>)
    8c58:	5c10      	ldrb	r0, [r2, r0]
    8c5a:	1840      	adds	r0, r0, r1
    8c5c:	4770      	bx	lr
    8c5e:	46c0      	nop			; (mov r8, r8)
    8c60:	02020304 	.word	0x02020304
    8c64:	01010101 	.word	0x01010101
	...

00008c70 <__clzdi2>:
__clzdi2():
    8c70:	b510      	push	{r4, lr}
    8c72:	2900      	cmp	r1, #0
    8c74:	d103      	bne.n	8c7e <__clzdi2+0xe>
    8c76:	f7ff ffdd 	bl	8c34 <__clzsi2>
    8c7a:	3020      	adds	r0, #32
    8c7c:	e002      	b.n	8c84 <__clzdi2+0x14>
    8c7e:	1c08      	adds	r0, r1, #0
    8c80:	f7ff ffd8 	bl	8c34 <__clzsi2>
    8c84:	bd10      	pop	{r4, pc}
    8c86:	46c0      	nop			; (mov r8, r8)

00008c88 <strlen>:
strlen():
    8c88:	2300      	movs	r3, #0
    8c8a:	5cc2      	ldrb	r2, [r0, r3]
    8c8c:	3301      	adds	r3, #1
    8c8e:	2a00      	cmp	r2, #0
    8c90:	d1fb      	bne.n	8c8a <strlen+0x2>
    8c92:	1e58      	subs	r0, r3, #1
    8c94:	4770      	bx	lr
	...

00008c98 <__aeabi_lmul>:
__muldi3():
    8c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c9a:	46ce      	mov	lr, r9
    8c9c:	4647      	mov	r7, r8
    8c9e:	0415      	lsls	r5, r2, #16
    8ca0:	0c2d      	lsrs	r5, r5, #16
    8ca2:	002e      	movs	r6, r5
    8ca4:	b580      	push	{r7, lr}
    8ca6:	0407      	lsls	r7, r0, #16
    8ca8:	0c14      	lsrs	r4, r2, #16
    8caa:	0c3f      	lsrs	r7, r7, #16
    8cac:	4699      	mov	r9, r3
    8cae:	0c03      	lsrs	r3, r0, #16
    8cb0:	437e      	muls	r6, r7
    8cb2:	435d      	muls	r5, r3
    8cb4:	4367      	muls	r7, r4
    8cb6:	4363      	muls	r3, r4
    8cb8:	197f      	adds	r7, r7, r5
    8cba:	0c34      	lsrs	r4, r6, #16
    8cbc:	19e4      	adds	r4, r4, r7
    8cbe:	469c      	mov	ip, r3
    8cc0:	42a5      	cmp	r5, r4
    8cc2:	d903      	bls.n	8ccc <__aeabi_lmul+0x34>
    8cc4:	2380      	movs	r3, #128	; 0x80
    8cc6:	025b      	lsls	r3, r3, #9
    8cc8:	4698      	mov	r8, r3
    8cca:	44c4      	add	ip, r8
    8ccc:	464b      	mov	r3, r9
    8cce:	4343      	muls	r3, r0
    8cd0:	4351      	muls	r1, r2
    8cd2:	0c25      	lsrs	r5, r4, #16
    8cd4:	0436      	lsls	r6, r6, #16
    8cd6:	4465      	add	r5, ip
    8cd8:	0c36      	lsrs	r6, r6, #16
    8cda:	0424      	lsls	r4, r4, #16
    8cdc:	19a4      	adds	r4, r4, r6
    8cde:	195b      	adds	r3, r3, r5
    8ce0:	1859      	adds	r1, r3, r1
    8ce2:	0020      	movs	r0, r4
    8ce4:	bc0c      	pop	{r2, r3}
    8ce6:	4690      	mov	r8, r2
    8ce8:	4699      	mov	r9, r3
    8cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008cec <lptmr_init>:
lptmr_init():
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:146
//参数说明：time_ms 定时器中断的时间间隔，单位为毫秒，时间设置范围 0~65535ms
//功能概要：LPTMR模块初始化，时钟源已配置为1KHz的LPO时钟
//其他以此类推
//============================================================================
void lptmr_init(uint32_t time_ms)
{
    8cec:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:148
    uint16_t compare_value;
    SIM_SCGC5 |= SIM_SCGC5_LPTMR_MASK;//使能LPTMR模块时钟
    8cee:	4b0b      	ldr	r3, [pc, #44]	; (8d1c <lptmr_init+0x30>)
    8cf0:	4a0b      	ldr	r2, [pc, #44]	; (8d20 <lptmr_init+0x34>)
    8cf2:	5899      	ldr	r1, [r3, r2]
    8cf4:	2401      	movs	r4, #1
    8cf6:	4321      	orrs	r1, r4
    8cf8:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:149
    SIM_SOPT1 |= SIM_SOPT1_OSC32KSEL(0x11);//选择LPO时钟
    8cfa:	681a      	ldr	r2, [r3, #0]
    8cfc:	2180      	movs	r1, #128	; 0x80
    8cfe:	02c9      	lsls	r1, r1, #11
    8d00:	4311      	orrs	r1, r2
    8d02:	6019      	str	r1, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:150
    LPTMR0_PSR |= LPTMR_PSR_PCS(1)|LPTMR_PSR_PBYP_MASK;
    8d04:	4b07      	ldr	r3, [pc, #28]	; (8d24 <lptmr_init+0x38>)
    8d06:	6859      	ldr	r1, [r3, #4]
    8d08:	2205      	movs	r2, #5
    8d0a:	4311      	orrs	r1, r2
    8d0c:	6059      	str	r1, [r3, #4]
    8d0e:	0400      	lsls	r0, r0, #16
    8d10:	0c00      	lsrs	r0, r0, #16
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:152
    compare_value=time_ms;
    LPTMR0_CMR = LPTMR_CMR_COMPARE(compare_value);      //设置比较寄存器值
    8d12:	6098      	str	r0, [r3, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:153
    LPTMR0_CSR |= LPTMR_CSR_TEN_MASK; //开启LPTMR模块设置
    8d14:	681a      	ldr	r2, [r3, #0]
    8d16:	4322      	orrs	r2, r4
    8d18:	601a      	str	r2, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:154
}
    8d1a:	bd10      	pop	{r4, pc}
    8d1c:	40047000 	.word	0x40047000
    8d20:	00001038 	.word	0x00001038
    8d24:	40040000 	.word	0x40040000

00008d28 <lptmr_enable_int>:
lptmr_enable_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:177
//参数说明：无
//功能概要：LPTMR模块使能，开启LPTMR模块中断及定时器中断
//============================================================================
void lptmr_enable_int(void)
{
    LPTMR0_CSR|=LPTMR_CSR_TIE_MASK;        //开启LPTMR定时器中断
    8d28:	4a04      	ldr	r2, [pc, #16]	; (8d3c <lptmr_enable_int+0x14>)
    8d2a:	6813      	ldr	r3, [r2, #0]
    8d2c:	2140      	movs	r1, #64	; 0x40
    8d2e:	430b      	orrs	r3, r1
    8d30:	6013      	str	r3, [r2, #0]
NVIC_EnableIRQ():
D:\app_for_qianrushi\exam\29\02_CPU/core_cm0plus.h:685

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    8d32:	4b03      	ldr	r3, [pc, #12]	; (8d40 <lptmr_enable_int+0x18>)
    8d34:	2280      	movs	r2, #128	; 0x80
    8d36:	0552      	lsls	r2, r2, #21
    8d38:	601a      	str	r2, [r3, #0]
lptmr_enable_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:179
    NVIC_EnableIRQ(LPTMR0_IRQn);           //开引脚的IRQ中断
}
    8d3a:	4770      	bx	lr
    8d3c:	40040000 	.word	0x40040000
    8d40:	e000e100 	.word	0xe000e100

00008d44 <tpm_timer_init>:
tpm_timer_init():
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:202
//        f：计数器频率，单位：Khz，取值：375、750、1500、3000、6000、12000、24000、48000
//        MOD_Value：计数器计数间隔时间，单位：ms，(f*MOD_Value-1)的范围为0~65535
//函数返回： 无
//===================================================================
void tpm_timer_init(uint16_t TPM_i,uint32_t f,float MOD_Value)
{
    8d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d46:	0007      	movs	r7, r0
    8d48:	000d      	movs	r5, r1
    8d4a:	1c16      	adds	r6, r2, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:207
    //局部变量声明
    uint32_t clk_f,clk_div;
    uint16_t mod;
    //1. 开启SIM时钟门
    BSET(SIM_SCGC6_TPM0_SHIFT+TPM_i,SIM_SCGC6);
    8d4c:	4b28      	ldr	r3, [pc, #160]	; (8df0 <tpm_timer_init+0xac>)
    8d4e:	4829      	ldr	r0, [pc, #164]	; (8df4 <tpm_timer_init+0xb0>)
    8d50:	581a      	ldr	r2, [r3, r0]
    8d52:	003c      	movs	r4, r7
    8d54:	3418      	adds	r4, #24
    8d56:	2101      	movs	r1, #1
    8d58:	40a1      	lsls	r1, r4
    8d5a:	430a      	orrs	r2, r1
    8d5c:	501a      	str	r2, [r3, r0]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:208
    TPM_ARR[TPM_i]->SC = 0;   //关闭该模块的计数器功能，确保未重复开启
    8d5e:	00b9      	lsls	r1, r7, #2
    8d60:	4a25      	ldr	r2, [pc, #148]	; (8df8 <tpm_timer_init+0xb4>)
    8d62:	588a      	ldr	r2, [r1, r2]
    8d64:	2100      	movs	r1, #0
    8d66:	6011      	str	r1, [r2, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:210
    //2.开启时钟，默认选择用PLL/2时钟源，即48MHz
    SIM_SOPT2 |= SIM_SOPT2_TPMSRC(1);
    8d68:	4a24      	ldr	r2, [pc, #144]	; (8dfc <tpm_timer_init+0xb8>)
    8d6a:	5898      	ldr	r0, [r3, r2]
    8d6c:	2180      	movs	r1, #128	; 0x80
    8d6e:	0449      	lsls	r1, r1, #17
    8d70:	4301      	orrs	r1, r0
    8d72:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:211
    SIM_SOPT2 &= ~SIM_SOPT2_PLLFLLSEL_MASK;
    8d74:	5899      	ldr	r1, [r3, r2]
    8d76:	4822      	ldr	r0, [pc, #136]	; (8e00 <tpm_timer_init+0xbc>)
    8d78:	4001      	ands	r1, r0
    8d7a:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:214
    //3. 由期望的时钟频率f，计算分频因子clk_div。因分频系数clk_f=48000/f,
    //则分频因子clk_div=sqrt(clk_f)。例如：f=3000Khz,则clk_f=16，clk_div=4
    clk_f=48000/f;
    8d7c:	0029      	movs	r1, r5
    8d7e:	4821      	ldr	r0, [pc, #132]	; (8e04 <tpm_timer_init+0xc0>)
    8d80:	f7fd ff92 	bl	6ca8 <__udivsi3>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:215
    clk_div = 0;
    8d84:	2400      	movs	r4, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:216
    while(clk_f>1)
    8d86:	e001      	b.n	8d8c <tpm_timer_init+0x48>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:218
    {
        clk_div++;
    8d88:	3401      	adds	r4, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:219
        clk_f=clk_f/2;
    8d8a:	0840      	lsrs	r0, r0, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:216
    while(clk_f>1)
    8d8c:	2801      	cmp	r0, #1
    8d8e:	d8fb      	bhi.n	8d88 <tpm_timer_init+0x44>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:222
    }
    //4. 计数器清零
    TPM_ARR[TPM_i]->CNT = 0;
    8d90:	00bb      	lsls	r3, r7, #2
    8d92:	4a19      	ldr	r2, [pc, #100]	; (8df8 <tpm_timer_init+0xb4>)
    8d94:	589b      	ldr	r3, [r3, r2]
    8d96:	2200      	movs	r2, #0
    8d98:	605a      	str	r2, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:224
    //5. 设置模数寄存器
    if(f * MOD_Value > 65535)
    8d9a:	0028      	movs	r0, r5
    8d9c:	f7fe ffe0 	bl	7d60 <__aeabi_ui2f>
    8da0:	1c31      	adds	r1, r6, #0
    8da2:	f7fe fc7d 	bl	76a0 <__aeabi_fmul>
    8da6:	1c05      	adds	r5, r0, #0
    8da8:	4917      	ldr	r1, [pc, #92]	; (8e08 <tpm_timer_init+0xc4>)
    8daa:	f7fe f957 	bl	705c <__aeabi_fcmpgt>
    8dae:	2800      	cmp	r0, #0
    8db0:	d10e      	bne.n	8dd0 <tpm_timer_init+0x8c>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:228
    {
        mod = 65535;
    }
    else if(f * MOD_Value <= 0)
    8db2:	2100      	movs	r1, #0
    8db4:	1c28      	adds	r0, r5, #0
    8db6:	f7fe f947 	bl	7048 <__aeabi_fcmple>
    8dba:	2800      	cmp	r0, #0
    8dbc:	d116      	bne.n	8dec <tpm_timer_init+0xa8>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:233
    {
        mod = 0 ;
    }
    else{
        mod = f * MOD_Value - 1;
    8dbe:	21fe      	movs	r1, #254	; 0xfe
    8dc0:	0589      	lsls	r1, r1, #22
    8dc2:	1c28      	adds	r0, r5, #0
    8dc4:	f7fe fd9e 	bl	7904 <__aeabi_fsub>
    8dc8:	f7fe f97c 	bl	70c4 <__aeabi_f2uiz>
    8dcc:	b280      	uxth	r0, r0
    8dce:	e000      	b.n	8dd2 <tpm_timer_init+0x8e>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:226
        mod = 65535;
    8dd0:	480e      	ldr	r0, [pc, #56]	; (8e0c <tpm_timer_init+0xc8>)
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:235
    }
    TPM_ARR[TPM_i]->MOD = mod;  //给模数寄存器赋值
    8dd2:	4b09      	ldr	r3, [pc, #36]	; (8df8 <tpm_timer_init+0xb4>)
    8dd4:	00bf      	lsls	r7, r7, #2
    8dd6:	58fa      	ldr	r2, [r7, r3]
    8dd8:	6090      	str	r0, [r2, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:237
    //6. 写TPM_i的状态和控制寄存器
    TPM_ARR[TPM_i]->SC |= TPM_SC_CMOD(1) | TPM_SC_PS(clk_div) | TPM_SC_TOIE_MASK;
    8dda:	58f9      	ldr	r1, [r7, r3]
    8ddc:	680b      	ldr	r3, [r1, #0]
    8dde:	2207      	movs	r2, #7
    8de0:	4014      	ands	r4, r2
    8de2:	431c      	orrs	r4, r3
    8de4:	2348      	movs	r3, #72	; 0x48
    8de6:	431c      	orrs	r4, r3
    8de8:	600c      	str	r4, [r1, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:238
}
    8dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:230
        mod = 0 ;
    8dec:	2000      	movs	r0, #0
    8dee:	e7f0      	b.n	8dd2 <tpm_timer_init+0x8e>
    8df0:	40047000 	.word	0x40047000
    8df4:	0000103c 	.word	0x0000103c
    8df8:	20000400 	.word	0x20000400
    8dfc:	00001004 	.word	0x00001004
    8e00:	fffeffff 	.word	0xfffeffff
    8e04:	0000bb80 	.word	0x0000bb80
    8e08:	477fff00 	.word	0x477fff00
    8e0c:	0000ffff 	.word	0x0000ffff

00008e10 <timer_init>:
timer_init():
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:36
{
    8e10:	b510      	push	{r4, lr}
    8e12:	1e04      	subs	r4, r0, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:37
    if(timer_No==0)
    8e14:	d004      	beq.n	8e20 <timer_init+0x10>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:41
    else if(timer_No==1||timer_No==2)
    8e16:	1e43      	subs	r3, r0, #1
    8e18:	b2db      	uxtb	r3, r3
    8e1a:	2b01      	cmp	r3, #1
    8e1c:	d904      	bls.n	8e28 <timer_init+0x18>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:47
}
    8e1e:	bd10      	pop	{r4, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:39
        lptmr_init(time_ms);
    8e20:	0008      	movs	r0, r1
    8e22:	f7ff ff63 	bl	8cec <lptmr_init>
    8e26:	e7fa      	b.n	8e1e <timer_init+0xe>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:43
        tpm_timer_init(timer_No,3000,time_ms);
    8e28:	0008      	movs	r0, r1
    8e2a:	f7fe ff99 	bl	7d60 <__aeabi_ui2f>
    8e2e:	1c02      	adds	r2, r0, #0
    8e30:	b2a0      	uxth	r0, r4
    8e32:	4902      	ldr	r1, [pc, #8]	; (8e3c <timer_init+0x2c>)
    8e34:	f7ff ff86 	bl	8d44 <tpm_timer_init>
    8e38:	e7f1      	b.n	8e1e <timer_init+0xe>
    8e3a:	46c0      	nop			; (mov r8, r8)
    8e3c:	00000bb8 	.word	0x00000bb8

00008e40 <tpm_enable_int>:
tpm_enable_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:248
//参数说明：TPM_i：模块号，可用参数可参见gec.h文件
//函数返回：无
//===================================================================
void tpm_enable_int(uint8_t TPM_i)
{
    if(TPM_i>2)  TPM_i = 2;
    8e40:	2802      	cmp	r0, #2
    8e42:	d900      	bls.n	8e46 <tpm_enable_int+0x6>
    8e44:	2002      	movs	r0, #2
NVIC_EnableIRQ():
D:\app_for_qianrushi\exam\29\02_CPU/core_cm0plus.h:685
    8e46:	4b04      	ldr	r3, [pc, #16]	; (8e58 <tpm_enable_int+0x18>)
    8e48:	5c1b      	ldrb	r3, [r3, r0]
    8e4a:	221f      	movs	r2, #31
    8e4c:	401a      	ands	r2, r3
    8e4e:	2301      	movs	r3, #1
    8e50:	4093      	lsls	r3, r2
    8e52:	4a02      	ldr	r2, [pc, #8]	; (8e5c <tpm_enable_int+0x1c>)
    8e54:	6013      	str	r3, [r2, #0]
tpm_enable_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:251
    //开TPM中断
    NVIC_EnableIRQ(TPM_IRQ[TPM_i]);
}
    8e56:	4770      	bx	lr
    8e58:	2000040c 	.word	0x2000040c
    8e5c:	e000e100 	.word	0xe000e100

00008e60 <timer_enable_int>:
timer_enable_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:57
{
    8e60:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:59
    if(timer_No==0)
    8e62:	2800      	cmp	r0, #0
    8e64:	d004      	beq.n	8e70 <timer_enable_int+0x10>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:63
    else if(timer_No==1||timer_No==2)
    8e66:	1e43      	subs	r3, r0, #1
    8e68:	b2db      	uxtb	r3, r3
    8e6a:	2b01      	cmp	r3, #1
    8e6c:	d903      	bls.n	8e76 <timer_enable_int+0x16>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:69
}
    8e6e:	bd10      	pop	{r4, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:61
        lptmr_enable_int();
    8e70:	f7ff ff5a 	bl	8d28 <lptmr_enable_int>
    8e74:	e7fb      	b.n	8e6e <timer_enable_int+0xe>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:65
        tpm_enable_int(timer_No);
    8e76:	f7ff ffe3 	bl	8e40 <tpm_enable_int>
    8e7a:	e7f8      	b.n	8e6e <timer_enable_int+0xe>

00008e7c <tpm_get_int>:
tpm_get_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:275
//函数返回：中断标志 1=有对应模块中断产生;0=无对应模块中断产生
//===================================================================
uint8_t tpm_get_int(uint8_t TPM_i)
{
  //获取TPM_i模块中断标志位
  if(((TPM_SC_REG(TPM_ARR[TPM_i]) & TPM_SC_TOF_MASK)==TPM_SC_TOF_MASK))
    8e7c:	0080      	lsls	r0, r0, #2
    8e7e:	4b04      	ldr	r3, [pc, #16]	; (8e90 <tpm_get_int+0x14>)
    8e80:	58c3      	ldr	r3, [r0, r3]
    8e82:	681b      	ldr	r3, [r3, #0]
    8e84:	061b      	lsls	r3, r3, #24
    8e86:	d401      	bmi.n	8e8c <tpm_get_int+0x10>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:278
    return 1;
  else
    return 0;
    8e88:	2000      	movs	r0, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:279
}
    8e8a:	4770      	bx	lr
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:276
    return 1;
    8e8c:	2001      	movs	r0, #1
    8e8e:	e7fc      	b.n	8e8a <tpm_get_int+0xe>
    8e90:	20000400 	.word	0x20000400

00008e94 <timer_get_int>:
timer_get_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:99
{
    8e94:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:101
    if(timer_No==0)
    8e96:	2800      	cmp	r0, #0
    8e98:	d105      	bne.n	8ea6 <timer_get_int+0x12>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:104
      if((LPTMR0_CSR & LPTMR_CSR_TCF_MASK)==LPTMR_CSR_TCF_MASK)
    8e9a:	4b07      	ldr	r3, [pc, #28]	; (8eb8 <timer_get_int+0x24>)
    8e9c:	681b      	ldr	r3, [r3, #0]
    8e9e:	061b      	lsls	r3, r3, #24
    8ea0:	d506      	bpl.n	8eb0 <timer_get_int+0x1c>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:105
          return 1;
    8ea2:	3001      	adds	r0, #1
    8ea4:	e004      	b.n	8eb0 <timer_get_int+0x1c>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:109
    else if(timer_No==1||timer_No==2)
    8ea6:	1e43      	subs	r3, r0, #1
    8ea8:	b2db      	uxtb	r3, r3
    8eaa:	2b01      	cmp	r3, #1
    8eac:	d901      	bls.n	8eb2 <timer_get_int+0x1e>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:114
        return 0;
    8eae:	2000      	movs	r0, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:115
}
    8eb0:	bd10      	pop	{r4, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:111
        return tpm_get_int(timer_No);
    8eb2:	f7ff ffe3 	bl	8e7c <tpm_get_int>
    8eb6:	e7fb      	b.n	8eb0 <timer_get_int+0x1c>
    8eb8:	40040000 	.word	0x40040000

00008ebc <tpm_clear_int>:
tpm_clear_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:290
//函数返回：清除TPM模块中断标志位
//===================================================================
void tpm_clear_int(uint8_t TPM_i)
{
    //清除TPM_i模块中断标志位
    BSET(TPM_SC_TOF_SHIFT,TPM_SC_REG(TPM_ARR[TPM_i]));
    8ebc:	0080      	lsls	r0, r0, #2
    8ebe:	4b03      	ldr	r3, [pc, #12]	; (8ecc <tpm_clear_int+0x10>)
    8ec0:	58c2      	ldr	r2, [r0, r3]
    8ec2:	6813      	ldr	r3, [r2, #0]
    8ec4:	2180      	movs	r1, #128	; 0x80
    8ec6:	430b      	orrs	r3, r1
    8ec8:	6013      	str	r3, [r2, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:291
}
    8eca:	4770      	bx	lr
    8ecc:	20000400 	.word	0x20000400

00008ed0 <timer_clear_int>:
timer_clear_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:124
{
    8ed0:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:125
    if(timer_No==0)
    8ed2:	2800      	cmp	r0, #0
    8ed4:	d006      	beq.n	8ee4 <timer_clear_int+0x14>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:129
    else if(timer_No==1||timer_No==2)
    8ed6:	1e43      	subs	r3, r0, #1
    8ed8:	b2db      	uxtb	r3, r3
    8eda:	2b01      	cmp	r3, #1
    8edc:	d807      	bhi.n	8eee <timer_clear_int+0x1e>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:131
        tpm_clear_int(timer_No);
    8ede:	f7ff ffed 	bl	8ebc <tpm_clear_int>
    8ee2:	e004      	b.n	8eee <timer_clear_int+0x1e>
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:127
        CLEAR_LPTMR_FLAG;
    8ee4:	4a02      	ldr	r2, [pc, #8]	; (8ef0 <timer_clear_int+0x20>)
    8ee6:	6813      	ldr	r3, [r2, #0]
    8ee8:	2180      	movs	r1, #128	; 0x80
    8eea:	430b      	orrs	r3, r1
    8eec:	6013      	str	r3, [r2, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/timer.c:135
}
    8eee:	bd10      	pop	{r4, pc}
    8ef0:	40040000 	.word	0x40040000

00008ef4 <SystemInit>:
SystemInit():
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:112
    //看门狗默认为开启，而且复位之后只能开启或关闭看门狗一次
    //SIM_COPC &= ~SIM_COPC_COPT_MASK;    //DISABLE_WDOG 

    /* System clock initialization */
    /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
    SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescalers to safe value */
    8ef4:	4b26      	ldr	r3, [pc, #152]	; (8f90 <SystemInit+0x9c>)
    8ef6:	4a27      	ldr	r2, [pc, #156]	; (8f94 <SystemInit+0xa0>)
    8ef8:	21c0      	movs	r1, #192	; 0xc0
    8efa:	0289      	lsls	r1, r1, #10
    8efc:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:114
    /* SIM_SCGC5: PORTA=1 */
    SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
    8efe:	4926      	ldr	r1, [pc, #152]	; (8f98 <SystemInit+0xa4>)
    8f00:	5858      	ldr	r0, [r3, r1]
    8f02:	2280      	movs	r2, #128	; 0x80
    8f04:	0092      	lsls	r2, r2, #2
    8f06:	4302      	orrs	r2, r0
    8f08:	505a      	str	r2, [r3, r1]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:115
    if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
    8f0a:	4b24      	ldr	r3, [pc, #144]	; (8f9c <SystemInit+0xa8>)
    8f0c:	789b      	ldrb	r3, [r3, #2]
    8f0e:	071b      	lsls	r3, r3, #28
    8f10:	d504      	bpl.n	8f1c <SystemInit+0x28>
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:117
        /* PMC_REGSC: ACKISO=1 */
        PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
    8f12:	4a22      	ldr	r2, [pc, #136]	; (8f9c <SystemInit+0xa8>)
    8f14:	7893      	ldrb	r3, [r2, #2]
    8f16:	2108      	movs	r1, #8
    8f18:	430b      	orrs	r3, r1
    8f1a:	7093      	strb	r3, [r2, #2]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:120
    }
    /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
    SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescalers */
    8f1c:	4b1c      	ldr	r3, [pc, #112]	; (8f90 <SystemInit+0x9c>)
    8f1e:	4a1d      	ldr	r2, [pc, #116]	; (8f94 <SystemInit+0xa0>)
    8f20:	2180      	movs	r1, #128	; 0x80
    8f22:	0249      	lsls	r1, r1, #9
    8f24:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:122
    /* SIM_SOPT2: ??=0,PLLFLLSEL=0 */
    SIM_SOPT2 &= (uint32_t)~(uint32_t)((SIM_SOPT2_PLLFLLSEL_MASK | 0x00020000U)); /* Select FLL as a clock source for various peripherals */
    8f26:	4a1e      	ldr	r2, [pc, #120]	; (8fa0 <SystemInit+0xac>)
    8f28:	5899      	ldr	r1, [r3, r2]
    8f2a:	481e      	ldr	r0, [pc, #120]	; (8fa4 <SystemInit+0xb0>)
    8f2c:	4001      	ands	r1, r0
    8f2e:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:124
    /* SIM_SOPT1: OSC32KSEL=0 */
    SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz clock for various peripherals */
    8f30:	6819      	ldr	r1, [r3, #0]
    8f32:	481d      	ldr	r0, [pc, #116]	; (8fa8 <SystemInit+0xb4>)
    8f34:	4001      	ands	r1, r0
    8f36:	6019      	str	r1, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:126
    /* SIM_SOPT2: TPMSRC=1 */
    SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
    8f38:	5899      	ldr	r1, [r3, r2]
    8f3a:	481c      	ldr	r0, [pc, #112]	; (8fac <SystemInit+0xb8>)
    8f3c:	4008      	ands	r0, r1
    8f3e:	2180      	movs	r1, #128	; 0x80
    8f40:	0449      	lsls	r1, r1, #17
    8f42:	4301      	orrs	r1, r0
    8f44:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:133
    )) | (uint32_t)(
            SIM_SOPT2_TPMSRC(0x01)
    ));                      /* Set the TPM clock */
    /* Switch to FEI Mode */
    /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
    MCG_C1 = MCG_C1_CLKS(0x00) |
    8f46:	4b1a      	ldr	r3, [pc, #104]	; (8fb0 <SystemInit+0xbc>)
    8f48:	2206      	movs	r2, #6
    8f4a:	701a      	strb	r2, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:138
            MCG_C1_FRDIV(0x00) |
            MCG_C1_IREFS_MASK |
            MCG_C1_IRCLKEN_MASK;
    /* MCG_C2: LOCRE0=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
    MCG_C2 &= (uint8_t)~(uint8_t)(
    8f4c:	785a      	ldrb	r2, [r3, #1]
    8f4e:	2140      	movs	r1, #64	; 0x40
    8f50:	400a      	ands	r2, r1
    8f52:	705a      	strb	r2, [r3, #1]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:147
            MCG_C2_EREFS0_MASK |
            MCG_C2_LP_MASK |
            MCG_C2_IRCS_MASK
    );
    /* MCG_C4: DMX32=1,DRST_DRS=1 */
    MCG_C4 = (uint8_t)((MCG_C4 & (uint8_t)~(uint8_t)(
    8f54:	78d9      	ldrb	r1, [r3, #3]
    8f56:	b249      	sxtb	r1, r1
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:149
            MCG_C4_DRST_DRS(0x02)
    )) | (uint8_t)(
    8f58:	221f      	movs	r2, #31
    8f5a:	4011      	ands	r1, r2
    8f5c:	3a7f      	subs	r2, #127	; 0x7f
    8f5e:	430a      	orrs	r2, r1
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:147
    MCG_C4 = (uint8_t)((MCG_C4 & (uint8_t)~(uint8_t)(
    8f60:	b2d2      	uxtb	r2, r2
    8f62:	70da      	strb	r2, [r3, #3]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:154
            MCG_C4_DMX32_MASK |
            MCG_C4_DRST_DRS(0x01)
    ));
    /* OSC0_CR: ERCLKEN=0,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
    OSC0_CR = 0x00U;
    8f64:	2200      	movs	r2, #0
    8f66:	4913      	ldr	r1, [pc, #76]	; (8fb4 <SystemInit+0xc0>)
    8f68:	700a      	strb	r2, [r1, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:156
    /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
    MCG_C5 = MCG_C5_PRDIV0(0x00);
    8f6a:	711a      	strb	r2, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:158
    /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
    MCG_C6 = MCG_C6_VDIV0(0x00);
    8f6c:	715a      	strb	r2, [r3, #5]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:159 (discriminator 1)
    while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
    8f6e:	4b10      	ldr	r3, [pc, #64]	; (8fb0 <SystemInit+0xbc>)
    8f70:	799b      	ldrb	r3, [r3, #6]
    8f72:	06db      	lsls	r3, r3, #27
    8f74:	d5fb      	bpl.n	8f6e <SystemInit+0x7a>
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:161 (discriminator 1)
    }
    while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
    8f76:	4b0e      	ldr	r3, [pc, #56]	; (8fb0 <SystemInit+0xbc>)
    8f78:	799a      	ldrb	r2, [r3, #6]
    8f7a:	230c      	movs	r3, #12
    8f7c:	421a      	tst	r2, r3
    8f7e:	d1fa      	bne.n	8f76 <SystemInit+0x82>
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:234
    //        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break;
    //    }
    //    //4.现在处于PEE模式

    //开启PORT模块时钟
    SIM->SCGC5 |= SIM_SCGC5_PORTA_MASK
    8f80:	4903      	ldr	r1, [pc, #12]	; (8f90 <SystemInit+0x9c>)
    8f82:	4a05      	ldr	r2, [pc, #20]	; (8f98 <SystemInit+0xa4>)
    8f84:	5888      	ldr	r0, [r1, r2]
    8f86:	23f8      	movs	r3, #248	; 0xf8
    8f88:	019b      	lsls	r3, r3, #6
    8f8a:	4303      	orrs	r3, r0
    8f8c:	508b      	str	r3, [r1, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/system_MKL36Z4.c:239
            | SIM_SCGC5_PORTB_MASK
            | SIM_SCGC5_PORTC_MASK
            | SIM_SCGC5_PORTD_MASK
            | SIM_SCGC5_PORTE_MASK;
}
    8f8e:	4770      	bx	lr
    8f90:	40047000 	.word	0x40047000
    8f94:	00001044 	.word	0x00001044
    8f98:	00001038 	.word	0x00001038
    8f9c:	4007d000 	.word	0x4007d000
    8fa0:	00001004 	.word	0x00001004
    8fa4:	fffcffff 	.word	0xfffcffff
    8fa8:	fff3ffff 	.word	0xfff3ffff
    8fac:	fcffffff 	.word	0xfcffffff
    8fb0:	40064000 	.word	0x40064000
    8fb4:	40065000 	.word	0x40065000

00008fb8 <main>:
main():
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:19
//main.c使用的内部函数声明处

//----------------------------------------------------------------------
//主函数，一般情况下可以认为程序从此开始运行（实际上有启动过程见书稿）
int main(void)
{
    8fb8:	b510      	push	{r4, lr}
    8fba:	b082      	sub	sp, #8
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:25
    //（1）======启动部分（开头）==========================================
    //（1.1）声明main函数使用的局部变量
    uint8_t  mFlag;           //主循环使用的临时变量
    uint8_t  mSec;	         //记当前秒的值
    //（1.2）【不变】关总中断
    DISABLE_INTERRUPTS;
    8fbc:	b672      	cpsid	i
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:26
    wdog_stop();
    8fbe:	f000 f919 	bl	91f4 <wdog_stop>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:27
    srand( (unsigned)time( NULL ) );  
    8fc2:	2000      	movs	r0, #0
    8fc4:	f001 fafc 	bl	a5c0 <time>
    8fc8:	f001 faa4 	bl	a514 <srand>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:33
    //（1.3）给主函数使用的局部变量赋初值
    mFlag='A';              //主循环使用的临时变量：蓝灯状态标志

    //（1.4）给全局变量赋初值
   	//"时分秒"缓存初始化(00:00:00)
   	gTime[0] = 0;       //时
    8fcc:	4b2e      	ldr	r3, [pc, #184]	; (9088 <main+0xd0>)
    8fce:	2400      	movs	r4, #0
    8fd0:	701c      	strb	r4, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:34
   	gTime[1] = 0;	  	//分
    8fd2:	705c      	strb	r4, [r3, #1]
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:35
   	gTime[2] = 0;	  	//秒
    8fd4:	709c      	strb	r4, [r3, #2]
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:40
   	mSec = gTime[2];	//记住当前秒的值
    //（1.5）用户外设模块初始化
 //   gpio_init(LIGHT_RED,GPIO_OUTPUT,LIGHT_ON);    //初始化蓝灯
    
    uart_init(UART_User, 9600);
    8fd6:	2196      	movs	r1, #150	; 0x96
    8fd8:	0189      	lsls	r1, r1, #6
    8fda:	2000      	movs	r0, #0
    8fdc:	f000 fb54 	bl	9688 <uart_init>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:41
    timer_init(TIMER_USER,20);   //设置TIMER_USER为20ms中断
    8fe0:	2114      	movs	r1, #20
    8fe2:	2001      	movs	r0, #1
    8fe4:	f7ff ff14 	bl	8e10 <timer_init>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:43

    pwm_init(PWM_USER,1500,600,90,PWM_EDGE,PWM_PLUS );   //PWM输出初始化
    8fe8:	2296      	movs	r2, #150	; 0x96
    8fea:	9401      	str	r4, [sp, #4]
    8fec:	9400      	str	r4, [sp, #0]
    8fee:	4b27      	ldr	r3, [pc, #156]	; (908c <main+0xd4>)
    8ff0:	0092      	lsls	r2, r2, #2
    8ff2:	4927      	ldr	r1, [pc, #156]	; (9090 <main+0xd8>)
    8ff4:	4827      	ldr	r0, [pc, #156]	; (9094 <main+0xdc>)
    8ff6:	f000 f9a5 	bl	9344 <pwm_init>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:45
 //   pwm_init(LIGHT_RED,1500,600,90,PWM_EDGE,PWM_PLUS );
    incapture_init(INCAP_USER,48000,37500,CAP_DOUBLE);     //上升沿捕捉初始化
    8ffa:	4c27      	ldr	r4, [pc, #156]	; (9098 <main+0xe0>)
    8ffc:	2302      	movs	r3, #2
    8ffe:	4a27      	ldr	r2, [pc, #156]	; (909c <main+0xe4>)
    9000:	4927      	ldr	r1, [pc, #156]	; (90a0 <main+0xe8>)
    9002:	0020      	movs	r0, r4
    9004:	f001 f99e 	bl	a344 <incapture_init>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:49

  
    //（1.6）使能模块中断
    uart_enable_re_int(UART_User);
    9008:	2000      	movs	r0, #0
    900a:	f000 fc69 	bl	98e0 <uart_enable_re_int>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:50
    timer_enable_int(TIMER_USER);
    900e:	2001      	movs	r0, #1
    9010:	f7ff ff26 	bl	8e60 <timer_enable_int>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:51
    cap_enable_int(INCAP_USER);    //使能输入捕捉中断
    9014:	0020      	movs	r0, r4
    9016:	f001 fa53 	bl	a4c0 <cap_enable_int>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:53
    //（1.7）【不变】开总中断
    ENABLE_INTERRUPTS;
    901a:	b662      	cpsie	i
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:55

    printf("------------------------------------------------------\n");
    901c:	4c21      	ldr	r4, [pc, #132]	; (90a4 <main+0xec>)
    901e:	0020      	movs	r0, r4
    9020:	f001 f8f0 	bl	a204 <myprintf>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:56
    printf("金葫芦提示：PWM-INCAP实例 \n");
    9024:	4820      	ldr	r0, [pc, #128]	; (90a8 <main+0xf0>)
    9026:	f001 f8ed 	bl	a204 <myprintf>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:57
    printf("  ① 蓝灯闪烁\n");
    902a:	4820      	ldr	r0, [pc, #128]	; (90ac <main+0xf4>)
    902c:	f001 f8ea 	bl	a204 <myprintf>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:58
   	printf("  ② 通过INCAP_USER输出4KHz的PWM信号，占空比为50%。 \n");
    9030:	481f      	ldr	r0, [pc, #124]	; (90b0 <main+0xf8>)
    9032:	f001 f8e7 	bl	a204 <myprintf>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:59
   	printf("  ③ 设置INCAP_USER为输入捕捉，采用双边沿捕捉， \n");
    9036:	481f      	ldr	r0, [pc, #124]	; (90b4 <main+0xfc>)
    9038:	f001 f8e4 	bl	a204 <myprintf>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:60
   	printf("  ④ 每次触发输入捕捉，都会向上位机输出当前捕捉到的通道值”。 \n");
    903c:	481e      	ldr	r0, [pc, #120]	; (90b8 <main+0x100>)
    903e:	f001 f8e1 	bl	a204 <myprintf>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:61
    printf("------------------------------------------------------\n");
    9042:	0020      	movs	r0, r4
    9044:	f001 f8de 	bl	a204 <myprintf>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:63

    uint32_t cnt=0;
    9048:	2300      	movs	r3, #0
    904a:	e000      	b.n	904e <main+0x96>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:67 (discriminator 2)
    uint32_t val;
    for(;;)     //for(;;)（开头）
    {
    	while(cnt<=123456)cnt++;
    904c:	3301      	adds	r3, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:67 (discriminator 1)
    904e:	4a1b      	ldr	r2, [pc, #108]	; (90bc <main+0x104>)
    9050:	4293      	cmp	r3, r2
    9052:	d9fb      	bls.n	904c <main+0x94>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:69
    	cnt=0;
    	val=rand()%65535+1;
    9054:	f001 fa82 	bl	a55c <rand>
    9058:	4919      	ldr	r1, [pc, #100]	; (90c0 <main+0x108>)
    905a:	f7fd ff95 	bl	6f88 <__aeabi_idivmod>
    905e:	1c4c      	adds	r4, r1, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:70
    	printf("%d\n",val);
    9060:	0021      	movs	r1, r4
    9062:	4818      	ldr	r0, [pc, #96]	; (90c4 <main+0x10c>)
    9064:	f001 f8ce 	bl	a204 <myprintf>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:71
    	pwm_init(PWM_USER,1500,1.0*val,90,PWM_EDGE,PWM_PLUS );
    9068:	b2a2      	uxth	r2, r4
    906a:	4c0a      	ldr	r4, [pc, #40]	; (9094 <main+0xdc>)
    906c:	2300      	movs	r3, #0
    906e:	9301      	str	r3, [sp, #4]
    9070:	9300      	str	r3, [sp, #0]
    9072:	4b06      	ldr	r3, [pc, #24]	; (908c <main+0xd4>)
    9074:	4906      	ldr	r1, [pc, #24]	; (9090 <main+0xd8>)
    9076:	0020      	movs	r0, r4
    9078:	f000 f964 	bl	9344 <pwm_init>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:72
   		pwm_update(PWM_USER , 100);
    907c:	4912      	ldr	r1, [pc, #72]	; (90c8 <main+0x110>)
    907e:	0020      	movs	r0, r4
    9080:	f000 fa88 	bl	9594 <pwm_update>
D:\app_for_qianrushi\exam\29\Debug/srcc/main.c:68
    	cnt=0;
    9084:	2300      	movs	r3, #0
    9086:	e7e1      	b.n	904c <main+0x94>
    9088:	200004b4 	.word	0x200004b4
    908c:	42b40000 	.word	0x42b40000
    9090:	000005dc 	.word	0x000005dc
    9094:	00000201 	.word	0x00000201
    9098:	00000202 	.word	0x00000202
    909c:	0000927c 	.word	0x0000927c
    90a0:	0000bb80 	.word	0x0000bb80
    90a4:	0000a83c 	.word	0x0000a83c
    90a8:	0000a874 	.word	0x0000a874
    90ac:	0000a890 	.word	0x0000a890
    90b0:	0000a8a0 	.word	0x0000a8a0
    90b4:	0000a8d8 	.word	0x0000a8d8
    90b8:	0000a90c 	.word	0x0000a90c
    90bc:	0001e240 	.word	0x0001e240
    90c0:	0000ffff 	.word	0x0000ffff
    90c4:	0000a94c 	.word	0x0000a94c
    90c8:	42c80000 	.word	0x42c80000

000090cc <flash_read_physical>:
flash_read_physical():
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:203
//       addr：目标地址，要求为4的倍数（例如：0x00000004）
//       N：读字节数目（0~1020,要求为4，8,12,......）
//功能概要：读取flash指定地址的内容
//======================================================================
void flash_read_physical(uint8_t *dest,uint32_t addr,uint16_t N)
{
    90cc:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:206
	uint8_t *src;
	src=(uint8_t *)addr;
	memcpy(dest,src,N);
    90ce:	f001 fa0f 	bl	a4f0 <memcpy>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:207
}
    90d2:	bd10      	pop	{r4, pc}

000090d4 <flash_isempty>:
flash_isempty():
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:254
{
   uint16_t i,flag;
   uint8_t* buff;
   i = 0;
   flag = 1;
   for(i = 0; i<N; i++)   //遍历区域内字节
    90d4:	2300      	movs	r3, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:254 (discriminator 1)
    90d6:	428b      	cmp	r3, r1
    90d8:	d206      	bcs.n	90e8 <flash_isempty+0x14>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:256
   {
	  buff=(uint8_t*)(sect*0x400);
    90da:	0282      	lsls	r2, r0, #10
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:257
      if(buff[i]!=0xff)   //非空
    90dc:	5cd2      	ldrb	r2, [r2, r3]
    90de:	2aff      	cmp	r2, #255	; 0xff
    90e0:	d105      	bne.n	90ee <flash_isempty+0x1a>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:254 (discriminator 2)
   for(i = 0; i<N; i++)   //遍历区域内字节
    90e2:	3301      	adds	r3, #1
    90e4:	b29b      	uxth	r3, r3
    90e6:	e7f6      	b.n	90d6 <flash_isempty+0x2>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:253
   flag = 1;
    90e8:	2001      	movs	r0, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:263
      {
      	  flag=0;
          break;
       }
   }
   return flag;
    90ea:	b2c0      	uxtb	r0, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:264
}
    90ec:	4770      	bx	lr
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:259
      	  flag=0;
    90ee:	2000      	movs	r0, #0
    90f0:	e7fb      	b.n	90ea <flash_isempty+0x16>
	...

000090f4 <flash_cmd_launch>:
flash_cmd_launch():
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:342
//======================================================================
uint32_t flash_cmd_launch(void)
{
	uint8_t irq_flag=0;
    // 清除访问错误标志位和非法访问标志位
    FTFA_FSTAT = ACCERR | FPVIOL;
    90f4:	4b0f      	ldr	r3, [pc, #60]	; (9134 <flash_cmd_launch+0x40>)
    90f6:	2230      	movs	r2, #48	; 0x30
    90f8:	701a      	strb	r2, [r3, #0]
__get_PRIMASK():
D:\app_for_qianrushi\exam\29\02_CPU/core_cmFunc.h:484
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    90fa:	f3ef 8310 	mrs	r3, PRIMASK
flash_cmd_launch():
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:343
    if(__get_PRIMASK() == 0U)
    90fe:	2b00      	cmp	r3, #0
    9100:	d112      	bne.n	9128 <flash_cmd_launch+0x34>
__disable_irq():
D:\app_for_qianrushi\exam\29\02_CPU/core_cmFunc.h:344
  __ASM volatile ("cpsid i" : : : "memory");
    9102:	b672      	cpsid	i
flash_cmd_launch():
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:346
    {
    	__disable_irq();  //关总中断
    	irq_flag = 1;
    9104:	3a2f      	subs	r2, #47	; 0x2f
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:349
    }
    // 启动命令
    FTFA_FSTAT = CCIF;
    9106:	4b0b      	ldr	r3, [pc, #44]	; (9134 <flash_cmd_launch+0x40>)
    9108:	2180      	movs	r1, #128	; 0x80
    910a:	7019      	strb	r1, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:351 (discriminator 1)
    // 等待命令结束
    while(!(FTFA_FSTAT & CCIF));
    910c:	4b09      	ldr	r3, [pc, #36]	; (9134 <flash_cmd_launch+0x40>)
    910e:	781b      	ldrb	r3, [r3, #0]
    9110:	b25b      	sxtb	r3, r3
    9112:	2b00      	cmp	r3, #0
    9114:	dafa      	bge.n	910c <flash_cmd_launch+0x18>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:352
    if(irq_flag == 1)
    9116:	2a01      	cmp	r2, #1
    9118:	d008      	beq.n	912c <flash_cmd_launch+0x38>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:357
    {
    	__enable_irq();  //开总中断
    }
    // 检查错误标志
    if(FTFA_FSTAT & (ACCERR | FPVIOL | MGSTAT0))
    911a:	4b06      	ldr	r3, [pc, #24]	; (9134 <flash_cmd_launch+0x40>)
    911c:	781a      	ldrb	r2, [r3, #0]
    911e:	2331      	movs	r3, #49	; 0x31
    9120:	421a      	tst	r2, r3
    9122:	d105      	bne.n	9130 <flash_cmd_launch+0x3c>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:359
        return 1 ; //执行命令出错
    return 0; //执行命令成功
    9124:	2000      	movs	r0, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:360
}
    9126:	4770      	bx	lr
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:340
	uint8_t irq_flag=0;
    9128:	2200      	movs	r2, #0
    912a:	e7ec      	b.n	9106 <flash_cmd_launch+0x12>
__enable_irq():
D:\app_for_qianrushi\exam\29\02_CPU/core_cmFunc.h:333
  __ASM volatile ("cpsie i" : : : "memory");
    912c:	b662      	cpsie	i
    912e:	e7f4      	b.n	911a <flash_cmd_launch+0x26>
flash_cmd_launch():
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:358
        return 1 ; //执行命令出错
    9130:	2001      	movs	r0, #1
    9132:	e7f8      	b.n	9126 <flash_cmd_launch+0x32>
    9134:	40020000 	.word	0x40020000

00009138 <flash_erase>:
flash_erase():
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:50
{
    9138:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:57
    dest.word    = (uint32_t)(sect*(1<<10));
    913a:	0284      	lsls	r4, r0, #10
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:60
    FTFA_FCCOB0 = ERSSCR; // 擦除扇区命令
    913c:	4b16      	ldr	r3, [pc, #88]	; (9198 <flash_erase+0x60>)
    913e:	2209      	movs	r2, #9
    9140:	71da      	strb	r2, [r3, #7]
    9142:	0482      	lsls	r2, r0, #18
    9144:	0e12      	lsrs	r2, r2, #24
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:63
    FTFA_FCCOB1 = dest.byte[2];
    9146:	719a      	strb	r2, [r3, #6]
    9148:	0680      	lsls	r0, r0, #26
    914a:	0e00      	lsrs	r0, r0, #24
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:64
    FTFA_FCCOB2 = dest.byte[1];
    914c:	7158      	strb	r0, [r3, #5]
    914e:	b2e2      	uxtb	r2, r4
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:65
    FTFA_FCCOB3 = dest.byte[0];
    9150:	711a      	strb	r2, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:68
    if(1 == flash_cmd_launch())    //若执行命令出现错误
    9152:	f7ff ffcf 	bl	90f4 <flash_cmd_launch>
    9156:	2801      	cmp	r0, #1
    9158:	d01b      	beq.n	9192 <flash_erase+0x5a>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:73
    if(dest.word < 0x400)
    915a:	4b10      	ldr	r3, [pc, #64]	; (919c <flash_erase+0x64>)
    915c:	429c      	cmp	r4, r3
    915e:	d901      	bls.n	9164 <flash_erase+0x2c>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:91
    return 0;  //成功返回
    9160:	2000      	movs	r0, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:92
}
    9162:	bd10      	pop	{r4, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:76
        FTFA_FCCOB0 = PGM4; 
    9164:	4b0c      	ldr	r3, [pc, #48]	; (9198 <flash_erase+0x60>)
    9166:	2206      	movs	r2, #6
    9168:	71da      	strb	r2, [r3, #7]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:78
        FTFA_FCCOB1 = 0x00;
    916a:	2200      	movs	r2, #0
    916c:	719a      	strb	r2, [r3, #6]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:79
        FTFA_FCCOB2 = 0x04;
    916e:	3204      	adds	r2, #4
    9170:	715a      	strb	r2, [r3, #5]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:80
        FTFA_FCCOB3 = 0x0C;
    9172:	3208      	adds	r2, #8
    9174:	711a      	strb	r2, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:82
        FTFA_FCCOB4 = 0xFF;
    9176:	32f3      	adds	r2, #243	; 0xf3
    9178:	72da      	strb	r2, [r3, #11]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:83
        FTFA_FCCOB5 = 0xFF;
    917a:	729a      	strb	r2, [r3, #10]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:84
        FTFA_FCCOB6 = 0xFF;
    917c:	725a      	strb	r2, [r3, #9]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:85
        FTFA_FCCOB7 = 0xFE;
    917e:	3a01      	subs	r2, #1
    9180:	721a      	strb	r2, [r3, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:87
        if(1 == flash_cmd_launch())  //若执行命令出现错误
    9182:	f7ff ffb7 	bl	90f4 <flash_cmd_launch>
    9186:	2801      	cmp	r0, #1
    9188:	d001      	beq.n	918e <flash_erase+0x56>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:91
    return 0;  //成功返回
    918a:	2000      	movs	r0, #0
    918c:	e7e9      	b.n	9162 <flash_erase+0x2a>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:88
            return 2;   //解锁命令错误
    918e:	3001      	adds	r0, #1
    9190:	e7e7      	b.n	9162 <flash_erase+0x2a>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:69
        return 1;     //擦除命令错误
    9192:	2001      	movs	r0, #1
    9194:	e7e5      	b.n	9162 <flash_erase+0x2a>
    9196:	46c0      	nop			; (mov r8, r8)
    9198:	40020000 	.word	0x40020000
    919c:	000003ff 	.word	0x000003ff

000091a0 <flash_write_physical>:
flash_write_physical():
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:147
{
    91a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    91a2:	000f      	movs	r7, r1
    91a4:	0014      	movs	r4, r2
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:156
    FTFA_FCCOB0 = PGM4;
    91a6:	4b12      	ldr	r3, [pc, #72]	; (91f0 <flash_write_physical+0x50>)
    91a8:	2206      	movs	r2, #6
    91aa:	71da      	strb	r2, [r3, #7]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:157
    dest.word = destaddr;
    91ac:	0005      	movs	r5, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:158
    for(size=0; size<N; size+=4, dest.word+=4, buf+=4)
    91ae:	2600      	movs	r6, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:158 (discriminator 1)
    91b0:	42b7      	cmp	r7, r6
    91b2:	d918      	bls.n	91e6 <flash_write_physical+0x46>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:161
        FTFA_FCCOB1 = dest.byte[2];
    91b4:	022a      	lsls	r2, r5, #8
    91b6:	0e12      	lsrs	r2, r2, #24
    91b8:	4b0d      	ldr	r3, [pc, #52]	; (91f0 <flash_write_physical+0x50>)
    91ba:	719a      	strb	r2, [r3, #6]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:162
        FTFA_FCCOB2 = dest.byte[1];
    91bc:	042a      	lsls	r2, r5, #16
    91be:	0e12      	lsrs	r2, r2, #24
    91c0:	715a      	strb	r2, [r3, #5]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:163
        FTFA_FCCOB3 = dest.byte[0];
    91c2:	b2ea      	uxtb	r2, r5
    91c4:	711a      	strb	r2, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:166
        FTFA_FCCOB4 = buf[3];//大端寻址
    91c6:	78e2      	ldrb	r2, [r4, #3]
    91c8:	72da      	strb	r2, [r3, #11]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:167
        FTFA_FCCOB5 = buf[2];
    91ca:	78a2      	ldrb	r2, [r4, #2]
    91cc:	729a      	strb	r2, [r3, #10]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:168
        FTFA_FCCOB6 = buf[1];
    91ce:	7862      	ldrb	r2, [r4, #1]
    91d0:	725a      	strb	r2, [r3, #9]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:169
        FTFA_FCCOB7 = buf[0];
    91d2:	7822      	ldrb	r2, [r4, #0]
    91d4:	721a      	strb	r2, [r3, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:171
        if(1 == flash_cmd_launch())
    91d6:	f7ff ff8d 	bl	90f4 <flash_cmd_launch>
    91da:	2801      	cmp	r0, #1
    91dc:	d005      	beq.n	91ea <flash_write_physical+0x4a>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:158 (discriminator 2)
    for(size=0; size<N; size+=4, dest.word+=4, buf+=4)
    91de:	3604      	adds	r6, #4
    91e0:	3504      	adds	r5, #4
    91e2:	3404      	adds	r4, #4
    91e4:	e7e4      	b.n	91b0 <flash_write_physical+0x10>
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:175
    return 0;  //成功执行
    91e6:	2000      	movs	r0, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:176
}
    91e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/flash.c:172
            return 2;  //写入命令错误
    91ea:	2002      	movs	r0, #2
    91ec:	e7fc      	b.n	91e8 <flash_write_physical+0x48>
    91ee:	46c0      	nop			; (mov r8, r8)
    91f0:	40020000 	.word	0x40020000

000091f4 <wdog_stop>:
wdog_stop():
D:\app_for_qianrushi\exam\29\Debug/srcc/wdog.c:40
//参数说明：无
//函数返回：无
//=========================================================================
void wdog_stop()
{
    SIM_COPC &= ~SIM_COPC_COPT_MASK;
    91f4:	4903      	ldr	r1, [pc, #12]	; (9204 <wdog_stop+0x10>)
    91f6:	2288      	movs	r2, #136	; 0x88
    91f8:	0152      	lsls	r2, r2, #5
    91fa:	588b      	ldr	r3, [r1, r2]
    91fc:	200c      	movs	r0, #12
    91fe:	4383      	bics	r3, r0
    9200:	508b      	str	r3, [r1, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/wdog.c:41
}
    9202:	4770      	bx	lr
    9204:	40047000 	.word	0x40047000

00009208 <tpm_mux_val>:
tpm_mux_val():
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:150
//=====================================================================
static uint8_t tpm_mux_val(uint16_t pwmNo,uint8_t* TPM_i,uint8_t* chl)
{
    uint8_t port,pin;
    //1.解析模块号和通道号
    switch(pwmNo)
    9208:	4b22      	ldr	r3, [pc, #136]	; (9294 <tpm_mux_val+0x8c>)
    920a:	4298      	cmp	r0, r3
    920c:	d027      	beq.n	925e <tpm_mux_val+0x56>
    920e:	d90e      	bls.n	922e <tpm_mux_val+0x26>
    9210:	23c1      	movs	r3, #193	; 0xc1
    9212:	009b      	lsls	r3, r3, #2
    9214:	4298      	cmp	r0, r3
    9216:	d027      	beq.n	9268 <tpm_mux_val+0x60>
    9218:	4b1f      	ldr	r3, [pc, #124]	; (9298 <tpm_mux_val+0x90>)
    921a:	4298      	cmp	r0, r3
    921c:	d029      	beq.n	9272 <tpm_mux_val+0x6a>
    921e:	4b1f      	ldr	r3, [pc, #124]	; (929c <tpm_mux_val+0x94>)
    9220:	4298      	cmp	r0, r3
    9222:	d112      	bne.n	924a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:155
    {
		case ((2<<8)|1):*TPM_i =0;*chl=0;break;
		case ((2<<8)|2):*TPM_i =0;*chl=1;break;
		case ((2<<8)|3):*TPM_i =0;*chl=2;break;
		case ((3<<8)|3):*TPM_i =0;*chl=3;break;
    9224:	2300      	movs	r3, #0
    9226:	700b      	strb	r3, [r1, #0]
    9228:	3303      	adds	r3, #3
    922a:	7013      	strb	r3, [r2, #0]
    922c:	e00d      	b.n	924a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:150
    switch(pwmNo)
    922e:	4b1c      	ldr	r3, [pc, #112]	; (92a0 <tpm_mux_val+0x98>)
    9230:	4298      	cmp	r0, r3
    9232:	d007      	beq.n	9244 <tpm_mux_val+0x3c>
    9234:	4b1b      	ldr	r3, [pc, #108]	; (92a4 <tpm_mux_val+0x9c>)
    9236:	4298      	cmp	r0, r3
    9238:	d107      	bne.n	924a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:153
		case ((2<<8)|2):*TPM_i =0;*chl=1;break;
    923a:	2300      	movs	r3, #0
    923c:	700b      	strb	r3, [r1, #0]
    923e:	3301      	adds	r3, #1
    9240:	7013      	strb	r3, [r2, #0]
    9242:	e002      	b.n	924a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:152
		case ((2<<8)|1):*TPM_i =0;*chl=0;break;
    9244:	2300      	movs	r3, #0
    9246:	700b      	strb	r3, [r1, #0]
    9248:	7013      	strb	r3, [r2, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:161
		case ((3<<8)|4):*TPM_i =0;*chl=4;break;
		case ((3<<8)|5):*TPM_i =0;*chl=5;break;
        default: break;
    }
    //2.解析引脚复用寄存器传入值
    port = (pwmNo>>8);
    924a:	0a03      	lsrs	r3, r0, #8
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:162
    pin = pwmNo;
    924c:	b2c0      	uxtb	r0, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:163
    if(port<2 || port==4 || (port==2 && (pin==8||pin==9) ))
    924e:	2b01      	cmp	r3, #1
    9250:	d91a      	bls.n	9288 <tpm_mux_val+0x80>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:163 (discriminator 1)
    9252:	2b04      	cmp	r3, #4
    9254:	d01a      	beq.n	928c <tpm_mux_val+0x84>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:163 (discriminator 2)
    9256:	2b02      	cmp	r3, #2
    9258:	d010      	beq.n	927c <tpm_mux_val+0x74>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:166
        return 3;
    else
        return 4;
    925a:	2004      	movs	r0, #4
    925c:	e015      	b.n	928a <tpm_mux_val+0x82>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:154
		case ((2<<8)|3):*TPM_i =0;*chl=2;break;
    925e:	2300      	movs	r3, #0
    9260:	700b      	strb	r3, [r1, #0]
    9262:	3302      	adds	r3, #2
    9264:	7013      	strb	r3, [r2, #0]
    9266:	e7f0      	b.n	924a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:156
		case ((3<<8)|4):*TPM_i =0;*chl=4;break;
    9268:	2300      	movs	r3, #0
    926a:	700b      	strb	r3, [r1, #0]
    926c:	3304      	adds	r3, #4
    926e:	7013      	strb	r3, [r2, #0]
    9270:	e7eb      	b.n	924a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:157
		case ((3<<8)|5):*TPM_i =0;*chl=5;break;
    9272:	2300      	movs	r3, #0
    9274:	700b      	strb	r3, [r1, #0]
    9276:	3305      	adds	r3, #5
    9278:	7013      	strb	r3, [r2, #0]
    927a:	e7e6      	b.n	924a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:163 (discriminator 3)
    if(port<2 || port==4 || (port==2 && (pin==8||pin==9) ))
    927c:	3808      	subs	r0, #8
    927e:	b2c0      	uxtb	r0, r0
    9280:	2801      	cmp	r0, #1
    9282:	d905      	bls.n	9290 <tpm_mux_val+0x88>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:166
        return 4;
    9284:	2004      	movs	r0, #4
    9286:	e000      	b.n	928a <tpm_mux_val+0x82>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:164
        return 3;
    9288:	2003      	movs	r0, #3
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:167
}
    928a:	4770      	bx	lr
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:164
        return 3;
    928c:	2003      	movs	r0, #3
    928e:	e7fc      	b.n	928a <tpm_mux_val+0x82>
    9290:	2003      	movs	r0, #3
    9292:	e7fa      	b.n	928a <tpm_mux_val+0x82>
    9294:	00000203 	.word	0x00000203
    9298:	00000305 	.word	0x00000305
    929c:	00000303 	.word	0x00000303
    92a0:	00000201 	.word	0x00000201
    92a4:	00000202 	.word	0x00000202

000092a8 <tpm_timer_init1>:
tpm_timer_init1():
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:178
//          f：单位：Khz，取值：375、750、1500、3000、6000、12000、24000、48000
//          MOD_Value：单位个数：范围取决于计数器频率与计数器位数（16位）
//函数返回：  无
//===================================================================
static void tpm_timer_init1(uint16_t TPM_i,uint32_t f,uint16_t MOD_Value)
{
    92a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92aa:	0004      	movs	r4, r0
    92ac:	0015      	movs	r5, r2
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:182
    //局部变量声明
    uint32_t clk_f,clk_div;
    //（1） 开启SIM时钟门
    BSET(SIM_SCGC6_TPM0_SHIFT+TPM_i,SIM_SCGC6);
    92ae:	4b1f      	ldr	r3, [pc, #124]	; (932c <tpm_timer_init1+0x84>)
    92b0:	4e1f      	ldr	r6, [pc, #124]	; (9330 <tpm_timer_init1+0x88>)
    92b2:	599a      	ldr	r2, [r3, r6]
    92b4:	0007      	movs	r7, r0
    92b6:	3718      	adds	r7, #24
    92b8:	2001      	movs	r0, #1
    92ba:	40b8      	lsls	r0, r7
    92bc:	4302      	orrs	r2, r0
    92be:	519a      	str	r2, [r3, r6]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:184
    //（2）开启时钟，默认选择用PLL/2时钟源，即48MHz
    SIM_SOPT2 |= SIM_SOPT2_TPMSRC(1);
    92c0:	4a1c      	ldr	r2, [pc, #112]	; (9334 <tpm_timer_init1+0x8c>)
    92c2:	589e      	ldr	r6, [r3, r2]
    92c4:	2080      	movs	r0, #128	; 0x80
    92c6:	0440      	lsls	r0, r0, #17
    92c8:	4330      	orrs	r0, r6
    92ca:	5098      	str	r0, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:185
    SIM_SOPT2 &= ~SIM_SOPT2_PLLFLLSEL_MASK;
    92cc:	5898      	ldr	r0, [r3, r2]
    92ce:	4e1a      	ldr	r6, [pc, #104]	; (9338 <tpm_timer_init1+0x90>)
    92d0:	4030      	ands	r0, r6
    92d2:	5098      	str	r0, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:186
    PWM_ARR[TPM_i]->SC = 0;
    92d4:	00a2      	lsls	r2, r4, #2
    92d6:	4b19      	ldr	r3, [pc, #100]	; (933c <tpm_timer_init1+0x94>)
    92d8:	58d3      	ldr	r3, [r2, r3]
    92da:	2200      	movs	r2, #0
    92dc:	601a      	str	r2, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:189
    //（3） 由期望的时钟频率f，计算分频因子clk_div。因分频系数clk_f=48000/f,
    //则分频因子clk_div=sqrt(clk_f)。例如：f=3000Khz,则clk_f=16，clk_div=4
    clk_f=48000/f;
    92de:	4818      	ldr	r0, [pc, #96]	; (9340 <tpm_timer_init1+0x98>)
    92e0:	f7fd fce2 	bl	6ca8 <__udivsi3>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:190
    clk_div = 0;
    92e4:	2300      	movs	r3, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:191
    while(clk_f>1)
    92e6:	e001      	b.n	92ec <tpm_timer_init1+0x44>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:193
    {
        clk_div++;
    92e8:	3301      	adds	r3, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:194
        clk_f=clk_f/2;
    92ea:	0840      	lsrs	r0, r0, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:191
    while(clk_f>1)
    92ec:	2801      	cmp	r0, #1
    92ee:	d8fb      	bhi.n	92e8 <tpm_timer_init1+0x40>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:197
    }
    //（4）计数器清零
    PWM_ARR[TPM_i]->CNT = 0;
    92f0:	00a2      	lsls	r2, r4, #2
    92f2:	4912      	ldr	r1, [pc, #72]	; (933c <tpm_timer_init1+0x94>)
    92f4:	5852      	ldr	r2, [r2, r1]
    92f6:	2100      	movs	r1, #0
    92f8:	6051      	str	r1, [r2, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:199
    //（5）设置模数寄存器
    if(MOD_Value == 0)
    92fa:	2d00      	cmp	r5, #0
    92fc:	d00f      	beq.n	931e <tpm_timer_init1+0x76>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:205
    {
    	PWM_ARR[TPM_i]->MOD = 0;  //给模数寄存器赋值
    }
    else
    {
    	PWM_ARR[TPM_i]->MOD = MOD_Value - 1;  //给模数寄存器赋值
    92fe:	00a2      	lsls	r2, r4, #2
    9300:	490e      	ldr	r1, [pc, #56]	; (933c <tpm_timer_init1+0x94>)
    9302:	5852      	ldr	r2, [r2, r1]
    9304:	3d01      	subs	r5, #1
    9306:	6095      	str	r5, [r2, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:208
    }
    //（6）写TPM_i的状态和控制寄存器
    PWM_ARR[TPM_i]->SC |=  TPM_SC_PS(clk_div) | TPM_SC_TOIE_MASK;
    9308:	00a4      	lsls	r4, r4, #2
    930a:	4a0c      	ldr	r2, [pc, #48]	; (933c <tpm_timer_init1+0x94>)
    930c:	58a0      	ldr	r0, [r4, r2]
    930e:	6802      	ldr	r2, [r0, #0]
    9310:	2107      	movs	r1, #7
    9312:	400b      	ands	r3, r1
    9314:	4313      	orrs	r3, r2
    9316:	2240      	movs	r2, #64	; 0x40
    9318:	4313      	orrs	r3, r2
    931a:	6003      	str	r3, [r0, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:209
}
    931c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:201
    	PWM_ARR[TPM_i]->MOD = 0;  //给模数寄存器赋值
    931e:	00a2      	lsls	r2, r4, #2
    9320:	4906      	ldr	r1, [pc, #24]	; (933c <tpm_timer_init1+0x94>)
    9322:	5852      	ldr	r2, [r2, r1]
    9324:	2100      	movs	r1, #0
    9326:	6091      	str	r1, [r2, #8]
    9328:	e7ee      	b.n	9308 <tpm_timer_init1+0x60>
    932a:	46c0      	nop			; (mov r8, r8)
    932c:	40047000 	.word	0x40047000
    9330:	0000103c 	.word	0x0000103c
    9334:	00001004 	.word	0x00001004
    9338:	fffeffff 	.word	0xfffeffff
    933c:	20000414 	.word	0x20000414
    9340:	0000bb80 	.word	0x0000bb80

00009344 <pwm_init>:
pwm_init():
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:38
{
    9344:	b5f0      	push	{r4, r5, r6, r7, lr}
    9346:	46c6      	mov	lr, r8
    9348:	b500      	push	{lr}
    934a:	b086      	sub	sp, #24
    934c:	0004      	movs	r4, r0
    934e:	9103      	str	r1, [sp, #12]
    9350:	9202      	str	r2, [sp, #8]
    9352:	1c18      	adds	r0, r3, #0
    9354:	9301      	str	r3, [sp, #4]
    9356:	ab0c      	add	r3, sp, #48	; 0x30
    9358:	781f      	ldrb	r7, [r3, #0]
    935a:	ab0d      	add	r3, sp, #52	; 0x34
    935c:	781d      	ldrb	r5, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:45
    if(duty>100.0) duty=100.0;
    935e:	4987      	ldr	r1, [pc, #540]	; (957c <pwm_init+0x238>)
    9360:	f7fd fe7c 	bl	705c <__aeabi_fcmpgt>
    9364:	2800      	cmp	r0, #0
    9366:	d001      	beq.n	936c <pwm_init+0x28>
    9368:	4b84      	ldr	r3, [pc, #528]	; (957c <pwm_init+0x238>)
    936a:	9301      	str	r3, [sp, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:47
    port = (pwmNo>>8);          //解析出的端口
    936c:	0a23      	lsrs	r3, r4, #8
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:48
    pin = pwmNo;                //解析出的引脚号
    936e:	b2e2      	uxtb	r2, r4
    9370:	4690      	mov	r8, r2
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:49
    port_ptr = PORT_ARR[port];  //获得PORT模块相应口基地址
    9372:	009b      	lsls	r3, r3, #2
    9374:	4a82      	ldr	r2, [pc, #520]	; (9580 <pwm_init+0x23c>)
    9376:	589e      	ldr	r6, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:51
    mux_val=tpm_mux_val(pwmNo,&TPM_i,&chl);
    9378:	ab04      	add	r3, sp, #16
    937a:	1d9a      	adds	r2, r3, #6
    937c:	1dd9      	adds	r1, r3, #7
    937e:	0020      	movs	r0, r4
    9380:	f7ff ff42 	bl	9208 <tpm_mux_val>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:53
    PORT_PCR_REG(port_ptr, pin) &= ~PORT_PCR_MUX_MASK;
    9384:	4643      	mov	r3, r8
    9386:	009b      	lsls	r3, r3, #2
    9388:	599a      	ldr	r2, [r3, r6]
    938a:	497e      	ldr	r1, [pc, #504]	; (9584 <pwm_init+0x240>)
    938c:	400a      	ands	r2, r1
    938e:	519a      	str	r2, [r3, r6]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:54
    PORT_PCR_REG(port_ptr, pin) |= PORT_PCR_MUX(mux_val);
    9390:	599a      	ldr	r2, [r3, r6]
    9392:	0200      	lsls	r0, r0, #8
    9394:	21e0      	movs	r1, #224	; 0xe0
    9396:	00c9      	lsls	r1, r1, #3
    9398:	4008      	ands	r0, r1
    939a:	4310      	orrs	r0, r2
    939c:	5198      	str	r0, [r3, r6]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:56
    if(align == PWM_CENTER)         //中心对齐
    939e:	2f01      	cmp	r7, #1
    93a0:	d039      	beq.n	9416 <pwm_init+0xd2>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:85
        tpm_timer_init1(TPM_i,clockFre,period);
    93a2:	ab04      	add	r3, sp, #16
    93a4:	1ddc      	adds	r4, r3, #7
    93a6:	79d8      	ldrb	r0, [r3, #7]
    93a8:	9a02      	ldr	r2, [sp, #8]
    93aa:	9903      	ldr	r1, [sp, #12]
    93ac:	f7ff ff7c 	bl	92a8 <tpm_timer_init1>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:86
    	PWM_ARR[TPM_i]->SC &= ~TPM_SC_CPWMS_MASK; //设置边沿对齐
    93b0:	4a75      	ldr	r2, [pc, #468]	; (9588 <pwm_init+0x244>)
    93b2:	7823      	ldrb	r3, [r4, #0]
    93b4:	009b      	lsls	r3, r3, #2
    93b6:	5899      	ldr	r1, [r3, r2]
    93b8:	680b      	ldr	r3, [r1, #0]
    93ba:	2020      	movs	r0, #32
    93bc:	4383      	bics	r3, r0
    93be:	600b      	str	r3, [r1, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:87
    	TPM_CnSC_REG(PWM_ARR[TPM_i],chl) = 0;     //清通道控制寄存器
    93c0:	7826      	ldrb	r6, [r4, #0]
    93c2:	00b3      	lsls	r3, r6, #2
    93c4:	589a      	ldr	r2, [r3, r2]
    93c6:	ab04      	add	r3, sp, #16
    93c8:	799c      	ldrb	r4, [r3, #6]
    93ca:	1c63      	adds	r3, r4, #1
    93cc:	00db      	lsls	r3, r3, #3
    93ce:	18d3      	adds	r3, r2, r3
    93d0:	2100      	movs	r1, #0
    93d2:	6059      	str	r1, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:89
        temp = PWM_ARR[TPM_i]->MOD + 1;    //计算周期（period）
    93d4:	6897      	ldr	r7, [r2, #8]
    93d6:	3701      	adds	r7, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:90
        if(pol == PWM_PLUS)             //正极性
    93d8:	2d00      	cmp	r5, #0
    93da:	d000      	beq.n	93de <pwm_init+0x9a>
    93dc:	e092      	b.n	9504 <pwm_init+0x1c0>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:92
            TPM_CnSC_REG(PWM_ARR[TPM_i],chl)=TPM_CnSC_MSB_MASK| \
    93de:	1c63      	adds	r3, r4, #1
    93e0:	00db      	lsls	r3, r3, #3
    93e2:	18d2      	adds	r2, r2, r3
    93e4:	2328      	movs	r3, #40	; 0x28
    93e6:	6053      	str	r3, [r2, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:94
            temp = (uint32_t)(temp*duty/100);
    93e8:	0038      	movs	r0, r7
    93ea:	f7fe fcb9 	bl	7d60 <__aeabi_ui2f>
    93ee:	9901      	ldr	r1, [sp, #4]
    93f0:	f7fe f956 	bl	76a0 <__aeabi_fmul>
    93f4:	4961      	ldr	r1, [pc, #388]	; (957c <pwm_init+0x238>)
    93f6:	f7fd ff7b 	bl	72f0 <__aeabi_fdiv>
    93fa:	f7fd fe63 	bl	70c4 <__aeabi_f2uiz>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:95
            if(temp >= 65536)
    93fe:	4b63      	ldr	r3, [pc, #396]	; (958c <pwm_init+0x248>)
    9400:	4298      	cmp	r0, r3
    9402:	d977      	bls.n	94f4 <pwm_init+0x1b0>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:96
            	TPM_CnV_REG(PWM_ARR[TPM_i],chl) = 65535;
    9404:	00b6      	lsls	r6, r6, #2
    9406:	4b60      	ldr	r3, [pc, #384]	; (9588 <pwm_init+0x244>)
    9408:	58f3      	ldr	r3, [r6, r3]
    940a:	3401      	adds	r4, #1
    940c:	00e4      	lsls	r4, r4, #3
    940e:	191c      	adds	r4, r3, r4
    9410:	4b5e      	ldr	r3, [pc, #376]	; (958c <pwm_init+0x248>)
    9412:	60a3      	str	r3, [r4, #8]
    9414:	e09b      	b.n	954e <pwm_init+0x20a>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:58
        tpm_timer_init1(TPM_i,clockFre,period / 2);
    9416:	9e02      	ldr	r6, [sp, #8]
    9418:	0872      	lsrs	r2, r6, #1
    941a:	ab04      	add	r3, sp, #16
    941c:	1ddc      	adds	r4, r3, #7
    941e:	79d8      	ldrb	r0, [r3, #7]
    9420:	9903      	ldr	r1, [sp, #12]
    9422:	f7ff ff41 	bl	92a8 <tpm_timer_init1>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:59
    	PWM_ARR[TPM_i]->SC |= TPM_SC_CPWMS_MASK;   //设置中心对齐
    9426:	4a58      	ldr	r2, [pc, #352]	; (9588 <pwm_init+0x244>)
    9428:	7823      	ldrb	r3, [r4, #0]
    942a:	009b      	lsls	r3, r3, #2
    942c:	5899      	ldr	r1, [r3, r2]
    942e:	680b      	ldr	r3, [r1, #0]
    9430:	2020      	movs	r0, #32
    9432:	4303      	orrs	r3, r0
    9434:	600b      	str	r3, [r1, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:60
        TPM_CnSC_REG(PWM_ARR[TPM_i],chl) = 0;
    9436:	7827      	ldrb	r7, [r4, #0]
    9438:	00bb      	lsls	r3, r7, #2
    943a:	589b      	ldr	r3, [r3, r2]
    943c:	aa04      	add	r2, sp, #16
    943e:	7994      	ldrb	r4, [r2, #6]
    9440:	1c62      	adds	r2, r4, #1
    9442:	00d2      	lsls	r2, r2, #3
    9444:	189b      	adds	r3, r3, r2
    9446:	2200      	movs	r2, #0
    9448:	605a      	str	r2, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:62
        if(pol == PWM_PLUS)            //正极性
    944a:	2d00      	cmp	r5, #0
    944c:	d126      	bne.n	949c <pwm_init+0x158>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:64
            TPM_CnSC_REG(PWM_ARR[TPM_i],chl)=TPM_CnSC_MSB_MASK| \
    944e:	00bb      	lsls	r3, r7, #2
    9450:	4a4d      	ldr	r2, [pc, #308]	; (9588 <pwm_init+0x244>)
    9452:	589b      	ldr	r3, [r3, r2]
    9454:	1c62      	adds	r2, r4, #1
    9456:	00d2      	lsls	r2, r2, #3
    9458:	189b      	adds	r3, r3, r2
    945a:	2228      	movs	r2, #40	; 0x28
    945c:	605a      	str	r2, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:66
            temp = (uint32_t)(duty*period/200);
    945e:	0030      	movs	r0, r6
    9460:	f7fe fc34 	bl	7ccc <__aeabi_i2f>
    9464:	9901      	ldr	r1, [sp, #4]
    9466:	f7fe f91b 	bl	76a0 <__aeabi_fmul>
    946a:	4949      	ldr	r1, [pc, #292]	; (9590 <pwm_init+0x24c>)
    946c:	f7fd ff40 	bl	72f0 <__aeabi_fdiv>
    9470:	f7fd fe28 	bl	70c4 <__aeabi_f2uiz>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:67
            if(temp >= 65536)
    9474:	4b45      	ldr	r3, [pc, #276]	; (958c <pwm_init+0x248>)
    9476:	4298      	cmp	r0, r3
    9478:	d908      	bls.n	948c <pwm_init+0x148>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:68
            	TPM_CnV_REG(PWM_ARR[TPM_i],chl) = 65535;
    947a:	00bf      	lsls	r7, r7, #2
    947c:	4b42      	ldr	r3, [pc, #264]	; (9588 <pwm_init+0x244>)
    947e:	58fb      	ldr	r3, [r7, r3]
    9480:	3401      	adds	r4, #1
    9482:	00e4      	lsls	r4, r4, #3
    9484:	191c      	adds	r4, r3, r4
    9486:	4b41      	ldr	r3, [pc, #260]	; (958c <pwm_init+0x248>)
    9488:	60a3      	str	r3, [r4, #8]
    948a:	e060      	b.n	954e <pwm_init+0x20a>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:70
                TPM_CnV_REG(PWM_ARR[TPM_i],chl)=temp;
    948c:	00bf      	lsls	r7, r7, #2
    948e:	4b3e      	ldr	r3, [pc, #248]	; (9588 <pwm_init+0x244>)
    9490:	58fb      	ldr	r3, [r7, r3]
    9492:	3401      	adds	r4, #1
    9494:	00e4      	lsls	r4, r4, #3
    9496:	191c      	adds	r4, r3, r4
    9498:	60a0      	str	r0, [r4, #8]
    949a:	e058      	b.n	954e <pwm_init+0x20a>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:74
            TPM_CnSC_REG(PWM_ARR[TPM_i],chl)=TPM_CnSC_MSB_MASK| \
    949c:	00bb      	lsls	r3, r7, #2
    949e:	4a3a      	ldr	r2, [pc, #232]	; (9588 <pwm_init+0x244>)
    94a0:	589b      	ldr	r3, [r3, r2]
    94a2:	1c62      	adds	r2, r4, #1
    94a4:	00d2      	lsls	r2, r2, #3
    94a6:	189b      	adds	r3, r3, r2
    94a8:	2224      	movs	r2, #36	; 0x24
    94aa:	605a      	str	r2, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:76
            temp = (uint32_t)(period*(100-duty)/200);
    94ac:	9901      	ldr	r1, [sp, #4]
    94ae:	4833      	ldr	r0, [pc, #204]	; (957c <pwm_init+0x238>)
    94b0:	f7fe fa28 	bl	7904 <__aeabi_fsub>
    94b4:	1c05      	adds	r5, r0, #0
    94b6:	9802      	ldr	r0, [sp, #8]
    94b8:	f7fe fc08 	bl	7ccc <__aeabi_i2f>
    94bc:	1c29      	adds	r1, r5, #0
    94be:	f7fe f8ef 	bl	76a0 <__aeabi_fmul>
    94c2:	4933      	ldr	r1, [pc, #204]	; (9590 <pwm_init+0x24c>)
    94c4:	f7fd ff14 	bl	72f0 <__aeabi_fdiv>
    94c8:	f7fd fdfc 	bl	70c4 <__aeabi_f2uiz>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:77
            if(temp >= 65536)
    94cc:	4b2f      	ldr	r3, [pc, #188]	; (958c <pwm_init+0x248>)
    94ce:	4298      	cmp	r0, r3
    94d0:	d908      	bls.n	94e4 <pwm_init+0x1a0>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:78
            	TPM_CnV_REG(PWM_ARR[TPM_i],chl) = 65535;
    94d2:	00bf      	lsls	r7, r7, #2
    94d4:	4b2c      	ldr	r3, [pc, #176]	; (9588 <pwm_init+0x244>)
    94d6:	58fb      	ldr	r3, [r7, r3]
    94d8:	3401      	adds	r4, #1
    94da:	00e4      	lsls	r4, r4, #3
    94dc:	191c      	adds	r4, r3, r4
    94de:	4b2b      	ldr	r3, [pc, #172]	; (958c <pwm_init+0x248>)
    94e0:	60a3      	str	r3, [r4, #8]
    94e2:	e034      	b.n	954e <pwm_init+0x20a>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:80
                TPM_CnV_REG(PWM_ARR[TPM_i],chl)=temp;
    94e4:	00bf      	lsls	r7, r7, #2
    94e6:	4b28      	ldr	r3, [pc, #160]	; (9588 <pwm_init+0x244>)
    94e8:	58fb      	ldr	r3, [r7, r3]
    94ea:	3401      	adds	r4, #1
    94ec:	00e4      	lsls	r4, r4, #3
    94ee:	191c      	adds	r4, r3, r4
    94f0:	60a0      	str	r0, [r4, #8]
    94f2:	e02c      	b.n	954e <pwm_init+0x20a>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:98
                TPM_CnV_REG(PWM_ARR[TPM_i],chl)=temp;
    94f4:	00b6      	lsls	r6, r6, #2
    94f6:	4b24      	ldr	r3, [pc, #144]	; (9588 <pwm_init+0x244>)
    94f8:	58f3      	ldr	r3, [r6, r3]
    94fa:	3401      	adds	r4, #1
    94fc:	00e4      	lsls	r4, r4, #3
    94fe:	191c      	adds	r4, r3, r4
    9500:	60a0      	str	r0, [r4, #8]
    9502:	e024      	b.n	954e <pwm_init+0x20a>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:102
        	TPM_CnSC_REG(PWM_ARR[TPM_i],chl) = 0; //清通道控制状态寄存器
    9504:	1c63      	adds	r3, r4, #1
    9506:	00db      	lsls	r3, r3, #3
    9508:	18d2      	adds	r2, r2, r3
    950a:	2100      	movs	r1, #0
    950c:	6051      	str	r1, [r2, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:104
            TPM_CnSC_REG(PWM_ARR[TPM_i],chl)=TPM_CnSC_MSB_MASK| \
    950e:	00b2      	lsls	r2, r6, #2
    9510:	491d      	ldr	r1, [pc, #116]	; (9588 <pwm_init+0x244>)
    9512:	5852      	ldr	r2, [r2, r1]
    9514:	18d3      	adds	r3, r2, r3
    9516:	2224      	movs	r2, #36	; 0x24
    9518:	605a      	str	r2, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:107
            temp = (uint32_t)(temp*(100-duty)/100);
    951a:	9901      	ldr	r1, [sp, #4]
    951c:	4817      	ldr	r0, [pc, #92]	; (957c <pwm_init+0x238>)
    951e:	f7fe f9f1 	bl	7904 <__aeabi_fsub>
    9522:	1c05      	adds	r5, r0, #0
    9524:	0038      	movs	r0, r7
    9526:	f7fe fc1b 	bl	7d60 <__aeabi_ui2f>
    952a:	1c29      	adds	r1, r5, #0
    952c:	f7fe f8b8 	bl	76a0 <__aeabi_fmul>
    9530:	4912      	ldr	r1, [pc, #72]	; (957c <pwm_init+0x238>)
    9532:	f7fd fedd 	bl	72f0 <__aeabi_fdiv>
    9536:	f7fd fdc5 	bl	70c4 <__aeabi_f2uiz>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:108
            if(temp >= 65536)
    953a:	4b14      	ldr	r3, [pc, #80]	; (958c <pwm_init+0x248>)
    953c:	4298      	cmp	r0, r3
    953e:	d814      	bhi.n	956a <pwm_init+0x226>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:111
                TPM_CnV_REG(PWM_ARR[TPM_i],chl)=temp;
    9540:	00b6      	lsls	r6, r6, #2
    9542:	4b11      	ldr	r3, [pc, #68]	; (9588 <pwm_init+0x244>)
    9544:	58f3      	ldr	r3, [r6, r3]
    9546:	3401      	adds	r4, #1
    9548:	00e4      	lsls	r4, r4, #3
    954a:	191c      	adds	r4, r3, r4
    954c:	60a0      	str	r0, [r4, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:114
    PWM_ARR[TPM_i]->SC |= TPM_SC_CMOD(1);//使能计数器
    954e:	ab04      	add	r3, sp, #16
    9550:	3307      	adds	r3, #7
    9552:	781b      	ldrb	r3, [r3, #0]
    9554:	009b      	lsls	r3, r3, #2
    9556:	4a0c      	ldr	r2, [pc, #48]	; (9588 <pwm_init+0x244>)
    9558:	589a      	ldr	r2, [r3, r2]
    955a:	6813      	ldr	r3, [r2, #0]
    955c:	2108      	movs	r1, #8
    955e:	430b      	orrs	r3, r1
    9560:	6013      	str	r3, [r2, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:115
}
    9562:	b006      	add	sp, #24
    9564:	bc04      	pop	{r2}
    9566:	4690      	mov	r8, r2
    9568:	bdf0      	pop	{r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:109
            	TPM_CnV_REG(PWM_ARR[TPM_i],chl) = 65535;
    956a:	00b6      	lsls	r6, r6, #2
    956c:	4b06      	ldr	r3, [pc, #24]	; (9588 <pwm_init+0x244>)
    956e:	58f3      	ldr	r3, [r6, r3]
    9570:	3401      	adds	r4, #1
    9572:	00e4      	lsls	r4, r4, #3
    9574:	191c      	adds	r4, r3, r4
    9576:	4b05      	ldr	r3, [pc, #20]	; (958c <pwm_init+0x248>)
    9578:	60a3      	str	r3, [r4, #8]
    957a:	e7e8      	b.n	954e <pwm_init+0x20a>
    957c:	42c80000 	.word	0x42c80000
    9580:	0000a950 	.word	0x0000a950
    9584:	fffff8ff 	.word	0xfffff8ff
    9588:	20000414 	.word	0x20000414
    958c:	0000ffff 	.word	0x0000ffff
    9590:	43480000 	.word	0x43480000

00009594 <pwm_update>:
pwm_update():
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:125
{
    9594:	b5f0      	push	{r4, r5, r6, r7, lr}
    9596:	b083      	sub	sp, #12
    9598:	0007      	movs	r7, r0
    959a:	1c0c      	adds	r4, r1, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:129
    if(duty>100.0)  duty=100.0;
    959c:	4912      	ldr	r1, [pc, #72]	; (95e8 <pwm_update+0x54>)
    959e:	1c20      	adds	r0, r4, #0
    95a0:	f7fd fd5c 	bl	705c <__aeabi_fcmpgt>
    95a4:	2800      	cmp	r0, #0
    95a6:	d000      	beq.n	95aa <pwm_update+0x16>
    95a8:	4c0f      	ldr	r4, [pc, #60]	; (95e8 <pwm_update+0x54>)
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:131
    tpm_mux_val(pwmNo,&TPM_i,&chl);
    95aa:	466b      	mov	r3, sp
    95ac:	1d9e      	adds	r6, r3, #6
    95ae:	1ddd      	adds	r5, r3, #7
    95b0:	0032      	movs	r2, r6
    95b2:	0029      	movs	r1, r5
    95b4:	0038      	movs	r0, r7
    95b6:	f7ff fe27 	bl	9208 <tpm_mux_val>
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:133
    period=PWM_ARR[TPM_i]->MOD;
    95ba:	782b      	ldrb	r3, [r5, #0]
    95bc:	009b      	lsls	r3, r3, #2
    95be:	4a0b      	ldr	r2, [pc, #44]	; (95ec <pwm_update+0x58>)
    95c0:	589d      	ldr	r5, [r3, r2]
    95c2:	68a8      	ldr	r0, [r5, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:134
    TPM_CnV_REG(PWM_ARR[TPM_i],chl)=(uint32_t)(period*duty/100);
    95c4:	f7fe fbcc 	bl	7d60 <__aeabi_ui2f>
    95c8:	1c21      	adds	r1, r4, #0
    95ca:	f7fe f869 	bl	76a0 <__aeabi_fmul>
    95ce:	4906      	ldr	r1, [pc, #24]	; (95e8 <pwm_update+0x54>)
    95d0:	f7fd fe8e 	bl	72f0 <__aeabi_fdiv>
    95d4:	7834      	ldrb	r4, [r6, #0]
    95d6:	f7fd fd75 	bl	70c4 <__aeabi_f2uiz>
    95da:	3401      	adds	r4, #1
    95dc:	00e4      	lsls	r4, r4, #3
    95de:	192c      	adds	r4, r5, r4
    95e0:	60a0      	str	r0, [r4, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/pwm.c:135
}
    95e2:	b003      	add	sp, #12
    95e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    95e6:	46c0      	nop			; (mov r8, r8)
    95e8:	42c80000 	.word	0x42c80000
    95ec:	20000414 	.word	0x20000414

000095f0 <Vectors_Init>:
Vectors_Init():
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:15
//参数说明：无
//功能概要：User对BIOS中断向量表的部分继承,构件库函数指针初始化
//修改信息：WYH，20200805，规范
//======================================================================
void  Vectors_Init()
{
    95f0:	b580      	push	{r7, lr}
    95f2:	4f1d      	ldr	r7, [pc, #116]	; (9668 <Vectors_Init+0x78>)
    95f4:	44bd      	add	sp, r7
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:19
    //有用户程序，编译本段代码
    #if (GEC_USER_SECTOR_START!=0)   
    //（1）若Flash倒数2扇区的前24字节为空，则写入设备序列号及软件版本号初值
    if(flash_isempty(MCU_SECTOR_NUM-1,24))
    95f6:	2118      	movs	r1, #24
    95f8:	203f      	movs	r0, #63	; 0x3f
    95fa:	f7ff fd6b 	bl	90d4 <flash_isempty>
    95fe:	2800      	cmp	r0, #0
    9600:	d12b      	bne.n	965a <Vectors_Init+0x6a>
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:28
    }
    //（2）继承BIOS的串口中断              
    void ** bios=MCU_FLASH_ADDR_START;   //向量表起始地址  
    uint32_t user[MCU_SECTORSIZE/4];     //向量表变量数组
    //读取USER中断向量表各中断处理程序地址赋给user数组
    flash_read_physical((uint8_t *)user,GEC_USER_SECTOR_START*
    9602:	2280      	movs	r2, #128	; 0x80
    9604:	21d0      	movs	r1, #208	; 0xd0
    9606:	00d2      	lsls	r2, r2, #3
    9608:	01c9      	lsls	r1, r1, #7
    960a:	a802      	add	r0, sp, #8
    960c:	f7ff fd5e 	bl	90cc <flash_read_physical>
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:32
    MCU_SECTORSIZE+MCU_FLASH_ADDR_START,MCU_SECTORSIZE);
    //判断USER中串口更新中断是否为BIOS对应中断地址。若是，则不作操作；否则修改
    //为BIOS对应中断地址
    if(user[BIOS_UART_UPDATE_IRQn] != (uint32_t)bios[BIOS_UART_UPDATE_IRQn])
    9610:	2378      	movs	r3, #120	; 0x78
    9612:	681b      	ldr	r3, [r3, #0]
    9614:	9a20      	ldr	r2, [sp, #128]	; 0x80
    9616:	429a      	cmp	r2, r3
    9618:	d010      	beq.n	963c <Vectors_Init+0x4c>
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:35
    {
        //改变User中断向量表中BIOS_UART中断向量
        flash_erase(GEC_USER_SECTOR_START);
    961a:	201a      	movs	r0, #26
    961c:	f7ff fd8c 	bl	9138 <flash_erase>
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:37
        //改USER中断向量表的BIOS程序写入串口的中断处理程序地址
        user[2]=(uint32_t)bios[2];     //【20200903】
    9620:	2308      	movs	r3, #8
    9622:	681b      	ldr	r3, [r3, #0]
    9624:	9304      	str	r3, [sp, #16]
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:38
        user[BIOS_UART_UPDATE_IRQn]=(uint32_t)bios[BIOS_UART_UPDATE_IRQn];
    9626:	2378      	movs	r3, #120	; 0x78
    9628:	681b      	ldr	r3, [r3, #0]
    962a:	9301      	str	r3, [sp, #4]
    962c:	9320      	str	r3, [sp, #128]	; 0x80
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:39
        flash_write_physical(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
    962e:	2180      	movs	r1, #128	; 0x80
    9630:	20d0      	movs	r0, #208	; 0xd0
    9632:	aa02      	add	r2, sp, #8
    9634:	00c9      	lsls	r1, r1, #3
    9636:	01c0      	lsls	r0, r0, #7
    9638:	f7ff fdb2 	bl	91a0 <flash_write_physical>
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:44
        MCU_FLASH_ADDR_START,MCU_SECTORSIZE,(uint8_t *)user);
    }
    
    //（3）中断向量表指针重定向到USER程序的中断向量表
    SCB->VTOR = (uint32_t)(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
    963c:	4b0b      	ldr	r3, [pc, #44]	; (966c <Vectors_Init+0x7c>)
    963e:	22d0      	movs	r2, #208	; 0xd0
    9640:	01d2      	lsls	r2, r2, #7
    9642:	609a      	str	r2, [r3, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:47
    MCU_FLASH_ADDR_START);  
    //（4）给component_fun赋值，SYSTEM_FUNCTION函数用
    component_fun=(void **)(MCU_FLASH_ADDR_START+
    9644:	4b0a      	ldr	r3, [pc, #40]	; (9670 <Vectors_Init+0x80>)
    9646:	22e0      	movs	r2, #224	; 0xe0
    9648:	0192      	lsls	r2, r2, #6
    964a:	601a      	str	r2, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:50
    GEC_COMPONENT_LST_START*MCU_SECTORSIZE); 
    //（5）printf提示             
    printf("  【User提示】：将进入User的main()执行...\r\n");
    964c:	4809      	ldr	r0, [pc, #36]	; (9674 <Vectors_Init+0x84>)
    964e:	f000 fdd9 	bl	a204 <myprintf>
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:53
    
    #endif
}
    9652:	2381      	movs	r3, #129	; 0x81
    9654:	00db      	lsls	r3, r3, #3
    9656:	449d      	add	sp, r3
    9658:	bd80      	pop	{r7, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/gec.c:21
        flash_write_physical((MCU_SECTOR_NUM-1)*MCU_SECTORSIZE+
    965a:	20fc      	movs	r0, #252	; 0xfc
    965c:	4a06      	ldr	r2, [pc, #24]	; (9678 <Vectors_Init+0x88>)
    965e:	2118      	movs	r1, #24
    9660:	0200      	lsls	r0, r0, #8
    9662:	f7ff fd9d 	bl	91a0 <flash_write_physical>
    9666:	e7cc      	b.n	9602 <Vectors_Init+0x12>
    9668:	fffffbf8 	.word	0xfffffbf8
    966c:	e000ed00 	.word	0xe000ed00
    9670:	200004b8 	.word	0x200004b8
    9674:	0000a980 	.word	0x0000a980
    9678:	0000a964 	.word	0x0000a964

0000967c <uart_is_uartNo>:
uart_is_uartNo():
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:539
//参数说明：串口号uartNo  :UART_0、UART_1、UART_2
//功能概要：为程序健壮性而判断uartNo是否在串口数字范围内
//=====================================================================
uint8_t uart_is_uartNo(uint8_t uartNo)
{
    if(uartNo < UART_0 || uartNo > UART_2)
    967c:	2802      	cmp	r0, #2
    967e:	d801      	bhi.n	9684 <uart_is_uartNo+0x8>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:542
        return 0;
    else
        return 1;
    9680:	2001      	movs	r0, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:543
}
    9682:	4770      	bx	lr
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:540
        return 0;
    9684:	2000      	movs	r0, #0
    9686:	e7fc      	b.n	9682 <uart_is_uartNo+0x6>

00009688 <uart_init>:
uart_init():
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:24
{
    9688:	b570      	push	{r4, r5, r6, lr}
    968a:	0004      	movs	r4, r0
    968c:	000d      	movs	r5, r1
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:32
    if(!uart_is_uartNo(uartNo))
    968e:	f7ff fff5 	bl	967c <uart_is_uartNo>
    9692:	2800      	cmp	r0, #0
    9694:	d02b      	beq.n	96ee <uart_init+0x66>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:38
    if(uartNo==0)
    9696:	2c00      	cmp	r4, #0
    9698:	d02a      	beq.n	96f0 <uart_init+0x68>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:92
    	switch (uartNo)
    969a:	2c01      	cmp	r4, #1
    969c:	d100      	bne.n	96a0 <uart_init+0x18>
    969e:	e06d      	b.n	977c <uart_init+0xf4>
    96a0:	2c02      	cmp	r4, #2
    96a2:	d100      	bne.n	96a6 <uart_init+0x1e>
    96a4:	e077      	b.n	9796 <uart_init+0x10e>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:142
        UART_2h_1_2 = UART_ARR[uartNo-1]; //获得UART1、2模块相应口基地址
    96a6:	3c01      	subs	r4, #1
    96a8:	00a4      	lsls	r4, r4, #2
    96aa:	4b41      	ldr	r3, [pc, #260]	; (97b0 <uart_init+0x128>)
    96ac:	58e4      	ldr	r4, [r4, r3]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:145
        UART_C2_REG(UART_2h_1_2) &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK);
    96ae:	78e3      	ldrb	r3, [r4, #3]
    96b0:	220c      	movs	r2, #12
    96b2:	4393      	bics	r3, r2
    96b4:	70e3      	strb	r3, [r4, #3]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:150
        sbr = (uint16_t)((SystemCoreClock/2)/(baud_rate * 16));
    96b6:	4b3f      	ldr	r3, [pc, #252]	; (97b4 <uart_init+0x12c>)
    96b8:	6818      	ldr	r0, [r3, #0]
    96ba:	0840      	lsrs	r0, r0, #1
    96bc:	0129      	lsls	r1, r5, #4
    96be:	f7fd faf3 	bl	6ca8 <__udivsi3>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:151
        temp = UART_BDH_REG(UART_2h_1_2) & ~(UART_BDH_SBR(0x1F));
    96c2:	7823      	ldrb	r3, [r4, #0]
    96c4:	221f      	movs	r2, #31
    96c6:	4393      	bics	r3, r2
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:152
        UART_BDH_REG(UART_2h_1_2) = temp |  UART_BDH_SBR(((sbr & 0x1F00) >> 8));
    96c8:	1202      	asrs	r2, r0, #8
    96ca:	211f      	movs	r1, #31
    96cc:	400a      	ands	r2, r1
    96ce:	4313      	orrs	r3, r2
    96d0:	7023      	strb	r3, [r4, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:153
        UART_BDL_REG(UART_2h_1_2) = (uint8_t)(sbr & UART_BDL_SBR_MASK);
    96d2:	b2c0      	uxtb	r0, r0
    96d4:	7060      	strb	r0, [r4, #1]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:156
        UART_C1_REG(UART_2h_1_2)=0x00;
    96d6:	2300      	movs	r3, #0
    96d8:	70a3      	strb	r3, [r4, #2]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:157
        UART_C3_REG(UART_2h_1_2)=0x00;
    96da:	71a3      	strb	r3, [r4, #6]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:158
        UART_S2_REG(UART_2h_1_2)=0x00;
    96dc:	7163      	strb	r3, [r4, #5]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:160
        UART_C2_REG(UART_2h_1_2) &= ~UART_C2_TIE_MASK;
    96de:	78e3      	ldrb	r3, [r4, #3]
    96e0:	227f      	movs	r2, #127	; 0x7f
    96e2:	4013      	ands	r3, r2
    96e4:	70e3      	strb	r3, [r4, #3]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:162
        UART_C2_REG(UART_2h_1_2)|= (UART_C2_TE_MASK | UART_C2_RE_MASK);
    96e6:	78e3      	ldrb	r3, [r4, #3]
    96e8:	220c      	movs	r2, #12
    96ea:	4313      	orrs	r3, r2
    96ec:	70e3      	strb	r3, [r4, #3]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:164
}
    96ee:	bd70      	pop	{r4, r5, r6, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:41
        SIM_SOPT2 |= SIM_SOPT2_UART0SRC(0x1);
    96f0:	4b31      	ldr	r3, [pc, #196]	; (97b8 <uart_init+0x130>)
    96f2:	4a32      	ldr	r2, [pc, #200]	; (97bc <uart_init+0x134>)
    96f4:	5898      	ldr	r0, [r3, r2]
    96f6:	2180      	movs	r1, #128	; 0x80
    96f8:	04c9      	lsls	r1, r1, #19
    96fa:	4301      	orrs	r1, r0
    96fc:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:42
        SIM_SOPT2 &= ~SIM_SOPT2_PLLFLLSEL_MASK;
    96fe:	5899      	ldr	r1, [r3, r2]
    9700:	482f      	ldr	r0, [pc, #188]	; (97c0 <uart_init+0x138>)
    9702:	4001      	ands	r1, r0
    9704:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:48
            PORTE_PCR20 |= PORT_PCR_MUX(0x4);    //使能UART0_TXD
    9706:	492f      	ldr	r1, [pc, #188]	; (97c4 <uart_init+0x13c>)
    9708:	6d08      	ldr	r0, [r1, #80]	; 0x50
    970a:	2280      	movs	r2, #128	; 0x80
    970c:	00d2      	lsls	r2, r2, #3
    970e:	4310      	orrs	r0, r2
    9710:	6508      	str	r0, [r1, #80]	; 0x50
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:49
            PORTE_PCR21 |= PORT_PCR_MUX(0x4);    //使能UART0_RXD
    9712:	6d48      	ldr	r0, [r1, #84]	; 0x54
    9714:	4310      	orrs	r0, r2
    9716:	6548      	str	r0, [r1, #84]	; 0x54
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:66
        SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;    //启动串口0时钟
    9718:	492b      	ldr	r1, [pc, #172]	; (97c8 <uart_init+0x140>)
    971a:	5858      	ldr	r0, [r3, r1]
    971c:	4302      	orrs	r2, r0
    971e:	505a      	str	r2, [r3, r1]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:69
        UART0_C2_REG(UART_2h_0) &= ~(UART0_C2_TE_MASK | UART0_C2_RE_MASK);
    9720:	4c2a      	ldr	r4, [pc, #168]	; (97cc <uart_init+0x144>)
    9722:	78e3      	ldrb	r3, [r4, #3]
    9724:	220c      	movs	r2, #12
    9726:	4393      	bics	r3, r2
    9728:	70e3      	strb	r3, [r4, #3]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:72
        sbr = (uint16_t)((SystemCoreClock)/(baud_rate * 16));
    972a:	0129      	lsls	r1, r5, #4
    972c:	4b21      	ldr	r3, [pc, #132]	; (97b4 <uart_init+0x12c>)
    972e:	6818      	ldr	r0, [r3, #0]
    9730:	f7fd faba 	bl	6ca8 <__udivsi3>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:73
        temp = UART0_BDH_REG(UART_2h_0) & ~(UART0_BDH_SBR(0x1F));
    9734:	7823      	ldrb	r3, [r4, #0]
    9736:	221f      	movs	r2, #31
    9738:	4393      	bics	r3, r2
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:74
        UART0_BDH_REG(UART_2h_0) = temp | UART0_BDH_SBR(((sbr & 0x1F00) >> 8));
    973a:	1202      	asrs	r2, r0, #8
    973c:	211f      	movs	r1, #31
    973e:	400a      	ands	r2, r1
    9740:	4313      	orrs	r3, r2
    9742:	7023      	strb	r3, [r4, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:75
        UART0_BDL_REG(UART_2h_0) = (uint8_t)(sbr & UART0_BDL_SBR_MASK);
    9744:	b2c0      	uxtb	r0, r0
    9746:	7060      	strb	r0, [r4, #1]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:78
        UART0_C4_REG(UART_2h_0) = 0x0F;
    9748:	230f      	movs	r3, #15
    974a:	72a3      	strb	r3, [r4, #10]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:79
        UART0_C1_REG(UART_2h_0) = 0x00;
    974c:	2300      	movs	r3, #0
    974e:	70a3      	strb	r3, [r4, #2]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:80
        UART0_C3_REG(UART_2h_0) = 0x00;
    9750:	71a3      	strb	r3, [r4, #6]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:81
        UART0_MA1_REG(UART_2h_0) = 0x00;
    9752:	7223      	strb	r3, [r4, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:82
        UART0_MA2_REG(UART_2h_0) = 0x00;
    9754:	7263      	strb	r3, [r4, #9]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:83
        UART0_S1_REG(UART_2h_0) |= 0x1F;
    9756:	7923      	ldrb	r3, [r4, #4]
    9758:	221f      	movs	r2, #31
    975a:	4313      	orrs	r3, r2
    975c:	7123      	strb	r3, [r4, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:84
        UART0_S2_REG(UART_2h_0) |= 0xC0;
    975e:	7963      	ldrb	r3, [r4, #5]
    9760:	2240      	movs	r2, #64	; 0x40
    9762:	4252      	negs	r2, r2
    9764:	4313      	orrs	r3, r2
    9766:	b2db      	uxtb	r3, r3
    9768:	7163      	strb	r3, [r4, #5]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:86
        UART0_C2_REG(UART_2h_0) &= ~UART0_C2_TIE_MASK;
    976a:	78e3      	ldrb	r3, [r4, #3]
    976c:	32bf      	adds	r2, #191	; 0xbf
    976e:	4013      	ands	r3, r2
    9770:	70e3      	strb	r3, [r4, #3]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:88
        UART0_C2_REG(UART_2h_0) |= (UART0_C2_TE_MASK | UART0_C2_RE_MASK);
    9772:	78e3      	ldrb	r3, [r4, #3]
    9774:	220c      	movs	r2, #12
    9776:	4313      	orrs	r3, r2
    9778:	70e3      	strb	r3, [r4, #3]
    977a:	e7b8      	b.n	96ee <uart_init+0x66>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:99
    			PORTE_PCR0 = PORT_PCR_MUX(0x3);    //使能UART1_TXD
    977c:	4b11      	ldr	r3, [pc, #68]	; (97c4 <uart_init+0x13c>)
    977e:	22c0      	movs	r2, #192	; 0xc0
    9780:	0092      	lsls	r2, r2, #2
    9782:	601a      	str	r2, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:100
    			PORTE_PCR1 = PORT_PCR_MUX(0x3);    //使能UART1_RXD
    9784:	605a      	str	r2, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:113
    		SIM_SCGC4 |= SIM_SCGC4_UART1_MASK; //启动串口1时钟
    9786:	490c      	ldr	r1, [pc, #48]	; (97b8 <uart_init+0x130>)
    9788:	4a0f      	ldr	r2, [pc, #60]	; (97c8 <uart_init+0x140>)
    978a:	5888      	ldr	r0, [r1, r2]
    978c:	2380      	movs	r3, #128	; 0x80
    978e:	011b      	lsls	r3, r3, #4
    9790:	4303      	orrs	r3, r0
    9792:	508b      	str	r3, [r1, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:114
    		break;
    9794:	e787      	b.n	96a6 <uart_init+0x1e>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:120
    				PORTE_PCR16 = PORT_PCR_MUX(0x3); //使能UART2_TXD
    9796:	4b0b      	ldr	r3, [pc, #44]	; (97c4 <uart_init+0x13c>)
    9798:	22c0      	movs	r2, #192	; 0xc0
    979a:	0092      	lsls	r2, r2, #2
    979c:	641a      	str	r2, [r3, #64]	; 0x40
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:121
    				PORTE_PCR17 = PORT_PCR_MUX(0x3); //使能UART2_RXD
    979e:	645a      	str	r2, [r3, #68]	; 0x44
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:137
    			SIM_SCGC4 |= SIM_SCGC4_UART2_MASK;//启动串口2时钟
    97a0:	4905      	ldr	r1, [pc, #20]	; (97b8 <uart_init+0x130>)
    97a2:	4a09      	ldr	r2, [pc, #36]	; (97c8 <uart_init+0x140>)
    97a4:	5888      	ldr	r0, [r1, r2]
    97a6:	2380      	movs	r3, #128	; 0x80
    97a8:	015b      	lsls	r3, r3, #5
    97aa:	4303      	orrs	r3, r0
    97ac:	508b      	str	r3, [r1, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:138
    			break;
    97ae:	e77a      	b.n	96a6 <uart_init+0x1e>
    97b0:	0000a9ac 	.word	0x0000a9ac
    97b4:	20000410 	.word	0x20000410
    97b8:	40047000 	.word	0x40047000
    97bc:	00001004 	.word	0x00001004
    97c0:	fffeffff 	.word	0xfffeffff
    97c4:	4004d000 	.word	0x4004d000
    97c8:	00001034 	.word	0x00001034
    97cc:	4006a000 	.word	0x4006a000

000097d0 <uart_send1>:
uart_send1():
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:173
{
    97d0:	b570      	push	{r4, r5, r6, lr}
    97d2:	0005      	movs	r5, r0
    97d4:	000c      	movs	r4, r1
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:177
    UART_MemMapPtr UART_2h_1_2 = UART_ARR[uartNo-1]; //获取UART1或者2基地址
    97d6:	1e43      	subs	r3, r0, #1
    97d8:	009b      	lsls	r3, r3, #2
    97da:	4a11      	ldr	r2, [pc, #68]	; (9820 <uart_send1+0x50>)
    97dc:	589e      	ldr	r6, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:185
    if(!uart_is_uartNo(uartNo))
    97de:	f7ff ff4d 	bl	967c <uart_is_uartNo>
    97e2:	2800      	cmp	r0, #0
    97e4:	d016      	beq.n	9814 <uart_send1+0x44>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:190
    for (t = 0; t < 0xFBBB; t++)//查询指定次数
    97e6:	2300      	movs	r3, #0
    97e8:	e004      	b.n	97f4 <uart_send1+0x24>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:204
            if (UART_S1_REG(UART_2h_1_2) & UART_S1_TDRE_MASK )
    97ea:	7932      	ldrb	r2, [r6, #4]
    97ec:	b252      	sxtb	r2, r2
    97ee:	2a00      	cmp	r2, #0
    97f0:	db11      	blt.n	9816 <uart_send1+0x46>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:190 (discriminator 2)
    for (t = 0; t < 0xFBBB; t++)//查询指定次数
    97f2:	3301      	adds	r3, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:190 (discriminator 1)
    97f4:	4a0b      	ldr	r2, [pc, #44]	; (9824 <uart_send1+0x54>)
    97f6:	4293      	cmp	r3, r2
    97f8:	d808      	bhi.n	980c <uart_send1+0x3c>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:192
        if(0==uartNo)     //判断使用的哪个串口
    97fa:	2d00      	cmp	r5, #0
    97fc:	d1f5      	bne.n	97ea <uart_send1+0x1a>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:195
            if ( UART0_S1_REG(UART_2h_0) & UART0_S1_TDRE_MASK )
    97fe:	4a0a      	ldr	r2, [pc, #40]	; (9828 <uart_send1+0x58>)
    9800:	7912      	ldrb	r2, [r2, #4]
    9802:	b252      	sxtb	r2, r2
    9804:	2a00      	cmp	r2, #0
    9806:	daf4      	bge.n	97f2 <uart_send1+0x22>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:197
                UART0_D_REG(UART_2h_0) = ch;
    9808:	4a07      	ldr	r2, [pc, #28]	; (9828 <uart_send1+0x58>)
    980a:	71d4      	strb	r4, [r2, #7]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:217
    if (t >= 0xFBBB)
    980c:	4a05      	ldr	r2, [pc, #20]	; (9824 <uart_send1+0x54>)
    980e:	4293      	cmp	r3, r2
    9810:	d803      	bhi.n	981a <uart_send1+0x4a>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:220
        return 1; //成功发送
    9812:	2001      	movs	r0, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:221
}
    9814:	bd70      	pop	{r4, r5, r6, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:206
                UART_D_REG(UART_2h_1_2) = ch;
    9816:	71f4      	strb	r4, [r6, #7]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:207
                break;
    9818:	e7f8      	b.n	980c <uart_send1+0x3c>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:218
        return 0; //发送超时，发送失败
    981a:	2000      	movs	r0, #0
    981c:	e7fa      	b.n	9814 <uart_send1+0x44>
    981e:	46c0      	nop			; (mov r8, r8)
    9820:	0000a9ac 	.word	0x0000a9ac
    9824:	0000fbba 	.word	0x0000fbba
    9828:	4006a000 	.word	0x4006a000

0000982c <uart_re1>:
uart_re1():
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:285
{
    982c:	b570      	push	{r4, r5, r6, lr}
    982e:	0004      	movs	r4, r0
    9830:	000e      	movs	r6, r1
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:289
    UART_MemMapPtr UART_2h_1_2 = UART_ARR[uartNo-1]; //获取UART1或者2基地址
    9832:	1e43      	subs	r3, r0, #1
    9834:	009b      	lsls	r3, r3, #2
    9836:	4a14      	ldr	r2, [pc, #80]	; (9888 <uart_re1+0x5c>)
    9838:	589d      	ldr	r5, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:292
    if(!uart_is_uartNo(uartNo))
    983a:	f7ff ff1f 	bl	967c <uart_is_uartNo>
    983e:	2800      	cmp	r0, #0
    9840:	d001      	beq.n	9846 <uart_re1+0x1a>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:298
    for (t = 0; t < 0xFBBB; t++)//查询指定次数
    9842:	2300      	movs	r3, #0
    9844:	e006      	b.n	9854 <uart_re1+0x28>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:294
        *fp=0;
    9846:	2300      	movs	r3, #0
    9848:	7033      	strb	r3, [r6, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:327
}
    984a:	bd70      	pop	{r4, r5, r6, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:313
            if(UART_S1_REG(UART_2h_1_2) & UART_S1_RDRF_MASK)
    984c:	792a      	ldrb	r2, [r5, #4]
    984e:	0692      	lsls	r2, r2, #26
    9850:	d415      	bmi.n	987e <uart_re1+0x52>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:298 (discriminator 2)
    for (t = 0; t < 0xFBBB; t++)//查询指定次数
    9852:	3301      	adds	r3, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:298 (discriminator 1)
    9854:	4a0d      	ldr	r2, [pc, #52]	; (988c <uart_re1+0x60>)
    9856:	4293      	cmp	r3, r2
    9858:	d80a      	bhi.n	9870 <uart_re1+0x44>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:300
        if(0==uartNo)  //判断使用的哪个串口
    985a:	2c00      	cmp	r4, #0
    985c:	d1f6      	bne.n	984c <uart_re1+0x20>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:303
        if (UART0_S1_REG(UART_2h_0) & UART0_S1_RDRF_MASK)
    985e:	4a0c      	ldr	r2, [pc, #48]	; (9890 <uart_re1+0x64>)
    9860:	7912      	ldrb	r2, [r2, #4]
    9862:	0692      	lsls	r2, r2, #26
    9864:	d5f5      	bpl.n	9852 <uart_re1+0x26>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:305
                dat=UART0_D_REG(UART_2h_0);    //获取数据,清接收中断位
    9866:	4a0a      	ldr	r2, [pc, #40]	; (9890 <uart_re1+0x64>)
    9868:	79d0      	ldrb	r0, [r2, #7]
    986a:	b2c0      	uxtb	r0, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:306
                *fp = 1;  //接收成功
    986c:	2201      	movs	r2, #1
    986e:	7032      	strb	r2, [r6, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:321
    if(t >= 0xFBBB) 
    9870:	4a06      	ldr	r2, [pc, #24]	; (988c <uart_re1+0x60>)
    9872:	4293      	cmp	r3, r2
    9874:	d9e9      	bls.n	984a <uart_re1+0x1e>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:324
        *fp = 0;    //未收到数据
    9876:	2300      	movs	r3, #0
    9878:	7033      	strb	r3, [r6, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:323
        dat = 0xFF; 
    987a:	20ff      	movs	r0, #255	; 0xff
    987c:	e7e5      	b.n	984a <uart_re1+0x1e>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:315
                dat=UART_D_REG(UART_2h_1_2);    //获取数据,清接收中断位
    987e:	79e8      	ldrb	r0, [r5, #7]
    9880:	b2c0      	uxtb	r0, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:316
                *fp= 1;  //接收成功
    9882:	2201      	movs	r2, #1
    9884:	7032      	strb	r2, [r6, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:317
                break;
    9886:	e7f3      	b.n	9870 <uart_re1+0x44>
    9888:	0000a9ac 	.word	0x0000a9ac
    988c:	0000fbba 	.word	0x0000fbba
    9890:	4006a000 	.word	0x4006a000

00009894 <uart_reN>:
uart_reN():
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:337
{
    9894:	b5f0      	push	{r4, r5, r6, r7, lr}
    9896:	b085      	sub	sp, #20
    9898:	9001      	str	r0, [sp, #4]
    989a:	000f      	movs	r7, r1
    989c:	0015      	movs	r5, r2
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:339
    uint8_t flag = 1;
    989e:	ab02      	add	r3, sp, #8
    98a0:	2201      	movs	r2, #1
    98a2:	71da      	strb	r2, [r3, #7]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:342
    if(!uart_is_uartNo(uartNo))
    98a4:	f7ff feea 	bl	967c <uart_is_uartNo>
    98a8:	2800      	cmp	r0, #0
    98aa:	d014      	beq.n	98d6 <uart_reN+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:348
    for (i = 0; i < len && flag==1; i++)
    98ac:	2400      	movs	r4, #0
    98ae:	e008      	b.n	98c2 <uart_reN+0x2e>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:350 (discriminator 4)
        buff[i] = uart_re1(uartNo, &flag); //接受数据
    98b0:	192e      	adds	r6, r5, r4
    98b2:	ab02      	add	r3, sp, #8
    98b4:	1dd9      	adds	r1, r3, #7
    98b6:	9801      	ldr	r0, [sp, #4]
    98b8:	f7ff ffb8 	bl	982c <uart_re1>
    98bc:	7030      	strb	r0, [r6, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:348 (discriminator 4)
    for (i = 0; i < len && flag==1; i++)
    98be:	3401      	adds	r4, #1
    98c0:	b2a4      	uxth	r4, r4
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:348 (discriminator 1)
    98c2:	42bc      	cmp	r4, r7
    98c4:	d204      	bcs.n	98d0 <uart_reN+0x3c>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:348 (discriminator 3)
    98c6:	ab02      	add	r3, sp, #8
    98c8:	3307      	adds	r3, #7
    98ca:	781b      	ldrb	r3, [r3, #0]
    98cc:	2b01      	cmp	r3, #1
    98ce:	d0ef      	beq.n	98b0 <uart_reN+0x1c>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:352
    if (i < len)
    98d0:	42bc      	cmp	r4, r7
    98d2:	d302      	bcc.n	98da <uart_reN+0x46>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:355
        return 1; //接收成功
    98d4:	2001      	movs	r0, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:356
}
    98d6:	b005      	add	sp, #20
    98d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:353
        return 0; //接收失败
    98da:	2000      	movs	r0, #0
    98dc:	e7fb      	b.n	98d6 <uart_reN+0x42>
	...

000098e0 <uart_enable_re_int>:
uart_enable_re_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:364
{
    98e0:	b570      	push	{r4, r5, r6, lr}
    98e2:	0004      	movs	r4, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:366
    UART_MemMapPtr UART_2h_1_2 = UART_ARR[uartNo-1]; //获取UART1或者2基地址
    98e4:	1e43      	subs	r3, r0, #1
    98e6:	009b      	lsls	r3, r3, #2
    98e8:	4a0d      	ldr	r2, [pc, #52]	; (9920 <uart_enable_re_int+0x40>)
    98ea:	589d      	ldr	r5, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:369
    if(!uart_is_uartNo(uartNo))
    98ec:	f7ff fec6 	bl	967c <uart_is_uartNo>
    98f0:	2800      	cmp	r0, #0
    98f2:	d00e      	beq.n	9912 <uart_enable_re_int+0x32>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:374
    if(0 == uartNo)
    98f4:	2c00      	cmp	r4, #0
    98f6:	d10d      	bne.n	9914 <uart_enable_re_int+0x34>
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:375
        UART0_C2_REG(UART_2h_0) |= UART0_C2_RIE_MASK;    //开放UART接收中断
    98f8:	4a0a      	ldr	r2, [pc, #40]	; (9924 <uart_enable_re_int+0x44>)
    98fa:	78d3      	ldrb	r3, [r2, #3]
    98fc:	2120      	movs	r1, #32
    98fe:	430b      	orrs	r3, r1
    9900:	70d3      	strb	r3, [r2, #3]
NVIC_EnableIRQ():
D:\app_for_qianrushi\exam\29\02_CPU/core_cm0plus.h:685
    9902:	4b09      	ldr	r3, [pc, #36]	; (9928 <uart_enable_re_int+0x48>)
    9904:	5d1b      	ldrb	r3, [r3, r4]
    9906:	221f      	movs	r2, #31
    9908:	401a      	ands	r2, r3
    990a:	2301      	movs	r3, #1
    990c:	4093      	lsls	r3, r2
    990e:	4a07      	ldr	r2, [pc, #28]	; (992c <uart_enable_re_int+0x4c>)
    9910:	6013      	str	r3, [r2, #0]
uart_enable_re_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:379
}
    9912:	bd70      	pop	{r4, r5, r6, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/uart.c:377
        UART_C2_REG(UART_2h_1_2) |= UART_C2_RIE_MASK;    //开放UART接收中断
    9914:	78eb      	ldrb	r3, [r5, #3]
    9916:	2220      	movs	r2, #32
    9918:	4313      	orrs	r3, r2
    991a:	70eb      	strb	r3, [r5, #3]
    991c:	e7f1      	b.n	9902 <uart_enable_re_int+0x22>
    991e:	46c0      	nop			; (mov r8, r8)
    9920:	0000a9ac 	.word	0x0000a9ac
    9924:	4006a000 	.word	0x4006a000
    9928:	20000420 	.word	0x20000420
    992c:	e000e100 	.word	0xe000e100

00009930 <UART0_IRQHandler>:
UART0_IRQHandler():
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:19
//功    能：收到一个字节，直接返回该字节
//备    注：进入本程序后，可使用uart_get_re_int函数可再进行中断标志判断
//          （1-有UART接收中断，0-没有UART接收中断）
//======================================================================
void UART_User_Handler(void)
{
    9930:	b570      	push	{r4, r5, r6, lr}
    9932:	b082      	sub	sp, #8
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:22
	uint8_t buffer[3];
	uint8_t flag;
	DISABLE_INTERRUPTS;  
    9934:	b672      	cpsid	i
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:25
	
	
	flag = uart_reN(UART_User,3, buffer); 
    9936:	ad01      	add	r5, sp, #4
    9938:	002a      	movs	r2, r5
    993a:	2103      	movs	r1, #3
    993c:	2000      	movs	r0, #0
    993e:	f7ff ffa9 	bl	9894 <uart_reN>
    9942:	0006      	movs	r6, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:26
	uint8_t num=(buffer[0]-'0')*100+(buffer[1]-'0')*10+buffer[2]-'0';
    9944:	782a      	ldrb	r2, [r5, #0]
    9946:	786b      	ldrb	r3, [r5, #1]
    9948:	2464      	movs	r4, #100	; 0x64
    994a:	4354      	muls	r4, r2
    994c:	009a      	lsls	r2, r3, #2
    994e:	189b      	adds	r3, r3, r2
    9950:	005a      	lsls	r2, r3, #1
    9952:	18a4      	adds	r4, r4, r2
    9954:	b2e4      	uxtb	r4, r4
    9956:	78ab      	ldrb	r3, [r5, #2]
    9958:	18e4      	adds	r4, r4, r3
    995a:	b2e4      	uxtb	r4, r4
    995c:	3430      	adds	r4, #48	; 0x30
    995e:	b2e4      	uxtb	r4, r4
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:27
	printf("%d\n",num);
    9960:	0021      	movs	r1, r4
    9962:	4808      	ldr	r0, [pc, #32]	; (9984 <UART0_IRQHandler+0x54>)
    9964:	f000 fc4e 	bl	a204 <myprintf>
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:28
	if(flag)   //有数据
    9968:	2e00      	cmp	r6, #0
    996a:	d102      	bne.n	9972 <UART0_IRQHandler+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:34
	{
	//	uart_send_string(UART_User,buffer);//回发接收到的字节
		pwm_update(PWM_USER , (float)1.0*num);
	}
	//------------------------------------------------------------------
	ENABLE_INTERRUPTS;       //开总中断
    996c:	b662      	cpsie	i
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:35
}
    996e:	b002      	add	sp, #8
    9970:	bd70      	pop	{r4, r5, r6, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:31
		pwm_update(PWM_USER , (float)1.0*num);
    9972:	0020      	movs	r0, r4
    9974:	f7fe f9aa 	bl	7ccc <__aeabi_i2f>
    9978:	1c01      	adds	r1, r0, #0
    997a:	4803      	ldr	r0, [pc, #12]	; (9988 <UART0_IRQHandler+0x58>)
    997c:	f7ff fe0a 	bl	9594 <pwm_update>
    9980:	e7f4      	b.n	996c <UART0_IRQHandler+0x3c>
    9982:	46c0      	nop			; (mov r8, r8)
    9984:	0000a94c 	.word	0x0000a94c
    9988:	00000201 	.word	0x00000201

0000998c <TPM0_IRQHandler>:
TPM0_IRQHandler():
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:77
//函数返回：无
//功能概要：（1）每次捕捉到上升沿或者下降沿触发该程序；
//       （2）每次触发都会上传当前捕捉到的上位机程序
//=====================================================================
void INCAP_USER_Handler(void)
{
    998c:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:79
	uint16_t val;
	DISABLE_INTERRUPTS;     //关总中断
    998e:	b672      	cpsid	i
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:82
	//------------------------------------------------------------------
	//（在此处增加功能）
	if(cap_get_flag(INCAP_USER))
    9990:	4807      	ldr	r0, [pc, #28]	; (99b0 <TPM0_IRQHandler+0x24>)
    9992:	f000 fd7b 	bl	a48c <cap_get_flag>
    9996:	2800      	cmp	r0, #0
    9998:	d101      	bne.n	999e <TPM0_IRQHandler+0x12>
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:89
		val = get_incapture_value(INCAP_USER);
	//	printf("输入捕捉值%d\r\n",val);
		cap_clear_flag(INCAP_USER); //清中断
	}
	//------------------------------------------------------------------
	ENABLE_INTERRUPTS;     //关总中断
    999a:	b662      	cpsie	i
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:90
}
    999c:	bd10      	pop	{r4, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:84
		val = get_incapture_value(INCAP_USER);
    999e:	4c04      	ldr	r4, [pc, #16]	; (99b0 <TPM0_IRQHandler+0x24>)
    99a0:	0020      	movs	r0, r4
    99a2:	f000 fd41 	bl	a428 <get_incapture_value>
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:86
		cap_clear_flag(INCAP_USER); //清中断
    99a6:	0020      	movs	r0, r4
    99a8:	f000 fd56 	bl	a458 <cap_clear_flag>
    99ac:	e7f5      	b.n	999a <TPM0_IRQHandler+0xe>
    99ae:	46c0      	nop			; (mov r8, r8)
    99b0:	00000202 	.word	0x00000202

000099b4 <SecAdd1>:
SecAdd1():
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:101
//参数说明：*p:为指向一个时分秒数组p[3]
//功能概要：秒单元+1，并处理时分单元（00:00:00-23:59:59)
//===========================================================================
void SecAdd1(uint8_t *p)
{
	*(p+2)+=1;         //秒+1
    99b4:	7883      	ldrb	r3, [r0, #2]
    99b6:	3301      	adds	r3, #1
    99b8:	b2db      	uxtb	r3, r3
    99ba:	7083      	strb	r3, [r0, #2]
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:102
	if(*(p+2)>=60)     //秒溢出
    99bc:	2b3b      	cmp	r3, #59	; 0x3b
    99be:	d911      	bls.n	99e4 <SecAdd1+0x30>
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:104
	{
		*(p+2)=0;       //清秒
    99c0:	2300      	movs	r3, #0
    99c2:	7083      	strb	r3, [r0, #2]
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:105
		*(p+1)+=1;      //分+1
    99c4:	7843      	ldrb	r3, [r0, #1]
    99c6:	3301      	adds	r3, #1
    99c8:	b2db      	uxtb	r3, r3
    99ca:	7043      	strb	r3, [r0, #1]
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:106
		if(*(p+1)>=60)  //分溢出
    99cc:	2b3b      	cmp	r3, #59	; 0x3b
    99ce:	d909      	bls.n	99e4 <SecAdd1+0x30>
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:108
		{
			*(p+1)=0;    //清分
    99d0:	2300      	movs	r3, #0
    99d2:	7043      	strb	r3, [r0, #1]
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:109
			*p+=1;       //时+1
    99d4:	7803      	ldrb	r3, [r0, #0]
    99d6:	3301      	adds	r3, #1
    99d8:	b2db      	uxtb	r3, r3
    99da:	7003      	strb	r3, [r0, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:110
			if(*p>=24)   //时溢出
    99dc:	2b17      	cmp	r3, #23
    99de:	d901      	bls.n	99e4 <SecAdd1+0x30>
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:112
			{
				*p=0;      //清时
    99e0:	2300      	movs	r3, #0
    99e2:	7003      	strb	r3, [r0, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:116
			}
		}
	}
}
    99e4:	4770      	bx	lr
	...

000099e8 <TPM1_IRQHandler>:
TPM1_IRQHandler():
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:48
{
    99e8:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:49
	DISABLE_INTERRUPTS;                        //关总中断
    99ea:	b672      	cpsid	i
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:55
	if(timer_get_int(TIMER_USER))
    99ec:	2001      	movs	r0, #1
    99ee:	f7ff fa51 	bl	8e94 <timer_get_int>
    99f2:	2800      	cmp	r0, #0
    99f4:	d009      	beq.n	9a0a <TPM1_IRQHandler+0x22>
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:57
		TimerCount++;           //计数器累加
    99f6:	4a09      	ldr	r2, [pc, #36]	; (9a1c <TPM1_IRQHandler+0x34>)
    99f8:	7813      	ldrb	r3, [r2, #0]
    99fa:	3301      	adds	r3, #1
    99fc:	b2db      	uxtb	r3, r3
    99fe:	7013      	strb	r3, [r2, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:58
		if (TimerCount >= 50)
    9a00:	2b31      	cmp	r3, #49	; 0x31
    9a02:	d804      	bhi.n	9a0e <TPM1_IRQHandler+0x26>
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:63
		timer_clear_int(TIMER_USER);    //清时钟溢出标志位
    9a04:	2001      	movs	r0, #1
    9a06:	f7ff fa63 	bl	8ed0 <timer_clear_int>
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:66
	ENABLE_INTERRUPTS;                        //开总中断
    9a0a:	b662      	cpsie	i
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:67
}
    9a0c:	bd10      	pop	{r4, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:60
			TimerCount = 0;    //时钟计数器清零
    9a0e:	0013      	movs	r3, r2
    9a10:	2200      	movs	r2, #0
    9a12:	701a      	strb	r2, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/isr.c:61
			SecAdd1(gTime);    //时间显示累加
    9a14:	4802      	ldr	r0, [pc, #8]	; (9a20 <TPM1_IRQHandler+0x38>)
    9a16:	f7ff ffcd 	bl	99b4 <SecAdd1>
    9a1a:	e7f3      	b.n	9a04 <TPM1_IRQHandler+0x1c>
    9a1c:	200004a4 	.word	0x200004a4
    9a20:	200004b4 	.word	0x200004b4

00009a24 <printk_putc>:
printk_putc():
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:26
//功能概要：通过串口打出一个字符
//参数说明：data:数据：通过串口发送的一字节数据
//函数返回：无
//======================================================================
static void printk_putc(int c, int *count, PRINTK_INFO *info)
{
    9a24:	b510      	push	{r4, lr}
    9a26:	000c      	movs	r4, r1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:27
	switch (info->dest) {
    9a28:	6813      	ldr	r3, [r2, #0]
    9a2a:	2b01      	cmp	r3, #1
    9a2c:	d005      	beq.n	9a3a <printk_putc+0x16>
    9a2e:	2b02      	cmp	r3, #2
    9a30:	d007      	beq.n	9a42 <printk_putc+0x1e>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:38
		++(info->loc);
		break;
	default:
		break;
	}
	*count += 1;
    9a32:	6823      	ldr	r3, [r4, #0]
    9a34:	3301      	adds	r3, #1
    9a36:	6023      	str	r3, [r4, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:39
}
    9a38:	bd10      	pop	{r4, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:29
		info->func((char) c);
    9a3a:	6853      	ldr	r3, [r2, #4]
    9a3c:	b240      	sxtb	r0, r0
    9a3e:	4798      	blx	r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:30
		break;
    9a40:	e7f7      	b.n	9a32 <printk_putc+0xe>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:32
		*(info->loc) = (unsigned char) c;
    9a42:	6893      	ldr	r3, [r2, #8]
    9a44:	7018      	strb	r0, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:33
		++(info->loc);
    9a46:	6893      	ldr	r3, [r2, #8]
    9a48:	3301      	adds	r3, #1
    9a4a:	6093      	str	r3, [r2, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:34
		break;
    9a4c:	e7f1      	b.n	9a32 <printk_putc+0xe>

00009a4e <printk_mknumstr>:
printk_mknumstr():
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:126
//       neg:有无符号:判断数据时有符号还是无符号整形
//       radix:格式选择:确定输出格式例如：十进制或十六进制...
//函数返回：无
//======================================================================
static int printk_mknumstr(char *numstr, void *nump, int neg, int radix)
{
    9a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a50:	b083      	sub	sp, #12
    9a52:	0016      	movs	r6, r2
    9a54:	001d      	movs	r5, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:134
	int nlen;
	char *nstrp;

	nlen = 0;
	nstrp = numstr;
	*nstrp++ = '\0';
    9a56:	1c47      	adds	r7, r0, #1
    9a58:	2300      	movs	r3, #0
    9a5a:	7003      	strb	r3, [r0, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:136

	if (neg) {
    9a5c:	2a00      	cmp	r2, #0
    9a5e:	d01f      	beq.n	9aa0 <printk_mknumstr+0x52>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:137
		a = *(int *) nump;
    9a60:	680c      	ldr	r4, [r1, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:138
		if (a == 0) {
    9a62:	2c00      	cmp	r4, #0
    9a64:	d001      	beq.n	9a6a <printk_mknumstr+0x1c>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:132
	nlen = 0;
    9a66:	2600      	movs	r6, #0
    9a68:	e00b      	b.n	9a82 <printk_mknumstr+0x34>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:139
			*nstrp = '0';
    9a6a:	3330      	adds	r3, #48	; 0x30
    9a6c:	7043      	strb	r3, [r0, #1]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:140
			++nlen;
    9a6e:	2601      	movs	r6, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:176
			*nstrp++ = (char) uc;
			++nlen;
		}
	}
	done: return nlen;
}
    9a70:	0030      	movs	r0, r6
    9a72:	b003      	add	sp, #12
    9a74:	bdf0      	pop	{r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:147
				c = ~c + 1 + '0';
    9a76:	2330      	movs	r3, #48	; 0x30
    9a78:	1a59      	subs	r1, r3, r1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:152
			*nstrp++ = (char) c;
    9a7a:	7039      	strb	r1, [r7, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:153
			++nlen;
    9a7c:	3601      	adds	r6, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:152
			*nstrp++ = (char) c;
    9a7e:	3701      	adds	r7, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:151
			a = b;
    9a80:	9c01      	ldr	r4, [sp, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:143
		while (a != 0) {
    9a82:	2c00      	cmp	r4, #0
    9a84:	d0f4      	beq.n	9a70 <printk_mknumstr+0x22>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:144
			b = (int) a / (int) radix;
    9a86:	0029      	movs	r1, r5
    9a88:	0020      	movs	r0, r4
    9a8a:	f7fd f997 	bl	6dbc <__divsi3>
    9a8e:	9001      	str	r0, [sp, #4]
    9a90:	0029      	movs	r1, r5
    9a92:	0020      	movs	r0, r4
    9a94:	f7fd fa78 	bl	6f88 <__aeabi_idivmod>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:146
			if (c < 0) {
    9a98:	2900      	cmp	r1, #0
    9a9a:	dbec      	blt.n	9a76 <printk_mknumstr+0x28>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:149
				c = c + '0';
    9a9c:	3130      	adds	r1, #48	; 0x30
    9a9e:	e7ec      	b.n	9a7a <printk_mknumstr+0x2c>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:156
		ua = *(unsigned int *) nump;
    9aa0:	680c      	ldr	r4, [r1, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:157
		if (ua == 0) {
    9aa2:	2c00      	cmp	r4, #0
    9aa4:	d108      	bne.n	9ab8 <printk_mknumstr+0x6a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:158
			*nstrp = '0';
    9aa6:	2330      	movs	r3, #48	; 0x30
    9aa8:	7043      	strb	r3, [r0, #1]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:159
			++nlen;
    9aaa:	2601      	movs	r6, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:160
			goto done;
    9aac:	e7e0      	b.n	9a70 <printk_mknumstr+0x22>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:168
				uc = uc - 10 + 'A';
    9aae:	3437      	adds	r4, #55	; 0x37
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:171
			*nstrp++ = (char) uc;
    9ab0:	703c      	strb	r4, [r7, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:172
			++nlen;
    9ab2:	3601      	adds	r6, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:171
			*nstrp++ = (char) uc;
    9ab4:	3701      	adds	r7, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:170
			ua = ub;
    9ab6:	0004      	movs	r4, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:162
		while (ua != 0) {
    9ab8:	2c00      	cmp	r4, #0
    9aba:	d0d9      	beq.n	9a70 <printk_mknumstr+0x22>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:163
			ub = (unsigned int) ua / (unsigned int) radix;
    9abc:	0029      	movs	r1, r5
    9abe:	0020      	movs	r0, r4
    9ac0:	f7fd f8f2 	bl	6ca8 <__udivsi3>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:164
			uc = (unsigned int) ua - ((unsigned int) ub * (unsigned int) radix);
    9ac4:	0003      	movs	r3, r0
    9ac6:	436b      	muls	r3, r5
    9ac8:	1ae4      	subs	r4, r4, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:165
			if (uc < 10) {
    9aca:	2c09      	cmp	r4, #9
    9acc:	d8ef      	bhi.n	9aae <printk_mknumstr+0x60>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:166
				uc = uc + '0';
    9ace:	3430      	adds	r4, #48	; 0x30
    9ad0:	e7ee      	b.n	9ab0 <printk_mknumstr+0x62>

00009ad2 <printk_pad_zero>:
printk_pad_zero():
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:179
/********************************************************************/
static void printk_pad_zero(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
    9ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ad4:	0004      	movs	r4, r0
    9ad6:	000d      	movs	r5, r1
    9ad8:	0017      	movs	r7, r2
    9ada:	001e      	movs	r6, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:182
	int i;

	for (i = curlen; i < field_width; i++) {
    9adc:	e005      	b.n	9aea <printk_pad_zero+0x18>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:183 (discriminator 3)
		printk_putc('0', count, info);
    9ade:	0032      	movs	r2, r6
    9ae0:	0039      	movs	r1, r7
    9ae2:	2030      	movs	r0, #48	; 0x30
    9ae4:	f7ff ff9e 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:182 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
    9ae8:	3401      	adds	r4, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:182 (discriminator 1)
    9aea:	42ac      	cmp	r4, r5
    9aec:	dbf7      	blt.n	9ade <printk_pad_zero+0xc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:185
	}
}
    9aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009af0 <printk_pad_space>:
printk_pad_space():
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:189

/********************************************************************/
static void printk_pad_space(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
    9af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9af2:	0004      	movs	r4, r0
    9af4:	000d      	movs	r5, r1
    9af6:	0017      	movs	r7, r2
    9af8:	001e      	movs	r6, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:192
	int i;

	for (i = curlen; i < field_width; i++) {
    9afa:	e005      	b.n	9b08 <printk_pad_space+0x18>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:193 (discriminator 3)
		printk_putc(' ', count, info);
    9afc:	0032      	movs	r2, r6
    9afe:	0039      	movs	r1, r7
    9b00:	2020      	movs	r0, #32
    9b02:	f7ff ff8f 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:192 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
    9b06:	3401      	adds	r4, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:192 (discriminator 1)
    9b08:	42ac      	cmp	r4, r5
    9b0a:	dbf7      	blt.n	9afc <printk_pad_space+0xc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:195
	}
}
    9b0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009b0e <out_char>:
out_char():
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:17
void out_char(char data) {
    9b0e:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:18
	uart_send1(UART_printf, data);
    9b10:	b2c1      	uxtb	r1, r0
    9b12:	2002      	movs	r0, #2
    9b14:	f7ff fe5c 	bl	97d0 <uart_send1>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:19
}
    9b18:	bd10      	pop	{r4, pc}
	...

00009b1c <printk_mkfloatstr>:
printk_mkfloatstr():
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:47
{
    9b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b1e:	46d6      	mov	lr, sl
    9b20:	464f      	mov	r7, r9
    9b22:	b580      	push	{r7, lr}
    9b24:	b09b      	sub	sp, #108	; 0x6c
    9b26:	0004      	movs	r4, r0
    9b28:	4689      	mov	r9, r1
    9b2a:	0015      	movs	r5, r2
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:48
	uint32_t p,i,j,k,a[5]={0},b[19]={0};
    9b2c:	2214      	movs	r2, #20
    9b2e:	2100      	movs	r1, #0
    9b30:	a815      	add	r0, sp, #84	; 0x54
    9b32:	f000 fce6 	bl	a502 <memset>
    9b36:	224c      	movs	r2, #76	; 0x4c
    9b38:	2100      	movs	r1, #0
    9b3a:	a802      	add	r0, sp, #8
    9b3c:	f000 fce1 	bl	a502 <memset>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:55
	p=(uint32_t)*f;//整数部分
    9b40:	6826      	ldr	r6, [r4, #0]
    9b42:	6867      	ldr	r7, [r4, #4]
    9b44:	0030      	movs	r0, r6
    9b46:	0039      	movs	r1, r7
    9b48:	f7fd fad4 	bl	70f4 <__aeabi_d2uiz>
    9b4c:	4682      	mov	sl, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:56
	tempf=(*f-p);
    9b4e:	f7ff f83f 	bl	8bd0 <__aeabi_ui2d>
    9b52:	0002      	movs	r2, r0
    9b54:	000b      	movs	r3, r1
    9b56:	0030      	movs	r0, r6
    9b58:	0039      	movs	r1, r7
    9b5a:	f7fe fcbb 	bl	84d4 <__aeabi_dsub>
    9b5e:	0006      	movs	r6, r0
    9b60:	000f      	movs	r7, r1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:57
	if(precision_width==0)
    9b62:	2d00      	cmp	r5, #0
    9b64:	d10e      	bne.n	9b84 <printk_mkfloatstr+0x68>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:58
	q=(*f-p)*100000000000000000;//小数部分
    9b66:	4a4b      	ldr	r2, [pc, #300]	; (9c94 <printk_mkfloatstr+0x178>)
    9b68:	4b4b      	ldr	r3, [pc, #300]	; (9c98 <printk_mkfloatstr+0x17c>)
    9b6a:	f7fe fa41 	bl	7ff0 <__aeabi_dmul>
    9b6e:	f7fd fadf 	bl	7130 <__aeabi_d2ulz>
    9b72:	0004      	movs	r4, r0
    9b74:	9101      	str	r1, [sp, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:66
	k=0;
    9b76:	2500      	movs	r5, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:67
	while(m<1)
    9b78:	e015      	b.n	9ba6 <printk_mkfloatstr+0x8a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:62
		tempf*=10;
    9b7a:	2200      	movs	r2, #0
    9b7c:	4b47      	ldr	r3, [pc, #284]	; (9c9c <printk_mkfloatstr+0x180>)
    9b7e:	f7fe fa37 	bl	7ff0 <__aeabi_dmul>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:61
		while(precision_width--)
    9b82:	0025      	movs	r5, r4
    9b84:	1e6c      	subs	r4, r5, #1
    9b86:	2d00      	cmp	r5, #0
    9b88:	d1f7      	bne.n	9b7a <printk_mkfloatstr+0x5e>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:63
		q=tempf;
    9b8a:	f7fd fad1 	bl	7130 <__aeabi_d2ulz>
    9b8e:	0004      	movs	r4, r0
    9b90:	9101      	str	r1, [sp, #4]
    9b92:	e7f0      	b.n	9b76 <printk_mkfloatstr+0x5a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:69
		m=m*10;
    9b94:	2200      	movs	r2, #0
    9b96:	4b41      	ldr	r3, [pc, #260]	; (9c9c <printk_mkfloatstr+0x180>)
    9b98:	0030      	movs	r0, r6
    9b9a:	0039      	movs	r1, r7
    9b9c:	f7fe fa28 	bl	7ff0 <__aeabi_dmul>
    9ba0:	0006      	movs	r6, r0
    9ba2:	000f      	movs	r7, r1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:70
		k++;
    9ba4:	3501      	adds	r5, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:67
	while(m<1)
    9ba6:	2200      	movs	r2, #0
    9ba8:	4b3d      	ldr	r3, [pc, #244]	; (9ca0 <printk_mkfloatstr+0x184>)
    9baa:	0030      	movs	r0, r6
    9bac:	0039      	movs	r1, r7
    9bae:	f7fd fa07 	bl	6fc0 <__aeabi_dcmplt>
    9bb2:	2800      	cmp	r0, #0
    9bb4:	d1ee      	bne.n	9b94 <printk_mkfloatstr+0x78>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:72
	k--;          //记录小数点后到第一位不为零的小数之前 有多少个0.
    9bb6:	1e6f      	subs	r7, r5, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:75
	if(0==p)     //整数部分为0
    9bb8:	4653      	mov	r3, sl
    9bba:	2b00      	cmp	r3, #0
    9bbc:	d121      	bne.n	9c02 <printk_mkfloatstr+0xe6>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:76
		c[i++]='0';
    9bbe:	3330      	adds	r3, #48	; 0x30
    9bc0:	464a      	mov	r2, r9
    9bc2:	7013      	strb	r3, [r2, #0]
    9bc4:	3b2f      	subs	r3, #47	; 0x2f
    9bc6:	469a      	mov	sl, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:91
	c[i++]='.';     //小数点
    9bc8:	4653      	mov	r3, sl
    9bca:	1c5d      	adds	r5, r3, #1
    9bcc:	232e      	movs	r3, #46	; 0x2e
    9bce:	464a      	mov	r2, r9
    9bd0:	4651      	mov	r1, sl
    9bd2:	5453      	strb	r3, [r2, r1]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:92
	if(0==q)        //小数部分为0
    9bd4:	9b01      	ldr	r3, [sp, #4]
    9bd6:	4323      	orrs	r3, r4
    9bd8:	d023      	beq.n	9c22 <printk_mkfloatstr+0x106>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:96
		j=0;
    9bda:	2600      	movs	r6, #0
    9bdc:	e039      	b.n	9c52 <printk_mkfloatstr+0x136>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:82
			a[j++]=p%10;
    9bde:	1c75      	adds	r5, r6, #1
    9be0:	210a      	movs	r1, #10
    9be2:	4650      	mov	r0, sl
    9be4:	f7fd f8e6 	bl	6db4 <__aeabi_uidivmod>
    9be8:	00b6      	lsls	r6, r6, #2
    9bea:	ab15      	add	r3, sp, #84	; 0x54
    9bec:	50f1      	str	r1, [r6, r3]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:83
			p/=10;
    9bee:	210a      	movs	r1, #10
    9bf0:	4650      	mov	r0, sl
    9bf2:	f7fd f859 	bl	6ca8 <__udivsi3>
    9bf6:	4682      	mov	sl, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:82
			a[j++]=p%10;
    9bf8:	002e      	movs	r6, r5
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:80
		while(p!=0)//倒序的数字
    9bfa:	4653      	mov	r3, sl
    9bfc:	2b00      	cmp	r3, #0
    9bfe:	d1ee      	bne.n	9bde <printk_mkfloatstr+0xc2>
    9c00:	e00c      	b.n	9c1c <printk_mkfloatstr+0x100>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:79
		j=0;
    9c02:	2600      	movs	r6, #0
    9c04:	e7f9      	b.n	9bfa <printk_mkfloatstr+0xde>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:87
			c[i++]=a[j-1]+'0';
    9c06:	3e01      	subs	r6, #1
    9c08:	00b2      	lsls	r2, r6, #2
    9c0a:	ab15      	add	r3, sp, #84	; 0x54
    9c0c:	58d3      	ldr	r3, [r2, r3]
    9c0e:	3330      	adds	r3, #48	; 0x30
    9c10:	464a      	mov	r2, r9
    9c12:	4651      	mov	r1, sl
    9c14:	5453      	strb	r3, [r2, r1]
    9c16:	2301      	movs	r3, #1
    9c18:	469c      	mov	ip, r3
    9c1a:	44e2      	add	sl, ip
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:85
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
    9c1c:	2e00      	cmp	r6, #0
    9c1e:	d1f2      	bne.n	9c06 <printk_mkfloatstr+0xea>
    9c20:	e7d2      	b.n	9bc8 <printk_mkfloatstr+0xac>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:93
		c[i++]='0';
    9c22:	3330      	adds	r3, #48	; 0x30
    9c24:	5553      	strb	r3, [r2, r5]
    9c26:	3501      	adds	r5, #1
    9c28:	e02a      	b.n	9c80 <printk_mkfloatstr+0x164>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:100
			b[j++]=q%10;
    9c2a:	220a      	movs	r2, #10
    9c2c:	2300      	movs	r3, #0
    9c2e:	0020      	movs	r0, r4
    9c30:	9901      	ldr	r1, [sp, #4]
    9c32:	f7fd fa27 	bl	7084 <__aeabi_uldivmod>
    9c36:	1c73      	adds	r3, r6, #1
    9c38:	469a      	mov	sl, r3
    9c3a:	00b6      	lsls	r6, r6, #2
    9c3c:	ab02      	add	r3, sp, #8
    9c3e:	50f2      	str	r2, [r6, r3]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:101
			q/=10;
    9c40:	220a      	movs	r2, #10
    9c42:	2300      	movs	r3, #0
    9c44:	0020      	movs	r0, r4
    9c46:	9901      	ldr	r1, [sp, #4]
    9c48:	f7fd fa1c 	bl	7084 <__aeabi_uldivmod>
    9c4c:	0004      	movs	r4, r0
    9c4e:	9101      	str	r1, [sp, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:100
			b[j++]=q%10;
    9c50:	4656      	mov	r6, sl
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:98
		while(q!=0)//倒序的数字
    9c52:	9b01      	ldr	r3, [sp, #4]
    9c54:	4323      	orrs	r3, r4
    9c56:	d1e8      	bne.n	9c2a <printk_mkfloatstr+0x10e>
    9c58:	e005      	b.n	9c66 <printk_mkfloatstr+0x14a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:105
			b[j++]=0;
    9c5a:	00b3      	lsls	r3, r6, #2
    9c5c:	2200      	movs	r2, #0
    9c5e:	a902      	add	r1, sp, #8
    9c60:	505a      	str	r2, [r3, r1]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:106
			k--;
    9c62:	3f01      	subs	r7, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:105
			b[j++]=0;
    9c64:	3601      	adds	r6, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:103
		while(k!=0)
    9c66:	2f00      	cmp	r7, #0
    9c68:	d1f7      	bne.n	9c5a <printk_mkfloatstr+0x13e>
    9c6a:	e007      	b.n	9c7c <printk_mkfloatstr+0x160>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:110
			c[i++]=b[j-1]+'0';
    9c6c:	3e01      	subs	r6, #1
    9c6e:	00b3      	lsls	r3, r6, #2
    9c70:	aa02      	add	r2, sp, #8
    9c72:	589b      	ldr	r3, [r3, r2]
    9c74:	3330      	adds	r3, #48	; 0x30
    9c76:	464a      	mov	r2, r9
    9c78:	5553      	strb	r3, [r2, r5]
    9c7a:	3501      	adds	r5, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:108
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
    9c7c:	2e00      	cmp	r6, #0
    9c7e:	d1f5      	bne.n	9c6c <printk_mkfloatstr+0x150>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:114
	c[i]='\0';
    9c80:	464b      	mov	r3, r9
    9c82:	195b      	adds	r3, r3, r5
    9c84:	2200      	movs	r2, #0
    9c86:	701a      	strb	r2, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:116
}
    9c88:	0028      	movs	r0, r5
    9c8a:	b01b      	add	sp, #108	; 0x6c
    9c8c:	bc0c      	pop	{r2, r3}
    9c8e:	4691      	mov	r9, r2
    9c90:	469a      	mov	sl, r3
    9c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9c94:	85d8a000 	.word	0x85d8a000
    9c98:	43763457 	.word	0x43763457
    9c9c:	40240000 	.word	0x40240000
    9ca0:	3ff00000 	.word	0x3ff00000

00009ca4 <printk>:
printk():
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:204
//       fmt:输出格式信息
//       ap:va_list指针指向格式信息输出
//函数返回：无
//======================================================================
int printk(PRINTK_INFO *info, const char *fmt, char * ap)
{
    9ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ca6:	46de      	mov	lr, fp
    9ca8:	4657      	mov	r7, sl
    9caa:	464e      	mov	r6, r9
    9cac:	4645      	mov	r5, r8
    9cae:	b5e0      	push	{r5, r6, r7, lr}
    9cb0:	b095      	sub	sp, #84	; 0x54
    9cb2:	9000      	str	r0, [sp, #0]
    9cb4:	000d      	movs	r5, r1
    9cb6:	4690      	mov	r8, r2
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:228

	}un1;*/
	char *p;
	int c;
	//char temp1;
	char vstr[33]={'0'};
    9cb8:	ac0b      	add	r4, sp, #44	; 0x2c
    9cba:	2221      	movs	r2, #33	; 0x21
    9cbc:	2100      	movs	r1, #0
    9cbe:	0020      	movs	r0, r4
    9cc0:	f000 fc1f 	bl	a502 <memset>
    9cc4:	2330      	movs	r3, #48	; 0x30
    9cc6:	7023      	strb	r3, [r4, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:249
	int *ivalp;
	char *sval;
	int cval;
	unsigned int uval;

	count = 0;
    9cc8:	2300      	movs	r3, #0
    9cca:	930a      	str	r3, [sp, #40]	; 0x28
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:251
	length_modifier=0;
	precision_used=TRUE;
    9ccc:	3301      	adds	r3, #1
    9cce:	9301      	str	r3, [sp, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:250
	length_modifier=0;
    9cd0:	2300      	movs	r3, #0
    9cd2:	469a      	mov	sl, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:253
	//从格式字符串第一个字符开始格式化输出数据
	for (p = (char *) fmt; (c = *p) != 0; p++)
    9cd4:	e00b      	b.n	9cee <printk+0x4a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:265
			if (c != '\n') {
				printk_putc(c, &count, info);
			}
			//输出换行符
			else {
				printk_putc(0x0D /* CR */, &count, info);
    9cd6:	9c00      	ldr	r4, [sp, #0]
    9cd8:	0022      	movs	r2, r4
    9cda:	a90a      	add	r1, sp, #40	; 0x28
    9cdc:	200d      	movs	r0, #13
    9cde:	f7ff fea1 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:266
				printk_putc(0x0A /* LF */, &count, info);
    9ce2:	0022      	movs	r2, r4
    9ce4:	a90a      	add	r1, sp, #40	; 0x28
    9ce6:	200a      	movs	r0, #10
    9ce8:	f7ff fe9c 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:253 (discriminator 2)
	for (p = (char *) fmt; (c = *p) != 0; p++)
    9cec:	3501      	adds	r5, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:253 (discriminator 1)
    9cee:	2000      	movs	r0, #0
    9cf0:	5628      	ldrsb	r0, [r5, r0]
    9cf2:	2800      	cmp	r0, #0
    9cf4:	d100      	bne.n	9cf8 <printk+0x54>
    9cf6:	e27c      	b.n	a1f2 <printk+0x54e>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:256
		if (c != '%')
    9cf8:	2825      	cmp	r0, #37	; 0x25
    9cfa:	d022      	beq.n	9d42 <printk+0x9e>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:260
			if (c != '\n') {
    9cfc:	280a      	cmp	r0, #10
    9cfe:	d0ea      	beq.n	9cd6 <printk+0x32>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:261
				printk_putc(c, &count, info);
    9d00:	9a00      	ldr	r2, [sp, #0]
    9d02:	a90a      	add	r1, sp, #40	; 0x28
    9d04:	f7ff fe8e 	bl	9a24 <printk_putc>
    9d08:	e7f0      	b.n	9cec <printk+0x48>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:283
		flags_used = 0;
		done = FALSE;
		while (!done) {
			switch (/* c = */*++p) {
			case '-':
				flags_used |= FLAGS_MINUS;
    9d0a:	2301      	movs	r3, #1
    9d0c:	431e      	orrs	r6, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:204
{
    9d0e:	0005      	movs	r5, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:280
		while (!done) {
    9d10:	2900      	cmp	r1, #0
    9d12:	d11b      	bne.n	9d4c <printk+0xa8>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:281
			switch (/* c = */*++p) {
    9d14:	1c68      	adds	r0, r5, #1
    9d16:	2301      	movs	r3, #1
    9d18:	56eb      	ldrsb	r3, [r5, r3]
    9d1a:	3b20      	subs	r3, #32
    9d1c:	b2da      	uxtb	r2, r3
    9d1e:	2a10      	cmp	r2, #16
    9d20:	d812      	bhi.n	9d48 <printk+0xa4>
    9d22:	0093      	lsls	r3, r2, #2
    9d24:	4abe      	ldr	r2, [pc, #760]	; (a020 <printk+0x37c>)
    9d26:	58d3      	ldr	r3, [r2, r3]
    9d28:	469f      	mov	pc, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:286
				break;
			case '+':
				flags_used |= FLAGS_PLUS;
    9d2a:	2302      	movs	r3, #2
    9d2c:	431e      	orrs	r6, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:287
				break;
    9d2e:	e7ee      	b.n	9d0e <printk+0x6a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:289
			case ' ':
				flags_used |= FLAGS_SPACE;
    9d30:	2304      	movs	r3, #4
    9d32:	431e      	orrs	r6, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:290
				break;
    9d34:	e7eb      	b.n	9d0e <printk+0x6a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:292
			case '0':
				flags_used |= FLAGS_ZERO;
    9d36:	2308      	movs	r3, #8
    9d38:	431e      	orrs	r6, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:293
				break;
    9d3a:	e7e8      	b.n	9d0e <printk+0x6a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:295
			case '#':
				flags_used |= FLAGS_POUND;
    9d3c:	2310      	movs	r3, #16
    9d3e:	431e      	orrs	r6, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:296
				break;
    9d40:	e7e5      	b.n	9d0e <printk+0x6a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:278
		flags_used = 0;
    9d42:	2600      	movs	r6, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:279
		done = FALSE;
    9d44:	2100      	movs	r1, #0
    9d46:	e7e3      	b.n	9d10 <printk+0x6c>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:300
			default:
				/* we've gone one char too far */
				--p;
				done = TRUE;
    9d48:	2101      	movs	r1, #1
    9d4a:	e7e1      	b.n	9d10 <printk+0x6c>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:307
			}
		}


		//检查%后再下一个字符 确定输出长度
		field_width = 0;
    9d4c:	2400      	movs	r4, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:308
		done = FALSE;
    9d4e:	2300      	movs	r3, #0
    9d50:	001f      	movs	r7, r3
    9d52:	e000      	b.n	9d56 <printk+0xb2>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:326
				field_width = (field_width * 10) + (c - '0');
				break;
			default:
				/* we've gone one char too far */
				--p;
				done = TRUE;
    9d54:	000f      	movs	r7, r1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:309
		while (!done) {
    9d56:	2f00      	cmp	r7, #0
    9d58:	d10e      	bne.n	9d78 <printk+0xd4>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:310
			switch (c = *++p) {
    9d5a:	1c68      	adds	r0, r5, #1
    9d5c:	2301      	movs	r3, #1
    9d5e:	56eb      	ldrsb	r3, [r5, r3]
    9d60:	001a      	movs	r2, r3
    9d62:	3a30      	subs	r2, #48	; 0x30
    9d64:	b2d2      	uxtb	r2, r2
    9d66:	2a09      	cmp	r2, #9
    9d68:	d8f4      	bhi.n	9d54 <printk+0xb0>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:321
				field_width = (field_width * 10) + (c - '0');
    9d6a:	00a2      	lsls	r2, r4, #2
    9d6c:	1912      	adds	r2, r2, r4
    9d6e:	0054      	lsls	r4, r2, #1
    9d70:	3b30      	subs	r3, #48	; 0x30
    9d72:	18e4      	adds	r4, r4, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:310
			switch (c = *++p) {
    9d74:	0005      	movs	r5, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:322
				break;
    9d76:	e7ee      	b.n	9d56 <printk+0xb2>
    9d78:	46bb      	mov	fp, r7
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:331
				break;
			}
		}
		//此时字符为%看是否有.输入
		if (/* (c = *++p) */*++p == '.') {
    9d7a:	1c6f      	adds	r7, r5, #1
    9d7c:	2301      	movs	r3, #1
    9d7e:	56eb      	ldrsb	r3, [r5, r3]
    9d80:	2b2e      	cmp	r3, #46	; 0x2e
    9d82:	d019      	beq.n	9db8 <printk+0x114>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:368
		} else {
			/* we've gone one char too far */
			--p;
#if 1
			precision_used = FALSE;
			precision_width = 0;
    9d84:	2300      	movs	r3, #0
    9d86:	4699      	mov	r9, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:367
			precision_used = FALSE;
    9d88:	9301      	str	r3, [sp, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:372
#endif
		}
		//判断 输出的是否有lf、LF等
		switch (/* c = */*++p) {
    9d8a:	1c6b      	adds	r3, r5, #1
    9d8c:	2201      	movs	r2, #1
    9d8e:	56aa      	ldrsb	r2, [r5, r2]
    9d90:	2a68      	cmp	r2, #104	; 0x68
    9d92:	d004      	beq.n	9d9e <printk+0xfa>
    9d94:	2a6c      	cmp	r2, #108	; 0x6c
    9d96:	d027      	beq.n	9de8 <printk+0x144>
    9d98:	2a4c      	cmp	r2, #76	; 0x4c
    9d9a:	d02a      	beq.n	9df2 <printk+0x14e>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:384
		case 'L':
			 length_modifier |= LENMOD_L;
			break;
		default:
			/* we've gone one char too far */
			--p;
    9d9c:	002b      	movs	r3, r5
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:389
			break;
		}

		//p为格式字符串的首地址
		switch (c = *++p) {
    9d9e:	1c5d      	adds	r5, r3, #1
    9da0:	2001      	movs	r0, #1
    9da2:	5618      	ldrsb	r0, [r3, r0]
    9da4:	0003      	movs	r3, r0
    9da6:	3b58      	subs	r3, #88	; 0x58
    9da8:	b2da      	uxtb	r2, r3
    9daa:	2a20      	cmp	r2, #32
    9dac:	d900      	bls.n	9db0 <printk+0x10c>
    9dae:	e218      	b.n	a1e2 <printk+0x53e>
    9db0:	0093      	lsls	r3, r2, #2
    9db2:	4a9c      	ldr	r2, [pc, #624]	; (a024 <printk+0x380>)
    9db4:	58d3      	ldr	r3, [r2, r3]
    9db6:	469f      	mov	pc, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:337
			precision_width = 0;
    9db8:	2300      	movs	r3, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:338
			done = FALSE;
    9dba:	2000      	movs	r0, #0
    9dbc:	e000      	b.n	9dc0 <printk+0x11c>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:359
					done = TRUE;
    9dbe:	4658      	mov	r0, fp
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:339
			while (!done) {
    9dc0:	2800      	cmp	r0, #0
    9dc2:	d10e      	bne.n	9de2 <printk+0x13e>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:340
				switch ( c = *++p) {
    9dc4:	1c7d      	adds	r5, r7, #1
    9dc6:	2201      	movs	r2, #1
    9dc8:	56ba      	ldrsb	r2, [r7, r2]
    9dca:	0011      	movs	r1, r2
    9dcc:	3930      	subs	r1, #48	; 0x30
    9dce:	b2c9      	uxtb	r1, r1
    9dd0:	2909      	cmp	r1, #9
    9dd2:	d8f4      	bhi.n	9dbe <printk+0x11a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:352
				precision_width = (precision_width * 10) +	(c - '0');
    9dd4:	0099      	lsls	r1, r3, #2
    9dd6:	18c9      	adds	r1, r1, r3
    9dd8:	004b      	lsls	r3, r1, #1
    9dda:	3a30      	subs	r2, #48	; 0x30
    9ddc:	189b      	adds	r3, r3, r2
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:340
				switch ( c = *++p) {
    9dde:	002f      	movs	r7, r5
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:355
					break;
    9de0:	e7ee      	b.n	9dc0 <printk+0x11c>
    9de2:	4699      	mov	r9, r3
    9de4:	003d      	movs	r5, r7
    9de6:	e7d0      	b.n	9d8a <printk+0xe6>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:377
			 length_modifier |= LENMOD_l;
    9de8:	2201      	movs	r2, #1
    9dea:	4651      	mov	r1, sl
    9dec:	4311      	orrs	r1, r2
    9dee:	468a      	mov	sl, r1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:378
			break;
    9df0:	e7d5      	b.n	9d9e <printk+0xfa>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:380
			 length_modifier |= LENMOD_L;
    9df2:	2202      	movs	r2, #2
    9df4:	4651      	mov	r1, sl
    9df6:	4311      	orrs	r1, r2
    9df8:	468a      	mov	sl, r1
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:381
			break;
    9dfa:	e7d0      	b.n	9d9e <printk+0xfa>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:394
		case 'd':
		case 'i':
			//此时ap为指向可变参数列表的第一个参数
			//返回当前参数，并将ap指向下一个参数
			ival = (int) va_arg(ap, int);  
    9dfc:	4643      	mov	r3, r8
    9dfe:	3304      	adds	r3, #4
    9e00:	9302      	str	r3, [sp, #8]
    9e02:	4643      	mov	r3, r8
    9e04:	681b      	ldr	r3, [r3, #0]
    9e06:	9309      	str	r3, [sp, #36]	; 0x24
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:396
			//将整型转换成字符型保存在vstr中，返回字符数vlen
			vlen = printk_mknumstr(vstr, &ival, TRUE, 10);
    9e08:	230a      	movs	r3, #10
    9e0a:	2201      	movs	r2, #1
    9e0c:	a909      	add	r1, sp, #36	; 0x24
    9e0e:	a80b      	add	r0, sp, #44	; 0x2c
    9e10:	f7ff fe1d 	bl	9a4e <printk_mknumstr>
    9e14:	4681      	mov	r9, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:398
			//指向转换后的最后一个字符
			vstrp = &vstr[vlen];  
    9e16:	af0b      	add	r7, sp, #44	; 0x2c
    9e18:	444f      	add	r7, r9
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:401

			//若参数小于0，添加'-'号，并将字符长度加1
			if (ival < 0) {
    9e1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9e1c:	2b00      	cmp	r3, #0
    9e1e:	db07      	blt.n	9e30 <printk+0x18c>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:407
				schar = '-';
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
    9e20:	07b3      	lsls	r3, r6, #30
    9e22:	d519      	bpl.n	9e58 <printk+0x1b4>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:409
					schar = '+';
					++vlen;
    9e24:	2301      	movs	r3, #1
    9e26:	469c      	mov	ip, r3
    9e28:	44e1      	add	r9, ip
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:408
					schar = '+';
    9e2a:	332a      	adds	r3, #42	; 0x2a
    9e2c:	4698      	mov	r8, r3
    9e2e:	e004      	b.n	9e3a <printk+0x196>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:403
				++vlen;
    9e30:	2301      	movs	r3, #1
    9e32:	469c      	mov	ip, r3
    9e34:	44e1      	add	r9, ip
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:402
				schar = '-';
    9e36:	332c      	adds	r3, #44	; 0x2c
    9e38:	4698      	mov	r8, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:424
			dschar = FALSE;

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
    9e3a:	0733      	lsls	r3, r6, #28
    9e3c:	d51c      	bpl.n	9e78 <printk+0x1d4>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:425
				if (schar)
    9e3e:	4643      	mov	r3, r8
    9e40:	2b00      	cmp	r3, #0
    9e42:	d113      	bne.n	9e6c <printk+0x1c8>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:428
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
    9e44:	9b00      	ldr	r3, [sp, #0]
    9e46:	aa0a      	add	r2, sp, #40	; 0x28
    9e48:	0021      	movs	r1, r4
    9e4a:	4648      	mov	r0, r9
    9e4c:	f7ff fe41 	bl	9ad2 <printk_pad_zero>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:429
				vlen = field_width;
    9e50:	46a1      	mov	r9, r4
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:394
			ival = (int) va_arg(ap, int);  
    9e52:	9b02      	ldr	r3, [sp, #8]
    9e54:	4698      	mov	r8, r3
    9e56:	e162      	b.n	a11e <printk+0x47a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:411
					if (IS_FLAG_SPACE(flags_used)) {
    9e58:	2304      	movs	r3, #4
    9e5a:	4033      	ands	r3, r6
    9e5c:	4698      	mov	r8, r3
    9e5e:	d0ec      	beq.n	9e3a <printk+0x196>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:413
						++vlen;
    9e60:	2301      	movs	r3, #1
    9e62:	469c      	mov	ip, r3
    9e64:	44e1      	add	r9, ip
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:412
						schar = ' ';
    9e66:	331f      	adds	r3, #31
    9e68:	4698      	mov	r8, r3
    9e6a:	e7e6      	b.n	9e3a <printk+0x196>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:426
					printk_putc(schar, &count, info);  //输出符号
    9e6c:	9a00      	ldr	r2, [sp, #0]
    9e6e:	a90a      	add	r1, sp, #40	; 0x28
    9e70:	4640      	mov	r0, r8
    9e72:	f7ff fdd7 	bl	9a24 <printk_putc>
    9e76:	e7e5      	b.n	9e44 <printk+0x1a0>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:431
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
    9e78:	07f3      	lsls	r3, r6, #31
    9e7a:	d505      	bpl.n	9e88 <printk+0x1e4>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:442
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
    9e7c:	4643      	mov	r3, r8
    9e7e:	2b00      	cmp	r3, #0
    9e80:	d116      	bne.n	9eb0 <printk+0x20c>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:394
			ival = (int) va_arg(ap, int);  
    9e82:	9b02      	ldr	r3, [sp, #8]
    9e84:	4698      	mov	r8, r3
    9e86:	e14a      	b.n	a11e <printk+0x47a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:432
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
    9e88:	9b00      	ldr	r3, [sp, #0]
    9e8a:	aa0a      	add	r2, sp, #40	; 0x28
    9e8c:	0021      	movs	r1, r4
    9e8e:	4648      	mov	r0, r9
    9e90:	f7ff fe2e 	bl	9af0 <printk_pad_space>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:434
					if (schar)
    9e94:	4643      	mov	r3, r8
    9e96:	2b00      	cmp	r3, #0
    9e98:	d102      	bne.n	9ea0 <printk+0x1fc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:394
			ival = (int) va_arg(ap, int);  
    9e9a:	9b02      	ldr	r3, [sp, #8]
    9e9c:	4698      	mov	r8, r3
    9e9e:	e13e      	b.n	a11e <printk+0x47a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:435
						printk_putc(schar, &count, info);
    9ea0:	9a00      	ldr	r2, [sp, #0]
    9ea2:	a90a      	add	r1, sp, #40	; 0x28
    9ea4:	4640      	mov	r0, r8
    9ea6:	f7ff fdbd 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:394
			ival = (int) va_arg(ap, int);  
    9eaa:	9b02      	ldr	r3, [sp, #8]
    9eac:	4698      	mov	r8, r3
    9eae:	e136      	b.n	a11e <printk+0x47a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:443
				printk_putc(schar, &count, info);
    9eb0:	9a00      	ldr	r2, [sp, #0]
    9eb2:	a90a      	add	r1, sp, #40	; 0x28
    9eb4:	4640      	mov	r0, r8
    9eb6:	f7ff fdb5 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:394
			ival = (int) va_arg(ap, int);  
    9eba:	9b02      	ldr	r3, [sp, #8]
    9ebc:	4698      	mov	r8, r3
    9ebe:	e12e      	b.n	a11e <printk+0x47a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:457
			//实际传入变参数 函数后 浮点数变为:0x6000000040091EB8 实际是将其转化为double型数据
			//但是顺序反了，我们要做的是将后四字节提前，然后把0x60移到紧接着前四个字节后的位置。
			
			//【20200816】  XSX，解决浮点数不优化问题
			ap=ap+4;
			fval= (double)va_arg(ap,double);
    9ec0:	230c      	movs	r3, #12
    9ec2:	4443      	add	r3, r8
    9ec4:	469b      	mov	fp, r3
    9ec6:	4643      	mov	r3, r8
    9ec8:	6859      	ldr	r1, [r3, #4]
    9eca:	689f      	ldr	r7, [r3, #8]
    9ecc:	9102      	str	r1, [sp, #8]
    9ece:	000a      	movs	r2, r1
    9ed0:	003b      	movs	r3, r7
    9ed2:	9206      	str	r2, [sp, #24]
    9ed4:	9307      	str	r3, [sp, #28]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:461
			
			//【20200816】  XSX，解决负数的浮点数输出问题
			//若参数小于0，添加'-'号，并将字符长度加1
			if (fval < 0) {
    9ed6:	2200      	movs	r2, #0
    9ed8:	2300      	movs	r3, #0
    9eda:	9802      	ldr	r0, [sp, #8]
    9edc:	0039      	movs	r1, r7
    9ede:	f7fd f86f 	bl	6fc0 <__aeabi_dcmplt>
    9ee2:	2800      	cmp	r0, #0
    9ee4:	d106      	bne.n	9ef4 <printk+0x250>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:468
				fval = -fval;				//负数取它的正数
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
    9ee6:	07b3      	lsls	r3, r6, #30
    9ee8:	d424      	bmi.n	9f34 <printk+0x290>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:472
					schar = '+';
					++vlen;
				} else {
					if (IS_FLAG_SPACE(flags_used)) {
    9eea:	2704      	movs	r7, #4
    9eec:	4037      	ands	r7, r6
    9eee:	d008      	beq.n	9f02 <printk+0x25e>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:473
						schar = ' ';
    9ef0:	2720      	movs	r7, #32
    9ef2:	e006      	b.n	9f02 <printk+0x25e>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:463
				fval = -fval;				//负数取它的正数
    9ef4:	9a02      	ldr	r2, [sp, #8]
    9ef6:	2180      	movs	r1, #128	; 0x80
    9ef8:	0609      	lsls	r1, r1, #24
    9efa:	187b      	adds	r3, r7, r1
    9efc:	9206      	str	r2, [sp, #24]
    9efe:	9307      	str	r3, [sp, #28]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:462
				schar = '-';
    9f00:	272d      	movs	r7, #45	; 0x2d
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:483
				}
			}
			dschar = FALSE;
			
			//确定是否使用小数点精度数值
			if(precision_used)
    9f02:	9b01      	ldr	r3, [sp, #4]
    9f04:	2b00      	cmp	r3, #0
    9f06:	d117      	bne.n	9f38 <printk+0x294>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:491
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);
				vstrp = &vstr[0];  //指向转换后的第一个字符
			}
			else
			{	//浮点型精度到小数点后8位
				if(length_modifier==0)   
    9f08:	4653      	mov	r3, sl
    9f0a:	2b00      	cmp	r3, #0
    9f0c:	d11b      	bne.n	9f46 <printk+0x2a2>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:493
				{	//将整型转换成字符型保存在vstr中，返回字符数vlen
					vlen = printk_mkfloatstr(&fval,vstr,8);
    9f0e:	2208      	movs	r2, #8
    9f10:	a90b      	add	r1, sp, #44	; 0x2c
    9f12:	a806      	add	r0, sp, #24
    9f14:	f7ff fe02 	bl	9b1c <printk_mkfloatstr>
    9f18:	9002      	str	r0, [sp, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:511
			

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
    9f1a:	0733      	lsls	r3, r6, #28
    9f1c:	d520      	bpl.n	9f60 <printk+0x2bc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:512
				if (schar)
    9f1e:	2f00      	cmp	r7, #0
    9f20:	d118      	bne.n	9f54 <printk+0x2b0>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:515
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
    9f22:	9b00      	ldr	r3, [sp, #0]
    9f24:	aa0a      	add	r2, sp, #40	; 0x28
    9f26:	0021      	movs	r1, r4
    9f28:	9802      	ldr	r0, [sp, #8]
    9f2a:	f7ff fdd2 	bl	9ad2 <printk_pad_zero>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:516
				vlen = field_width;
    9f2e:	9402      	str	r4, [sp, #8]
    9f30:	af0b      	add	r7, sp, #44	; 0x2c
    9f32:	e032      	b.n	9f9a <printk+0x2f6>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:469
					schar = '+';
    9f34:	272b      	movs	r7, #43	; 0x2b
    9f36:	e7e4      	b.n	9f02 <printk+0x25e>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:486
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);
    9f38:	464a      	mov	r2, r9
    9f3a:	a90b      	add	r1, sp, #44	; 0x2c
    9f3c:	a806      	add	r0, sp, #24
    9f3e:	f7ff fded 	bl	9b1c <printk_mkfloatstr>
    9f42:	9002      	str	r0, [sp, #8]
    9f44:	e7e9      	b.n	9f1a <printk+0x276>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:499
					vlen = printk_mkfloatstr(&fval,vstr,precision_width);
    9f46:	464a      	mov	r2, r9
    9f48:	a90b      	add	r1, sp, #44	; 0x2c
    9f4a:	a806      	add	r0, sp, #24
    9f4c:	f7ff fde6 	bl	9b1c <printk_mkfloatstr>
    9f50:	9002      	str	r0, [sp, #8]
    9f52:	e7e2      	b.n	9f1a <printk+0x276>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:513
					printk_putc(schar, &count, info);  //输出符号
    9f54:	9a00      	ldr	r2, [sp, #0]
    9f56:	a90a      	add	r1, sp, #40	; 0x28
    9f58:	0038      	movs	r0, r7
    9f5a:	f7ff fd63 	bl	9a24 <printk_putc>
    9f5e:	e7e0      	b.n	9f22 <printk+0x27e>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:518
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
    9f60:	07f3      	lsls	r3, r6, #31
    9f62:	d507      	bpl.n	9f74 <printk+0x2d0>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:529
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
    9f64:	2f00      	cmp	r7, #0
    9f66:	d0e3      	beq.n	9f30 <printk+0x28c>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:530
				printk_putc(schar, &count, info);
    9f68:	9a00      	ldr	r2, [sp, #0]
    9f6a:	a90a      	add	r1, sp, #40	; 0x28
    9f6c:	0038      	movs	r0, r7
    9f6e:	f7ff fd59 	bl	9a24 <printk_putc>
    9f72:	e7dd      	b.n	9f30 <printk+0x28c>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:519
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
    9f74:	9b00      	ldr	r3, [sp, #0]
    9f76:	aa0a      	add	r2, sp, #40	; 0x28
    9f78:	0021      	movs	r1, r4
    9f7a:	9802      	ldr	r0, [sp, #8]
    9f7c:	f7ff fdb8 	bl	9af0 <printk_pad_space>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:521
					if (schar)
    9f80:	2f00      	cmp	r7, #0
    9f82:	d0d5      	beq.n	9f30 <printk+0x28c>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:522
						printk_putc(schar, &count, info);
    9f84:	9a00      	ldr	r2, [sp, #0]
    9f86:	a90a      	add	r1, sp, #40	; 0x28
    9f88:	0038      	movs	r0, r7
    9f8a:	f7ff fd4b 	bl	9a24 <printk_putc>
    9f8e:	e7cf      	b.n	9f30 <printk+0x28c>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:533
			}
			while (*vstrp)
				printk_putc(*vstrp++, &count, info);
    9f90:	3701      	adds	r7, #1
    9f92:	9a00      	ldr	r2, [sp, #0]
    9f94:	a90a      	add	r1, sp, #40	; 0x28
    9f96:	f7ff fd45 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:532
			while (*vstrp)
    9f9a:	2000      	movs	r0, #0
    9f9c:	5638      	ldrsb	r0, [r7, r0]
    9f9e:	2800      	cmp	r0, #0
    9fa0:	d1f6      	bne.n	9f90 <printk+0x2ec>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:534
			if (IS_FLAG_MINUS(flags_used)) {
    9fa2:	07f3      	lsls	r3, r6, #31
    9fa4:	d401      	bmi.n	9faa <printk+0x306>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:457
			fval= (double)va_arg(ap,double);
    9fa6:	46d8      	mov	r8, fp
    9fa8:	e6a0      	b.n	9cec <printk+0x48>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:535
				printk_pad_space(vlen, field_width, &count, info);
    9faa:	9b00      	ldr	r3, [sp, #0]
    9fac:	aa0a      	add	r2, sp, #40	; 0x28
    9fae:	0021      	movs	r1, r4
    9fb0:	9802      	ldr	r0, [sp, #8]
    9fb2:	f7ff fd9d 	bl	9af0 <printk_pad_space>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:457
			fval= (double)va_arg(ap,double);
    9fb6:	46d8      	mov	r8, fp
    9fb8:	e698      	b.n	9cec <printk+0x48>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:541
			}
            break;
        //以下是16进制整形输出
		case 'x':
		case 'X':
			uval = (unsigned int) va_arg(ap, unsigned int);
    9fba:	4643      	mov	r3, r8
    9fbc:	3304      	adds	r3, #4
    9fbe:	9302      	str	r3, [sp, #8]
    9fc0:	4643      	mov	r3, r8
    9fc2:	681b      	ldr	r3, [r3, #0]
    9fc4:	9305      	str	r3, [sp, #20]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:542
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
    9fc6:	2310      	movs	r3, #16
    9fc8:	2200      	movs	r2, #0
    9fca:	a905      	add	r1, sp, #20
    9fcc:	a80b      	add	r0, sp, #44	; 0x2c
    9fce:	f7ff fd3e 	bl	9a4e <printk_mknumstr>
    9fd2:	4681      	mov	r9, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:543
			vstrp = &vstr[vlen];
    9fd4:	af0b      	add	r7, sp, #44	; 0x2c
    9fd6:	444f      	add	r7, r9
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:546

			dschar = FALSE;
			if (IS_FLAG_ZERO(flags_used)) {
    9fd8:	2308      	movs	r3, #8
    9fda:	4033      	ands	r3, r6
    9fdc:	4698      	mov	r8, r3
    9fde:	d023      	beq.n	a028 <printk+0x384>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:547
				if (IS_FLAG_POUND(flags_used)) {
    9fe0:	2310      	movs	r3, #16
    9fe2:	4033      	ands	r3, r6
    9fe4:	4698      	mov	r8, r3
    9fe6:	d10f      	bne.n	a008 <printk+0x364>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:553
					printk_putc('0', &count, info);
					printk_putc('x', &count, info);
					/*vlen += 2;*/
					dschar = TRUE;
				}
				printk_pad_zero(vlen, field_width, &count, info);
    9fe8:	9b00      	ldr	r3, [sp, #0]
    9fea:	aa0a      	add	r2, sp, #40	; 0x28
    9fec:	0021      	movs	r1, r4
    9fee:	4648      	mov	r0, r9
    9ff0:	f7ff fd6f 	bl	9ad2 <printk_pad_zero>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:554
				vlen = field_width;
    9ff4:	46a1      	mov	r9, r4
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:569
						dschar = TRUE;
					}
				}
			}

			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
    9ff6:	06f3      	lsls	r3, r6, #27
    9ff8:	d400      	bmi.n	9ffc <printk+0x358>
    9ffa:	e09e      	b.n	a13a <printk+0x496>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:569 (discriminator 1)
    9ffc:	4643      	mov	r3, r8
    9ffe:	2b00      	cmp	r3, #0
    a000:	d030      	beq.n	a064 <printk+0x3c0>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:541
			uval = (unsigned int) va_arg(ap, unsigned int);
    a002:	9b02      	ldr	r3, [sp, #8]
    a004:	4698      	mov	r8, r3
    a006:	e08a      	b.n	a11e <printk+0x47a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:548
					printk_putc('0', &count, info);
    a008:	9a00      	ldr	r2, [sp, #0]
    a00a:	a90a      	add	r1, sp, #40	; 0x28
    a00c:	2030      	movs	r0, #48	; 0x30
    a00e:	f7ff fd09 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:549
					printk_putc('x', &count, info);
    a012:	9a00      	ldr	r2, [sp, #0]
    a014:	a90a      	add	r1, sp, #40	; 0x28
    a016:	2078      	movs	r0, #120	; 0x78
    a018:	f7ff fd04 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:551
					dschar = TRUE;
    a01c:	46d8      	mov	r8, fp
    a01e:	e7e3      	b.n	9fe8 <printk+0x344>
    a020:	0000a9b4 	.word	0x0000a9b4
    a024:	0000a9f8 	.word	0x0000a9f8
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:556
				if (!IS_FLAG_MINUS(flags_used)) {
    a028:	07f3      	lsls	r3, r6, #31
    a02a:	d4e4      	bmi.n	9ff6 <printk+0x352>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:557
					if (IS_FLAG_POUND(flags_used)) {
    a02c:	2310      	movs	r3, #16
    a02e:	4033      	ands	r3, r6
    a030:	4698      	mov	r8, r3
    a032:	d002      	beq.n	a03a <printk+0x396>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:558
						vlen += 2;
    a034:	2302      	movs	r3, #2
    a036:	469c      	mov	ip, r3
    a038:	44e1      	add	r9, ip
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:560
					printk_pad_space(vlen, field_width, &count, info);
    a03a:	9b00      	ldr	r3, [sp, #0]
    a03c:	aa0a      	add	r2, sp, #40	; 0x28
    a03e:	0021      	movs	r1, r4
    a040:	4648      	mov	r0, r9
    a042:	f7ff fd55 	bl	9af0 <printk_pad_space>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:561
					if (IS_FLAG_POUND(flags_used)) {
    a046:	4643      	mov	r3, r8
    a048:	2b00      	cmp	r3, #0
    a04a:	d0d4      	beq.n	9ff6 <printk+0x352>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:562
						printk_putc('0', &count, info);
    a04c:	9a00      	ldr	r2, [sp, #0]
    a04e:	a90a      	add	r1, sp, #40	; 0x28
    a050:	2030      	movs	r0, #48	; 0x30
    a052:	f7ff fce7 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:563
						printk_putc('x', &count, info);
    a056:	9a00      	ldr	r2, [sp, #0]
    a058:	a90a      	add	r1, sp, #40	; 0x28
    a05a:	2078      	movs	r0, #120	; 0x78
    a05c:	f7ff fce2 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:564
						dschar = TRUE;
    a060:	46d8      	mov	r8, fp
    a062:	e7c8      	b.n	9ff6 <printk+0x352>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:570
				printk_putc('0', &count, info);
    a064:	9a00      	ldr	r2, [sp, #0]
    a066:	a90a      	add	r1, sp, #40	; 0x28
    a068:	2030      	movs	r0, #48	; 0x30
    a06a:	f7ff fcdb 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:571
				printk_putc('x', &count, info);
    a06e:	9a00      	ldr	r2, [sp, #0]
    a070:	a90a      	add	r1, sp, #40	; 0x28
    a072:	2078      	movs	r0, #120	; 0x78
    a074:	f7ff fcd6 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:572
				vlen += 2;
    a078:	2302      	movs	r3, #2
    a07a:	469c      	mov	ip, r3
    a07c:	44e1      	add	r9, ip
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:541
			uval = (unsigned int) va_arg(ap, unsigned int);
    a07e:	9b02      	ldr	r3, [sp, #8]
    a080:	4698      	mov	r8, r3
    a082:	e04c      	b.n	a11e <printk+0x47a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:577
			}
			goto cont_xd;
		//无符号以八进制表示的整数输出
		case 'o':
			uval = (unsigned int) va_arg(ap, unsigned int);
    a084:	4643      	mov	r3, r8
    a086:	1d1f      	adds	r7, r3, #4
    a088:	681b      	ldr	r3, [r3, #0]
    a08a:	9305      	str	r3, [sp, #20]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:578
			vlen = printk_mknumstr(vstr, &uval, FALSE, 8);
    a08c:	2308      	movs	r3, #8
    a08e:	2200      	movs	r2, #0
    a090:	a905      	add	r1, sp, #20
    a092:	a80b      	add	r0, sp, #44	; 0x2c
    a094:	f7ff fcdb 	bl	9a4e <printk_mknumstr>
    a098:	4681      	mov	r9, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:577
			uval = (unsigned int) va_arg(ap, unsigned int);
    a09a:	46b8      	mov	r8, r7
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:594
			goto cont_u;
		case 'u':
			uval = (unsigned int) va_arg(ap, unsigned int);
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);

			cont_u: vstrp = &vstr[vlen];
    a09c:	af0b      	add	r7, sp, #44	; 0x2c
    a09e:	444f      	add	r7, r9
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:596

			if (IS_FLAG_ZERO(flags_used)) {
    a0a0:	0733      	lsls	r3, r6, #28
    a0a2:	d42f      	bmi.n	a104 <printk+0x460>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:600
				printk_pad_zero(vlen, field_width, &count, info);
				vlen = field_width;
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
    a0a4:	07f3      	lsls	r3, r6, #31
    a0a6:	d43a      	bmi.n	a11e <printk+0x47a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:601
					printk_pad_space(vlen, field_width, &count, info);
    a0a8:	9b00      	ldr	r3, [sp, #0]
    a0aa:	aa0a      	add	r2, sp, #40	; 0x28
    a0ac:	0021      	movs	r1, r4
    a0ae:	4648      	mov	r0, r9
    a0b0:	f7ff fd1e 	bl	9af0 <printk_pad_space>
    a0b4:	e033      	b.n	a11e <printk+0x47a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:582
			uval = (unsigned int) va_arg(ap, unsigned int);
    a0b6:	4643      	mov	r3, r8
    a0b8:	1d1f      	adds	r7, r3, #4
    a0ba:	681b      	ldr	r3, [r3, #0]
    a0bc:	9305      	str	r3, [sp, #20]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:583
			vlen = printk_mknumstr(vstr, &uval, FALSE, 2);
    a0be:	2302      	movs	r3, #2
    a0c0:	2200      	movs	r2, #0
    a0c2:	a905      	add	r1, sp, #20
    a0c4:	a80b      	add	r0, sp, #44	; 0x2c
    a0c6:	f7ff fcc2 	bl	9a4e <printk_mknumstr>
    a0ca:	4681      	mov	r9, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:582
			uval = (unsigned int) va_arg(ap, unsigned int);
    a0cc:	46b8      	mov	r8, r7
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:584
			goto cont_u;
    a0ce:	e7e5      	b.n	a09c <printk+0x3f8>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:587
			uval = (unsigned int) va_arg(ap, void *);
    a0d0:	4643      	mov	r3, r8
    a0d2:	1d1f      	adds	r7, r3, #4
    a0d4:	681b      	ldr	r3, [r3, #0]
    a0d6:	9305      	str	r3, [sp, #20]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:588
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
    a0d8:	2310      	movs	r3, #16
    a0da:	2200      	movs	r2, #0
    a0dc:	a905      	add	r1, sp, #20
    a0de:	a80b      	add	r0, sp, #44	; 0x2c
    a0e0:	f7ff fcb5 	bl	9a4e <printk_mknumstr>
    a0e4:	4681      	mov	r9, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:587
			uval = (unsigned int) va_arg(ap, void *);
    a0e6:	46b8      	mov	r8, r7
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:589
			goto cont_u;
    a0e8:	e7d8      	b.n	a09c <printk+0x3f8>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:591
			uval = (unsigned int) va_arg(ap, unsigned int);
    a0ea:	4643      	mov	r3, r8
    a0ec:	1d1f      	adds	r7, r3, #4
    a0ee:	681b      	ldr	r3, [r3, #0]
    a0f0:	9305      	str	r3, [sp, #20]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:592
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);
    a0f2:	230a      	movs	r3, #10
    a0f4:	2200      	movs	r2, #0
    a0f6:	a905      	add	r1, sp, #20
    a0f8:	a80b      	add	r0, sp, #44	; 0x2c
    a0fa:	f7ff fca8 	bl	9a4e <printk_mknumstr>
    a0fe:	4681      	mov	r9, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:591
			uval = (unsigned int) va_arg(ap, unsigned int);
    a100:	46b8      	mov	r8, r7
    a102:	e7cb      	b.n	a09c <printk+0x3f8>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:597
				printk_pad_zero(vlen, field_width, &count, info);
    a104:	9b00      	ldr	r3, [sp, #0]
    a106:	aa0a      	add	r2, sp, #40	; 0x28
    a108:	0021      	movs	r1, r4
    a10a:	4648      	mov	r0, r9
    a10c:	f7ff fce1 	bl	9ad2 <printk_pad_zero>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:598
				vlen = field_width;
    a110:	46a1      	mov	r9, r4
    a112:	e004      	b.n	a11e <printk+0x47a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:606
				}
			}

			cont_xd: while (*vstrp)
				printk_putc(*vstrp--, &count, info);
    a114:	3f01      	subs	r7, #1
    a116:	9a00      	ldr	r2, [sp, #0]
    a118:	a90a      	add	r1, sp, #40	; 0x28
    a11a:	f7ff fc83 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:605 (discriminator 1)
			cont_xd: while (*vstrp)
    a11e:	2000      	movs	r0, #0
    a120:	5638      	ldrsb	r0, [r7, r0]
    a122:	2800      	cmp	r0, #0
    a124:	d1f6      	bne.n	a114 <printk+0x470>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:608

			if (IS_FLAG_MINUS(flags_used)) {
    a126:	07f3      	lsls	r3, r6, #31
    a128:	d400      	bmi.n	a12c <printk+0x488>
    a12a:	e5df      	b.n	9cec <printk+0x48>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:609
				printk_pad_space(vlen, field_width, &count, info);
    a12c:	9b00      	ldr	r3, [sp, #0]
    a12e:	aa0a      	add	r2, sp, #40	; 0x28
    a130:	0021      	movs	r1, r4
    a132:	4648      	mov	r0, r9
    a134:	f7ff fcdc 	bl	9af0 <printk_pad_space>
    a138:	e5d8      	b.n	9cec <printk+0x48>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:541
			uval = (unsigned int) va_arg(ap, unsigned int);
    a13a:	9b02      	ldr	r3, [sp, #8]
    a13c:	4698      	mov	r8, r3
    a13e:	e7ee      	b.n	a11e <printk+0x47a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:615
			}

			break;
        //字符型输出
		case 'c':
			cval = (char) va_arg(ap, unsigned int);
    a140:	4643      	mov	r3, r8
    a142:	1d1c      	adds	r4, r3, #4
    a144:	2000      	movs	r0, #0
    a146:	5618      	ldrsb	r0, [r3, r0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:616
			printk_putc(cval, &count, info);
    a148:	9a00      	ldr	r2, [sp, #0]
    a14a:	a90a      	add	r1, sp, #40	; 0x28
    a14c:	f7ff fc6a 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:615
			cval = (char) va_arg(ap, unsigned int);
    a150:	46a0      	mov	r8, r4
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:617
			break;
    a152:	e5cb      	b.n	9cec <printk+0x48>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:619
		case 's':
			sval = (char *) va_arg(ap, char *);
    a154:	4643      	mov	r3, r8
    a156:	3304      	adds	r3, #4
    a158:	9302      	str	r3, [sp, #8]
    a15a:	4643      	mov	r3, r8
    a15c:	681f      	ldr	r7, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:620
			if (sval) {
    a15e:	2f00      	cmp	r7, #0
    a160:	d044      	beq.n	a1ec <printk+0x548>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:621
				vlen = strlen(sval);
    a162:	0038      	movs	r0, r7
    a164:	f7fe fd90 	bl	8c88 <strlen>
    a168:	9003      	str	r0, [sp, #12]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:622
				if (!IS_FLAG_MINUS(flags_used)) {
    a16a:	2301      	movs	r3, #1
    a16c:	401e      	ands	r6, r3
    a16e:	d013      	beq.n	a198 <printk+0x4f4>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:625
					printk_pad_space(vlen, field_width, &count, info);
				}
				if(precision_width!=0)
    a170:	464b      	mov	r3, r9
    a172:	2b00      	cmp	r3, #0
    a174:	d01b      	beq.n	a1ae <printk+0x50a>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:627
				{
					while (*sval)
    a176:	2000      	movs	r0, #0
    a178:	5638      	ldrsb	r0, [r7, r0]
    a17a:	2800      	cmp	r0, #0
    a17c:	d01b      	beq.n	a1b6 <printk+0x512>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:629
					{
						if(precision_width>=1)
    a17e:	464b      	mov	r3, r9
    a180:	2b00      	cmp	r3, #0
    a182:	ddf8      	ble.n	a176 <printk+0x4d2>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:631
						{
							precision_width--;
    a184:	2301      	movs	r3, #1
    a186:	425b      	negs	r3, r3
    a188:	469c      	mov	ip, r3
    a18a:	44e1      	add	r9, ip
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:632
							printk_putc(*sval++, &count, info);
    a18c:	3701      	adds	r7, #1
    a18e:	9a00      	ldr	r2, [sp, #0]
    a190:	a90a      	add	r1, sp, #40	; 0x28
    a192:	f7ff fc47 	bl	9a24 <printk_putc>
    a196:	e7ee      	b.n	a176 <printk+0x4d2>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:623
					printk_pad_space(vlen, field_width, &count, info);
    a198:	9b00      	ldr	r3, [sp, #0]
    a19a:	aa0a      	add	r2, sp, #40	; 0x28
    a19c:	0021      	movs	r1, r4
    a19e:	f7ff fca7 	bl	9af0 <printk_pad_space>
    a1a2:	e7e5      	b.n	a170 <printk+0x4cc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:639
					}
				}
				else    //precision_width=0情况
				{
					while (*sval)
					   printk_putc(*sval++, &count, info);
    a1a4:	3701      	adds	r7, #1
    a1a6:	9a00      	ldr	r2, [sp, #0]
    a1a8:	a90a      	add	r1, sp, #40	; 0x28
    a1aa:	f7ff fc3b 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:638
					while (*sval)
    a1ae:	2000      	movs	r0, #0
    a1b0:	5638      	ldrsb	r0, [r7, r0]
    a1b2:	2800      	cmp	r0, #0
    a1b4:	d1f6      	bne.n	a1a4 <printk+0x500>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:641
				}
				if (IS_FLAG_MINUS(flags_used)) {
    a1b6:	2e00      	cmp	r6, #0
    a1b8:	d102      	bne.n	a1c0 <printk+0x51c>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:619
			sval = (char *) va_arg(ap, char *);
    a1ba:	9b02      	ldr	r3, [sp, #8]
    a1bc:	4698      	mov	r8, r3
    a1be:	e595      	b.n	9cec <printk+0x48>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:642
					printk_pad_space(vlen, field_width, &count, info);
    a1c0:	9b00      	ldr	r3, [sp, #0]
    a1c2:	aa0a      	add	r2, sp, #40	; 0x28
    a1c4:	0021      	movs	r1, r4
    a1c6:	9803      	ldr	r0, [sp, #12]
    a1c8:	f7ff fc92 	bl	9af0 <printk_pad_space>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:619
			sval = (char *) va_arg(ap, char *);
    a1cc:	9b02      	ldr	r3, [sp, #8]
    a1ce:	4698      	mov	r8, r3
    a1d0:	e58c      	b.n	9cec <printk+0x48>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:647
				}
			}
			break;
		case 'n':
			ivalp = (int *) va_arg(ap, int *);
    a1d2:	4643      	mov	r3, r8
    a1d4:	681b      	ldr	r3, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:648
			*ivalp = count;
    a1d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a1d8:	601a      	str	r2, [r3, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:647
			ivalp = (int *) va_arg(ap, int *);
    a1da:	2304      	movs	r3, #4
    a1dc:	469c      	mov	ip, r3
    a1de:	44e0      	add	r8, ip
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:649
			break;
    a1e0:	e584      	b.n	9cec <printk+0x48>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:652

		default:
			printk_putc(c, &count, info);
    a1e2:	9a00      	ldr	r2, [sp, #0]
    a1e4:	a90a      	add	r1, sp, #40	; 0x28
    a1e6:	f7ff fc1d 	bl	9a24 <printk_putc>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:653
			break;
    a1ea:	e57f      	b.n	9cec <printk+0x48>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:619
			sval = (char *) va_arg(ap, char *);
    a1ec:	9b02      	ldr	r3, [sp, #8]
    a1ee:	4698      	mov	r8, r3
    a1f0:	e57c      	b.n	9cec <printk+0x48>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:657
		}
	}
	return count;
}
    a1f2:	980a      	ldr	r0, [sp, #40]	; 0x28
    a1f4:	b015      	add	sp, #84	; 0x54
    a1f6:	bc3c      	pop	{r2, r3, r4, r5}
    a1f8:	4690      	mov	r8, r2
    a1fa:	4699      	mov	r9, r3
    a1fc:	46a2      	mov	sl, r4
    a1fe:	46ab      	mov	fp, r5
    a200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a202:	46c0      	nop			; (mov r8, r8)

0000a204 <myprintf>:
myprintf():
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:665
//参数说明：const char *:打印参数字符串：对输入的字符串进行解析并按格式输出
//       例如： printf("c=%c\n",c); 将c按char型进行输出
//函数返回：字符串长度
//======================================================================
int myprintf(const char *fmt, ...)
{
    a204:	b40f      	push	{r0, r1, r2, r3}
    a206:	b500      	push	{lr}
    a208:	b085      	sub	sp, #20
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:669
	char * ap;
	int rvalue;
	PRINTK_INFO info;
	info.dest = DEST_CONSOLE;  //宏定义为1
    a20a:	2301      	movs	r3, #1
    a20c:	9301      	str	r3, [sp, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:670
	info.func = &out_char;     //调用的串口输出函数
    a20e:	4b05      	ldr	r3, [pc, #20]	; (a224 <myprintf+0x20>)
    a210:	9302      	str	r3, [sp, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:673
	//对ap 进行初始化，让它指向可变参数表里面的第一个参数
	va_start(ap, fmt); 
	rvalue = printk(&info, fmt, ap);
    a212:	aa06      	add	r2, sp, #24
    a214:	ca02      	ldmia	r2!, {r1}
    a216:	a801      	add	r0, sp, #4
    a218:	f7ff fd44 	bl	9ca4 <printk>
D:\app_for_qianrushi\exam\29\Debug/srcc/printf.c:678

	va_end(ap);

	return rvalue;
}
    a21c:	b005      	add	sp, #20
    a21e:	bc08      	pop	{r3}
    a220:	b004      	add	sp, #16
    a222:	4718      	bx	r3
    a224:	00009b0f 	.word	0x00009b0f

0000a228 <tpm_mux_val>:
tpm_mux_val():
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:147
//=====================================================================
static uint8_t tpm_mux_val(uint16_t capNo,uint8_t* TPM_i,uint8_t* chl)
{
    uint8_t port,pin;
    //1.解析模块号和通道号
    switch(capNo)
    a228:	4b22      	ldr	r3, [pc, #136]	; (a2b4 <tpm_mux_val+0x8c>)
    a22a:	4298      	cmp	r0, r3
    a22c:	d027      	beq.n	a27e <tpm_mux_val+0x56>
    a22e:	d90e      	bls.n	a24e <tpm_mux_val+0x26>
    a230:	23c1      	movs	r3, #193	; 0xc1
    a232:	009b      	lsls	r3, r3, #2
    a234:	4298      	cmp	r0, r3
    a236:	d027      	beq.n	a288 <tpm_mux_val+0x60>
    a238:	4b1f      	ldr	r3, [pc, #124]	; (a2b8 <tpm_mux_val+0x90>)
    a23a:	4298      	cmp	r0, r3
    a23c:	d029      	beq.n	a292 <tpm_mux_val+0x6a>
    a23e:	4b1f      	ldr	r3, [pc, #124]	; (a2bc <tpm_mux_val+0x94>)
    a240:	4298      	cmp	r0, r3
    a242:	d112      	bne.n	a26a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:152
    {
        case ((2<<8)|1):*TPM_i =0;*chl=0;break;
        case ((2<<8)|2):*TPM_i =0;*chl=1;break;
        case ((2<<8)|3):*TPM_i =0;*chl=2;break;
        case ((3<<8)|3):*TPM_i =0;*chl=3;break;
    a244:	2300      	movs	r3, #0
    a246:	700b      	strb	r3, [r1, #0]
    a248:	3303      	adds	r3, #3
    a24a:	7013      	strb	r3, [r2, #0]
    a24c:	e00d      	b.n	a26a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:147
    switch(capNo)
    a24e:	4b1c      	ldr	r3, [pc, #112]	; (a2c0 <tpm_mux_val+0x98>)
    a250:	4298      	cmp	r0, r3
    a252:	d007      	beq.n	a264 <tpm_mux_val+0x3c>
    a254:	4b1b      	ldr	r3, [pc, #108]	; (a2c4 <tpm_mux_val+0x9c>)
    a256:	4298      	cmp	r0, r3
    a258:	d107      	bne.n	a26a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:150
        case ((2<<8)|2):*TPM_i =0;*chl=1;break;
    a25a:	2300      	movs	r3, #0
    a25c:	700b      	strb	r3, [r1, #0]
    a25e:	3301      	adds	r3, #1
    a260:	7013      	strb	r3, [r2, #0]
    a262:	e002      	b.n	a26a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:149
        case ((2<<8)|1):*TPM_i =0;*chl=0;break;
    a264:	2300      	movs	r3, #0
    a266:	700b      	strb	r3, [r1, #0]
    a268:	7013      	strb	r3, [r2, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:158
        case ((3<<8)|4):*TPM_i =0;*chl=4;break;
        case ((3<<8)|5):*TPM_i =0;*chl=5;break;
        default:break;
    }
    //2.解析引脚复用寄存器传入值
    port = (capNo>>8);
    a26a:	0a03      	lsrs	r3, r0, #8
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:159
    pin = capNo;
    a26c:	b2c0      	uxtb	r0, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:160
    if(port<2 || port==4 || (port==2 && (pin==8||pin==9) ))
    a26e:	2b01      	cmp	r3, #1
    a270:	d91a      	bls.n	a2a8 <tpm_mux_val+0x80>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:160 (discriminator 1)
    a272:	2b04      	cmp	r3, #4
    a274:	d01a      	beq.n	a2ac <tpm_mux_val+0x84>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:160 (discriminator 2)
    a276:	2b02      	cmp	r3, #2
    a278:	d010      	beq.n	a29c <tpm_mux_val+0x74>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:163
        return 3;
    else
        return 4;
    a27a:	2004      	movs	r0, #4
    a27c:	e015      	b.n	a2aa <tpm_mux_val+0x82>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:151
        case ((2<<8)|3):*TPM_i =0;*chl=2;break;
    a27e:	2300      	movs	r3, #0
    a280:	700b      	strb	r3, [r1, #0]
    a282:	3302      	adds	r3, #2
    a284:	7013      	strb	r3, [r2, #0]
    a286:	e7f0      	b.n	a26a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:153
        case ((3<<8)|4):*TPM_i =0;*chl=4;break;
    a288:	2300      	movs	r3, #0
    a28a:	700b      	strb	r3, [r1, #0]
    a28c:	3304      	adds	r3, #4
    a28e:	7013      	strb	r3, [r2, #0]
    a290:	e7eb      	b.n	a26a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:154
        case ((3<<8)|5):*TPM_i =0;*chl=5;break;
    a292:	2300      	movs	r3, #0
    a294:	700b      	strb	r3, [r1, #0]
    a296:	3305      	adds	r3, #5
    a298:	7013      	strb	r3, [r2, #0]
    a29a:	e7e6      	b.n	a26a <tpm_mux_val+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:160 (discriminator 3)
    if(port<2 || port==4 || (port==2 && (pin==8||pin==9) ))
    a29c:	3808      	subs	r0, #8
    a29e:	b2c0      	uxtb	r0, r0
    a2a0:	2801      	cmp	r0, #1
    a2a2:	d905      	bls.n	a2b0 <tpm_mux_val+0x88>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:163
        return 4;
    a2a4:	2004      	movs	r0, #4
    a2a6:	e000      	b.n	a2aa <tpm_mux_val+0x82>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:161
        return 3;
    a2a8:	2003      	movs	r0, #3
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:164
}
    a2aa:	4770      	bx	lr
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:161
        return 3;
    a2ac:	2003      	movs	r0, #3
    a2ae:	e7fc      	b.n	a2aa <tpm_mux_val+0x82>
    a2b0:	2003      	movs	r0, #3
    a2b2:	e7fa      	b.n	a2aa <tpm_mux_val+0x82>
    a2b4:	00000203 	.word	0x00000203
    a2b8:	00000305 	.word	0x00000305
    a2bc:	00000303 	.word	0x00000303
    a2c0:	00000201 	.word	0x00000201
    a2c4:	00000202 	.word	0x00000202

0000a2c8 <tpm_timer_init2>:
tpm_timer_init2():
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:175
//        f：单位：Khz，取值：375、750、1500、3000、6000、12000、24000、48000
//        MOD_Value：单位：ms，范围取决于计数器频率与计数器位数（16位）
//函数返回： 无
//===================================================================
static void tpm_timer_init2(uint16_t TPM_i,uint32_t f,uint16_t MOD_Value)
{
    a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a2ca:	0015      	movs	r5, r2
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:179
    //局部变量声明
    uint32_t clk_f,clk_div;
    //（1）开启SIM时钟门
    BSET(SIM_SCGC6_TPM0_SHIFT+TPM_i,SIM_SCGC6);
    a2cc:	4b17      	ldr	r3, [pc, #92]	; (a32c <tpm_timer_init2+0x64>)
    a2ce:	4e18      	ldr	r6, [pc, #96]	; (a330 <tpm_timer_init2+0x68>)
    a2d0:	599a      	ldr	r2, [r3, r6]
    a2d2:	0007      	movs	r7, r0
    a2d4:	3718      	adds	r7, #24
    a2d6:	2401      	movs	r4, #1
    a2d8:	40bc      	lsls	r4, r7
    a2da:	4322      	orrs	r2, r4
    a2dc:	519a      	str	r2, [r3, r6]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:181
    //（2）开启时钟，默认选择用PLL/2时钟源，即48MHz
    SIM_SOPT2 |= SIM_SOPT2_TPMSRC(1);
    a2de:	4a15      	ldr	r2, [pc, #84]	; (a334 <tpm_timer_init2+0x6c>)
    a2e0:	589e      	ldr	r6, [r3, r2]
    a2e2:	2480      	movs	r4, #128	; 0x80
    a2e4:	0464      	lsls	r4, r4, #17
    a2e6:	4334      	orrs	r4, r6
    a2e8:	509c      	str	r4, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:182
    SIM_SOPT2 &= ~SIM_SOPT2_PLLFLLSEL_MASK;
    a2ea:	589c      	ldr	r4, [r3, r2]
    a2ec:	4e12      	ldr	r6, [pc, #72]	; (a338 <tpm_timer_init2+0x70>)
    a2ee:	4034      	ands	r4, r6
    a2f0:	509c      	str	r4, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:183
    TPM_ARR[TPM_i]->SC = 0;
    a2f2:	0080      	lsls	r0, r0, #2
    a2f4:	4b11      	ldr	r3, [pc, #68]	; (a33c <tpm_timer_init2+0x74>)
    a2f6:	58c4      	ldr	r4, [r0, r3]
    a2f8:	2300      	movs	r3, #0
    a2fa:	6023      	str	r3, [r4, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:186
    //（3） 由期望的时钟频率f，计算分频因子clk_div。因分频系数clk_f=48000/f,
    //则分频因子clk_div=sqrt(clk_f)。例如：f=3000Khz,则clk_f=16，clk_div=4
    clk_f=48000/f;
    a2fc:	4810      	ldr	r0, [pc, #64]	; (a340 <tpm_timer_init2+0x78>)
    a2fe:	f7fc fcd3 	bl	6ca8 <__udivsi3>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:187
    clk_div = 0;
    a302:	2300      	movs	r3, #0
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:188
    while(clk_f>1)
    a304:	e001      	b.n	a30a <tpm_timer_init2+0x42>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:190
    {
        clk_div++;
    a306:	3301      	adds	r3, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:191
        clk_f=clk_f/2;
    a308:	0840      	lsrs	r0, r0, #1
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:188
    while(clk_f>1)
    a30a:	2801      	cmp	r0, #1
    a30c:	d8fb      	bhi.n	a306 <tpm_timer_init2+0x3e>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:194
    }
    //（4） 计数器清零
    TPM_ARR[TPM_i]->CNT = 0;
    a30e:	2200      	movs	r2, #0
    a310:	6062      	str	r2, [r4, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:196
    //（5）设置模数寄存器
    if(MOD_Value == 0)
    a312:	2d00      	cmp	r5, #0
    a314:	d007      	beq.n	a326 <tpm_timer_init2+0x5e>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:202
    {
    	TPM_ARR[TPM_i]->MOD = 0;  //给模数寄存器赋值
    }
    else
    {
    	TPM_ARR[TPM_i]->MOD = MOD_Value - 1;  //给模数寄存器赋值
    a316:	3d01      	subs	r5, #1
    a318:	60a5      	str	r5, [r4, #8]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:205
    }
    //（6）写TPM_i的状态和控制寄存器
    TPM_ARR[TPM_i]->SC |= TPM_SC_PS(clk_div);
    a31a:	6822      	ldr	r2, [r4, #0]
    a31c:	2107      	movs	r1, #7
    a31e:	400b      	ands	r3, r1
    a320:	4313      	orrs	r3, r2
    a322:	6023      	str	r3, [r4, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:206
}
    a324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:198
    	TPM_ARR[TPM_i]->MOD = 0;  //给模数寄存器赋值
    a326:	60a2      	str	r2, [r4, #8]
    a328:	e7f7      	b.n	a31a <tpm_timer_init2+0x52>
    a32a:	46c0      	nop			; (mov r8, r8)
    a32c:	40047000 	.word	0x40047000
    a330:	0000103c 	.word	0x0000103c
    a334:	00001004 	.word	0x00001004
    a338:	fffeffff 	.word	0xfffeffff
    a33c:	0000aa90 	.word	0x0000aa90
    a340:	0000bb80 	.word	0x0000bb80

0000a344 <incapture_init>:
incapture_init():
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:35
{
    a344:	b5f0      	push	{r4, r5, r6, r7, lr}
    a346:	46c6      	mov	lr, r8
    a348:	b500      	push	{lr}
    a34a:	b084      	sub	sp, #16
    a34c:	9100      	str	r1, [sp, #0]
    a34e:	9201      	str	r2, [sp, #4]
    a350:	001e      	movs	r6, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:41
    port = (capNo>>8);     //解析出的端口
    a352:	0a03      	lsrs	r3, r0, #8
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:42
    pin = capNo;           //解析出的引脚号
    a354:	b2c7      	uxtb	r7, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:44
    port_ptr = PORT_ARR[port];  //获得PORT模块相应口基地址
    a356:	009b      	lsls	r3, r3, #2
    a358:	4a31      	ldr	r2, [pc, #196]	; (a420 <incapture_init+0xdc>)
    a35a:	589d      	ldr	r5, [r3, r2]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:46
    mux_val=tpm_mux_val(capNo,&TPM_i,&chl);
    a35c:	ab02      	add	r3, sp, #8
    a35e:	1ddc      	adds	r4, r3, #7
    a360:	1d9a      	adds	r2, r3, #6
    a362:	0021      	movs	r1, r4
    a364:	f7ff ff60 	bl	a228 <tpm_mux_val>
    a368:	4680      	mov	r8, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:48
    tpm_timer_init2(TPM_i,clockFre,period);
    a36a:	7820      	ldrb	r0, [r4, #0]
    a36c:	9a01      	ldr	r2, [sp, #4]
    a36e:	9900      	ldr	r1, [sp, #0]
    a370:	f7ff ffaa 	bl	a2c8 <tpm_timer_init2>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:50
    PORT_PCR_REG(port_ptr, pin) &= ~PORT_PCR_MUX(mux_val);
    a374:	00bb      	lsls	r3, r7, #2
    a376:	595a      	ldr	r2, [r3, r5]
    a378:	4641      	mov	r1, r8
    a37a:	0208      	lsls	r0, r1, #8
    a37c:	21e0      	movs	r1, #224	; 0xe0
    a37e:	00c9      	lsls	r1, r1, #3
    a380:	4008      	ands	r0, r1
    a382:	4382      	bics	r2, r0
    a384:	515a      	str	r2, [r3, r5]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:51
    PORT_PCR_REG(port_ptr, pin) |= PORT_PCR_MUX(mux_val);
    a386:	595a      	ldr	r2, [r3, r5]
    a388:	4310      	orrs	r0, r2
    a38a:	5158      	str	r0, [r3, r5]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:53
    if(capmode == CAP_UP)           //上升沿捕捉
    a38c:	2e00      	cmp	r6, #0
    a38e:	d012      	beq.n	a3b6 <incapture_init+0x72>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:55
    else if(capmode == CAP_DOWN)    //下降沿捕捉
    a390:	2e01      	cmp	r6, #1
    a392:	d036      	beq.n	a402 <incapture_init+0xbe>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:57
    else if(capmode == CAP_DOUBLE)  //双边沿捕捉
    a394:	2e02      	cmp	r6, #2
    a396:	d11c      	bne.n	a3d2 <incapture_init+0x8e>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:59
        TPM_CnSC_REG(TPM_ARR[TPM_i],chl) = TPM_CnSC_ELSA_MASK | TPM_CnSC_ELSB_MASK;
    a398:	ab02      	add	r3, sp, #8
    a39a:	3307      	adds	r3, #7
    a39c:	781b      	ldrb	r3, [r3, #0]
    a39e:	009b      	lsls	r3, r3, #2
    a3a0:	4a20      	ldr	r2, [pc, #128]	; (a424 <incapture_init+0xe0>)
    a3a2:	589a      	ldr	r2, [r3, r2]
    a3a4:	ab02      	add	r3, sp, #8
    a3a6:	3306      	adds	r3, #6
    a3a8:	781b      	ldrb	r3, [r3, #0]
    a3aa:	3301      	adds	r3, #1
    a3ac:	00db      	lsls	r3, r3, #3
    a3ae:	18d3      	adds	r3, r2, r3
    a3b0:	220c      	movs	r2, #12
    a3b2:	605a      	str	r2, [r3, #4]
    a3b4:	e00d      	b.n	a3d2 <incapture_init+0x8e>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:54
        TPM_CnSC_REG(TPM_ARR[TPM_i],chl) = TPM_CnSC_ELSA_MASK;
    a3b6:	ab02      	add	r3, sp, #8
    a3b8:	3307      	adds	r3, #7
    a3ba:	781b      	ldrb	r3, [r3, #0]
    a3bc:	009b      	lsls	r3, r3, #2
    a3be:	4a19      	ldr	r2, [pc, #100]	; (a424 <incapture_init+0xe0>)
    a3c0:	589a      	ldr	r2, [r3, r2]
    a3c2:	ab02      	add	r3, sp, #8
    a3c4:	3306      	adds	r3, #6
    a3c6:	781b      	ldrb	r3, [r3, #0]
    a3c8:	3301      	adds	r3, #1
    a3ca:	00db      	lsls	r3, r3, #3
    a3cc:	18d3      	adds	r3, r2, r3
    a3ce:	2204      	movs	r2, #4
    a3d0:	605a      	str	r2, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:62
    TPM_CnSC_REG(TPM_ARR[TPM_i],chl) |= TPM_CnSC_CHIE_MASK;
    a3d2:	ab02      	add	r3, sp, #8
    a3d4:	3307      	adds	r3, #7
    a3d6:	781b      	ldrb	r3, [r3, #0]
    a3d8:	009b      	lsls	r3, r3, #2
    a3da:	4a12      	ldr	r2, [pc, #72]	; (a424 <incapture_init+0xe0>)
    a3dc:	589a      	ldr	r2, [r3, r2]
    a3de:	ab02      	add	r3, sp, #8
    a3e0:	3306      	adds	r3, #6
    a3e2:	781b      	ldrb	r3, [r3, #0]
    a3e4:	3301      	adds	r3, #1
    a3e6:	00db      	lsls	r3, r3, #3
    a3e8:	18d3      	adds	r3, r2, r3
    a3ea:	6859      	ldr	r1, [r3, #4]
    a3ec:	2040      	movs	r0, #64	; 0x40
    a3ee:	4301      	orrs	r1, r0
    a3f0:	6059      	str	r1, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:63
    TPM_ARR[TPM_i]->SC |= TPM_SC_CMOD(1);
    a3f2:	6813      	ldr	r3, [r2, #0]
    a3f4:	2108      	movs	r1, #8
    a3f6:	430b      	orrs	r3, r1
    a3f8:	6013      	str	r3, [r2, #0]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:64
}
    a3fa:	b004      	add	sp, #16
    a3fc:	bc04      	pop	{r2}
    a3fe:	4690      	mov	r8, r2
    a400:	bdf0      	pop	{r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:56
        TPM_CnSC_REG(TPM_ARR[TPM_i],chl) = TPM_CnSC_ELSB_MASK;
    a402:	ab02      	add	r3, sp, #8
    a404:	3307      	adds	r3, #7
    a406:	781b      	ldrb	r3, [r3, #0]
    a408:	009b      	lsls	r3, r3, #2
    a40a:	4a06      	ldr	r2, [pc, #24]	; (a424 <incapture_init+0xe0>)
    a40c:	589a      	ldr	r2, [r3, r2]
    a40e:	ab02      	add	r3, sp, #8
    a410:	3306      	adds	r3, #6
    a412:	781b      	ldrb	r3, [r3, #0]
    a414:	3301      	adds	r3, #1
    a416:	00db      	lsls	r3, r3, #3
    a418:	18d3      	adds	r3, r2, r3
    a41a:	2208      	movs	r2, #8
    a41c:	605a      	str	r2, [r3, #4]
    a41e:	e7d8      	b.n	a3d2 <incapture_init+0x8e>
    a420:	0000aa7c 	.word	0x0000aa7c
    a424:	0000aa90 	.word	0x0000aa90

0000a428 <get_incapture_value>:
get_incapture_value():
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:73
{
    a428:	b530      	push	{r4, r5, lr}
    a42a:	b083      	sub	sp, #12
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:76
    tpm_mux_val(capNo,&TPM_i,&chl);   //解析tpm模块号和通道号
    a42c:	466b      	mov	r3, sp
    a42e:	1d9c      	adds	r4, r3, #6
    a430:	1ddd      	adds	r5, r3, #7
    a432:	0022      	movs	r2, r4
    a434:	0029      	movs	r1, r5
    a436:	f7ff fef7 	bl	a228 <tpm_mux_val>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:77
    cnt=TPM_CnV_REG(TPM_ARR[TPM_i],chl);
    a43a:	782b      	ldrb	r3, [r5, #0]
    a43c:	009b      	lsls	r3, r3, #2
    a43e:	4a05      	ldr	r2, [pc, #20]	; (a454 <get_incapture_value+0x2c>)
    a440:	589a      	ldr	r2, [r3, r2]
    a442:	7823      	ldrb	r3, [r4, #0]
    a444:	3301      	adds	r3, #1
    a446:	00db      	lsls	r3, r3, #3
    a448:	18d3      	adds	r3, r2, r3
    a44a:	6898      	ldr	r0, [r3, #8]
    a44c:	b280      	uxth	r0, r0
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:79
}
    a44e:	b003      	add	sp, #12
    a450:	bd30      	pop	{r4, r5, pc}
    a452:	46c0      	nop			; (mov r8, r8)
    a454:	0000aa90 	.word	0x0000aa90

0000a458 <cap_clear_flag>:
cap_clear_flag():
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:88
{
    a458:	b530      	push	{r4, r5, lr}
    a45a:	b083      	sub	sp, #12
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:90
    tpm_mux_val(capNo,&TPM_i,&chl);   //解析tpm模块号和通道号
    a45c:	466b      	mov	r3, sp
    a45e:	1d9c      	adds	r4, r3, #6
    a460:	1ddd      	adds	r5, r3, #7
    a462:	0022      	movs	r2, r4
    a464:	0029      	movs	r1, r5
    a466:	f7ff fedf 	bl	a228 <tpm_mux_val>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:91
    BSET(TPM_CnSC_CHF_SHIFT,TPM_ARR[TPM_i]->CONTROLS[chl].CnSC);
    a46a:	782b      	ldrb	r3, [r5, #0]
    a46c:	009b      	lsls	r3, r3, #2
    a46e:	4a06      	ldr	r2, [pc, #24]	; (a488 <cap_clear_flag+0x30>)
    a470:	589a      	ldr	r2, [r3, r2]
    a472:	7823      	ldrb	r3, [r4, #0]
    a474:	3301      	adds	r3, #1
    a476:	00db      	lsls	r3, r3, #3
    a478:	18d3      	adds	r3, r2, r3
    a47a:	685a      	ldr	r2, [r3, #4]
    a47c:	2180      	movs	r1, #128	; 0x80
    a47e:	430a      	orrs	r2, r1
    a480:	605a      	str	r2, [r3, #4]
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:92
}
    a482:	b003      	add	sp, #12
    a484:	bd30      	pop	{r4, r5, pc}
    a486:	46c0      	nop			; (mov r8, r8)
    a488:	0000aa90 	.word	0x0000aa90

0000a48c <cap_get_flag>:
cap_get_flag():
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:101
{
    a48c:	b530      	push	{r4, r5, lr}
    a48e:	b083      	sub	sp, #12
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:103
    tpm_mux_val(capNo,&TPM_i,&chl);   //解析tpm模块号和通道号
    a490:	466b      	mov	r3, sp
    a492:	1d9c      	adds	r4, r3, #6
    a494:	1ddd      	adds	r5, r3, #7
    a496:	0022      	movs	r2, r4
    a498:	0029      	movs	r1, r5
    a49a:	f7ff fec5 	bl	a228 <tpm_mux_val>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:104
    flag = BGET(TPM_CnSC_CHF_SHIFT,TPM_ARR[TPM_i]->CONTROLS[chl].CnSC);
    a49e:	782b      	ldrb	r3, [r5, #0]
    a4a0:	009b      	lsls	r3, r3, #2
    a4a2:	4a06      	ldr	r2, [pc, #24]	; (a4bc <cap_get_flag+0x30>)
    a4a4:	589a      	ldr	r2, [r3, r2]
    a4a6:	7823      	ldrb	r3, [r4, #0]
    a4a8:	3301      	adds	r3, #1
    a4aa:	00db      	lsls	r3, r3, #3
    a4ac:	18d3      	adds	r3, r2, r3
    a4ae:	6858      	ldr	r0, [r3, #4]
    a4b0:	09c0      	lsrs	r0, r0, #7
    a4b2:	2301      	movs	r3, #1
    a4b4:	4018      	ands	r0, r3
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:106
}
    a4b6:	b003      	add	sp, #12
    a4b8:	bd30      	pop	{r4, r5, pc}
    a4ba:	46c0      	nop			; (mov r8, r8)
    a4bc:	0000aa90 	.word	0x0000aa90

0000a4c0 <cap_enable_int>:
cap_enable_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:115
{
    a4c0:	b510      	push	{r4, lr}
    a4c2:	b082      	sub	sp, #8
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:117
    tpm_mux_val(capNo,&TPM_i,&chl);   //解析tpm模块号和通道号
    a4c4:	466b      	mov	r3, sp
    a4c6:	1ddc      	adds	r4, r3, #7
    a4c8:	1d9a      	adds	r2, r3, #6
    a4ca:	0021      	movs	r1, r4
    a4cc:	f7ff feac 	bl	a228 <tpm_mux_val>
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:118
    EnableIRQ(TPM_IRQ[TPM_i]);
    a4d0:	7823      	ldrb	r3, [r4, #0]
NVIC_EnableIRQ():
D:\app_for_qianrushi\exam\29\02_CPU/core_cm0plus.h:685
    a4d2:	4a05      	ldr	r2, [pc, #20]	; (a4e8 <cap_enable_int+0x28>)
    a4d4:	5cd3      	ldrb	r3, [r2, r3]
    a4d6:	221f      	movs	r2, #31
    a4d8:	401a      	ands	r2, r3
    a4da:	2301      	movs	r3, #1
    a4dc:	4093      	lsls	r3, r2
    a4de:	4a03      	ldr	r2, [pc, #12]	; (a4ec <cap_enable_int+0x2c>)
    a4e0:	6013      	str	r3, [r2, #0]
cap_enable_int():
D:\app_for_qianrushi\exam\29\Debug/srcc/incapture.c:119
}
    a4e2:	b002      	add	sp, #8
    a4e4:	bd10      	pop	{r4, pc}
    a4e6:	46c0      	nop			; (mov r8, r8)
    a4e8:	0000aa9c 	.word	0x0000aa9c
    a4ec:	e000e100 	.word	0xe000e100

0000a4f0 <memcpy>:
memcpy():
    a4f0:	2300      	movs	r3, #0
    a4f2:	b510      	push	{r4, lr}
    a4f4:	429a      	cmp	r2, r3
    a4f6:	d100      	bne.n	a4fa <memcpy+0xa>
    a4f8:	bd10      	pop	{r4, pc}
    a4fa:	5ccc      	ldrb	r4, [r1, r3]
    a4fc:	54c4      	strb	r4, [r0, r3]
    a4fe:	3301      	adds	r3, #1
    a500:	e7f8      	b.n	a4f4 <memcpy+0x4>

0000a502 <memset>:
memset():
    a502:	0003      	movs	r3, r0
    a504:	1812      	adds	r2, r2, r0
    a506:	4293      	cmp	r3, r2
    a508:	d100      	bne.n	a50c <memset+0xa>
    a50a:	4770      	bx	lr
    a50c:	7019      	strb	r1, [r3, #0]
    a50e:	3301      	adds	r3, #1
    a510:	e7f9      	b.n	a506 <memset+0x4>
	...

0000a514 <srand>:
srand():
    a514:	4b0d      	ldr	r3, [pc, #52]	; (a54c <srand+0x38>)
    a516:	b570      	push	{r4, r5, r6, lr}
    a518:	681c      	ldr	r4, [r3, #0]
    a51a:	0005      	movs	r5, r0
    a51c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a51e:	2b00      	cmp	r3, #0
    a520:	d10f      	bne.n	a542 <srand+0x2e>
    a522:	2018      	movs	r0, #24
    a524:	f000 f878 	bl	a618 <malloc>
    a528:	4b09      	ldr	r3, [pc, #36]	; (a550 <srand+0x3c>)
    a52a:	63a0      	str	r0, [r4, #56]	; 0x38
    a52c:	6003      	str	r3, [r0, #0]
    a52e:	4b09      	ldr	r3, [pc, #36]	; (a554 <srand+0x40>)
    a530:	2201      	movs	r2, #1
    a532:	6043      	str	r3, [r0, #4]
    a534:	4b08      	ldr	r3, [pc, #32]	; (a558 <srand+0x44>)
    a536:	6083      	str	r3, [r0, #8]
    a538:	230b      	movs	r3, #11
    a53a:	8183      	strh	r3, [r0, #12]
    a53c:	2300      	movs	r3, #0
    a53e:	6102      	str	r2, [r0, #16]
    a540:	6143      	str	r3, [r0, #20]
    a542:	2200      	movs	r2, #0
    a544:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a546:	611d      	str	r5, [r3, #16]
    a548:	615a      	str	r2, [r3, #20]
    a54a:	bd70      	pop	{r4, r5, r6, pc}
    a54c:	20000424 	.word	0x20000424
    a550:	abcd330e 	.word	0xabcd330e
    a554:	e66d1234 	.word	0xe66d1234
    a558:	0005deec 	.word	0x0005deec

0000a55c <rand>:
rand():
    a55c:	4b12      	ldr	r3, [pc, #72]	; (a5a8 <rand+0x4c>)
    a55e:	b510      	push	{r4, lr}
    a560:	681c      	ldr	r4, [r3, #0]
    a562:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    a564:	2b00      	cmp	r3, #0
    a566:	d10f      	bne.n	a588 <rand+0x2c>
    a568:	2018      	movs	r0, #24
    a56a:	f000 f855 	bl	a618 <malloc>
    a56e:	4b0f      	ldr	r3, [pc, #60]	; (a5ac <rand+0x50>)
    a570:	63a0      	str	r0, [r4, #56]	; 0x38
    a572:	6003      	str	r3, [r0, #0]
    a574:	4b0e      	ldr	r3, [pc, #56]	; (a5b0 <rand+0x54>)
    a576:	2201      	movs	r2, #1
    a578:	6043      	str	r3, [r0, #4]
    a57a:	4b0e      	ldr	r3, [pc, #56]	; (a5b4 <rand+0x58>)
    a57c:	6083      	str	r3, [r0, #8]
    a57e:	230b      	movs	r3, #11
    a580:	8183      	strh	r3, [r0, #12]
    a582:	2300      	movs	r3, #0
    a584:	6102      	str	r2, [r0, #16]
    a586:	6143      	str	r3, [r0, #20]
    a588:	6ba4      	ldr	r4, [r4, #56]	; 0x38
    a58a:	4a0b      	ldr	r2, [pc, #44]	; (a5b8 <rand+0x5c>)
    a58c:	6920      	ldr	r0, [r4, #16]
    a58e:	6961      	ldr	r1, [r4, #20]
    a590:	4b0a      	ldr	r3, [pc, #40]	; (a5bc <rand+0x60>)
    a592:	f7fe fb81 	bl	8c98 <__aeabi_lmul>
    a596:	2201      	movs	r2, #1
    a598:	2300      	movs	r3, #0
    a59a:	1880      	adds	r0, r0, r2
    a59c:	4159      	adcs	r1, r3
    a59e:	6120      	str	r0, [r4, #16]
    a5a0:	6161      	str	r1, [r4, #20]
    a5a2:	0048      	lsls	r0, r1, #1
    a5a4:	0840      	lsrs	r0, r0, #1
    a5a6:	bd10      	pop	{r4, pc}
    a5a8:	20000424 	.word	0x20000424
    a5ac:	abcd330e 	.word	0xabcd330e
    a5b0:	e66d1234 	.word	0xe66d1234
    a5b4:	0005deec 	.word	0x0005deec
    a5b8:	4c957f2d 	.word	0x4c957f2d
    a5bc:	5851f42d 	.word	0x5851f42d

0000a5c0 <time>:
time():
    a5c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    a5c2:	4b0b      	ldr	r3, [pc, #44]	; (a5f0 <time+0x30>)
    a5c4:	0004      	movs	r4, r0
    a5c6:	2200      	movs	r2, #0
    a5c8:	4669      	mov	r1, sp
    a5ca:	6818      	ldr	r0, [r3, #0]
    a5cc:	f000 f812 	bl	a5f4 <_gettimeofday_r>
    a5d0:	2800      	cmp	r0, #0
    a5d2:	da04      	bge.n	a5de <time+0x1e>
    a5d4:	2201      	movs	r2, #1
    a5d6:	4252      	negs	r2, r2
    a5d8:	17d3      	asrs	r3, r2, #31
    a5da:	9200      	str	r2, [sp, #0]
    a5dc:	9301      	str	r3, [sp, #4]
    a5de:	9800      	ldr	r0, [sp, #0]
    a5e0:	9901      	ldr	r1, [sp, #4]
    a5e2:	2c00      	cmp	r4, #0
    a5e4:	d001      	beq.n	a5ea <time+0x2a>
    a5e6:	6020      	str	r0, [r4, #0]
    a5e8:	6061      	str	r1, [r4, #4]
    a5ea:	b004      	add	sp, #16
    a5ec:	bd10      	pop	{r4, pc}
    a5ee:	46c0      	nop			; (mov r8, r8)
    a5f0:	20000424 	.word	0x20000424

0000a5f4 <_gettimeofday_r>:
_gettimeofday_r():
    a5f4:	2300      	movs	r3, #0
    a5f6:	b570      	push	{r4, r5, r6, lr}
    a5f8:	4c06      	ldr	r4, [pc, #24]	; (a614 <_gettimeofday_r+0x20>)
    a5fa:	0005      	movs	r5, r0
    a5fc:	0008      	movs	r0, r1
    a5fe:	0011      	movs	r1, r2
    a600:	6023      	str	r3, [r4, #0]
    a602:	f000 f885 	bl	a710 <_gettimeofday>
    a606:	1c43      	adds	r3, r0, #1
    a608:	d103      	bne.n	a612 <_gettimeofday_r+0x1e>
    a60a:	6823      	ldr	r3, [r4, #0]
    a60c:	2b00      	cmp	r3, #0
    a60e:	d000      	beq.n	a612 <_gettimeofday_r+0x1e>
    a610:	602b      	str	r3, [r5, #0]
    a612:	bd70      	pop	{r4, r5, r6, pc}
    a614:	200004bc 	.word	0x200004bc

0000a618 <malloc>:
malloc():
    a618:	b510      	push	{r4, lr}
    a61a:	4b03      	ldr	r3, [pc, #12]	; (a628 <malloc+0x10>)
    a61c:	0001      	movs	r1, r0
    a61e:	6818      	ldr	r0, [r3, #0]
    a620:	f000 f804 	bl	a62c <_malloc_r>
    a624:	bd10      	pop	{r4, pc}
    a626:	46c0      	nop			; (mov r8, r8)
    a628:	20000424 	.word	0x20000424

0000a62c <_malloc_r>:
_malloc_r():
    a62c:	2303      	movs	r3, #3
    a62e:	b570      	push	{r4, r5, r6, lr}
    a630:	1ccd      	adds	r5, r1, #3
    a632:	439d      	bics	r5, r3
    a634:	3508      	adds	r5, #8
    a636:	0006      	movs	r6, r0
    a638:	2d0c      	cmp	r5, #12
    a63a:	d21e      	bcs.n	a67a <_malloc_r+0x4e>
    a63c:	250c      	movs	r5, #12
    a63e:	42a9      	cmp	r1, r5
    a640:	d81d      	bhi.n	a67e <_malloc_r+0x52>
    a642:	0030      	movs	r0, r6
    a644:	f000 f862 	bl	a70c <__malloc_lock>
    a648:	4a25      	ldr	r2, [pc, #148]	; (a6e0 <_malloc_r+0xb4>)
    a64a:	6814      	ldr	r4, [r2, #0]
    a64c:	0021      	movs	r1, r4
    a64e:	2900      	cmp	r1, #0
    a650:	d119      	bne.n	a686 <_malloc_r+0x5a>
    a652:	4c24      	ldr	r4, [pc, #144]	; (a6e4 <_malloc_r+0xb8>)
    a654:	6823      	ldr	r3, [r4, #0]
    a656:	2b00      	cmp	r3, #0
    a658:	d103      	bne.n	a662 <_malloc_r+0x36>
    a65a:	0030      	movs	r0, r6
    a65c:	f000 f844 	bl	a6e8 <_sbrk_r>
    a660:	6020      	str	r0, [r4, #0]
    a662:	0029      	movs	r1, r5
    a664:	0030      	movs	r0, r6
    a666:	f000 f83f 	bl	a6e8 <_sbrk_r>
    a66a:	1c43      	adds	r3, r0, #1
    a66c:	d12b      	bne.n	a6c6 <_malloc_r+0x9a>
    a66e:	230c      	movs	r3, #12
    a670:	0030      	movs	r0, r6
    a672:	6033      	str	r3, [r6, #0]
    a674:	f000 f84b 	bl	a70e <__malloc_unlock>
    a678:	e003      	b.n	a682 <_malloc_r+0x56>
    a67a:	2d00      	cmp	r5, #0
    a67c:	dadf      	bge.n	a63e <_malloc_r+0x12>
    a67e:	230c      	movs	r3, #12
    a680:	6033      	str	r3, [r6, #0]
    a682:	2000      	movs	r0, #0
    a684:	bd70      	pop	{r4, r5, r6, pc}
    a686:	680b      	ldr	r3, [r1, #0]
    a688:	1b5b      	subs	r3, r3, r5
    a68a:	d419      	bmi.n	a6c0 <_malloc_r+0x94>
    a68c:	2b0b      	cmp	r3, #11
    a68e:	d903      	bls.n	a698 <_malloc_r+0x6c>
    a690:	600b      	str	r3, [r1, #0]
    a692:	18cc      	adds	r4, r1, r3
    a694:	6025      	str	r5, [r4, #0]
    a696:	e003      	b.n	a6a0 <_malloc_r+0x74>
    a698:	684b      	ldr	r3, [r1, #4]
    a69a:	428c      	cmp	r4, r1
    a69c:	d10d      	bne.n	a6ba <_malloc_r+0x8e>
    a69e:	6013      	str	r3, [r2, #0]
    a6a0:	0030      	movs	r0, r6
    a6a2:	f000 f834 	bl	a70e <__malloc_unlock>
    a6a6:	0020      	movs	r0, r4
    a6a8:	2207      	movs	r2, #7
    a6aa:	300b      	adds	r0, #11
    a6ac:	1d23      	adds	r3, r4, #4
    a6ae:	4390      	bics	r0, r2
    a6b0:	1ac3      	subs	r3, r0, r3
    a6b2:	d0e7      	beq.n	a684 <_malloc_r+0x58>
    a6b4:	425a      	negs	r2, r3
    a6b6:	50e2      	str	r2, [r4, r3]
    a6b8:	e7e4      	b.n	a684 <_malloc_r+0x58>
    a6ba:	6063      	str	r3, [r4, #4]
    a6bc:	000c      	movs	r4, r1
    a6be:	e7ef      	b.n	a6a0 <_malloc_r+0x74>
    a6c0:	000c      	movs	r4, r1
    a6c2:	6849      	ldr	r1, [r1, #4]
    a6c4:	e7c3      	b.n	a64e <_malloc_r+0x22>
    a6c6:	2303      	movs	r3, #3
    a6c8:	1cc4      	adds	r4, r0, #3
    a6ca:	439c      	bics	r4, r3
    a6cc:	42a0      	cmp	r0, r4
    a6ce:	d0e1      	beq.n	a694 <_malloc_r+0x68>
    a6d0:	1a21      	subs	r1, r4, r0
    a6d2:	0030      	movs	r0, r6
    a6d4:	f000 f808 	bl	a6e8 <_sbrk_r>
    a6d8:	1c43      	adds	r3, r0, #1
    a6da:	d1db      	bne.n	a694 <_malloc_r+0x68>
    a6dc:	e7c7      	b.n	a66e <_malloc_r+0x42>
    a6de:	46c0      	nop			; (mov r8, r8)
    a6e0:	200004a8 	.word	0x200004a8
    a6e4:	200004ac 	.word	0x200004ac

0000a6e8 <_sbrk_r>:
_sbrk_r():
    a6e8:	2300      	movs	r3, #0
    a6ea:	b570      	push	{r4, r5, r6, lr}
    a6ec:	4c06      	ldr	r4, [pc, #24]	; (a708 <_sbrk_r+0x20>)
    a6ee:	0005      	movs	r5, r0
    a6f0:	0008      	movs	r0, r1
    a6f2:	6023      	str	r3, [r4, #0]
    a6f4:	f000 f814 	bl	a720 <_sbrk>
    a6f8:	1c43      	adds	r3, r0, #1
    a6fa:	d103      	bne.n	a704 <_sbrk_r+0x1c>
    a6fc:	6823      	ldr	r3, [r4, #0]
    a6fe:	2b00      	cmp	r3, #0
    a700:	d000      	beq.n	a704 <_sbrk_r+0x1c>
    a702:	602b      	str	r3, [r5, #0]
    a704:	bd70      	pop	{r4, r5, r6, pc}
    a706:	46c0      	nop			; (mov r8, r8)
    a708:	200004bc 	.word	0x200004bc

0000a70c <__malloc_lock>:
__malloc_lock():
    a70c:	4770      	bx	lr

0000a70e <__malloc_unlock>:
__malloc_unlock():
    a70e:	4770      	bx	lr

0000a710 <_gettimeofday>:
_gettimeofday():
    a710:	2258      	movs	r2, #88	; 0x58
    a712:	2001      	movs	r0, #1
    a714:	4b01      	ldr	r3, [pc, #4]	; (a71c <_gettimeofday+0xc>)
    a716:	4240      	negs	r0, r0
    a718:	601a      	str	r2, [r3, #0]
    a71a:	4770      	bx	lr
    a71c:	200004bc 	.word	0x200004bc

0000a720 <_sbrk>:
_sbrk():
    a720:	4a04      	ldr	r2, [pc, #16]	; (a734 <_sbrk+0x14>)
    a722:	6813      	ldr	r3, [r2, #0]
    a724:	2b00      	cmp	r3, #0
    a726:	d100      	bne.n	a72a <_sbrk+0xa>
    a728:	4b03      	ldr	r3, [pc, #12]	; (a738 <_sbrk+0x18>)
    a72a:	1818      	adds	r0, r3, r0
    a72c:	6010      	str	r0, [r2, #0]
    a72e:	0018      	movs	r0, r3
    a730:	4770      	bx	lr
    a732:	46c0      	nop			; (mov r8, r8)
    a734:	200004b0 	.word	0x200004b0
    a738:	200004c0 	.word	0x200004c0
    a73c:	0000746e 	.word	0x0000746e
    a740:	000073aa 	.word	0x000073aa
    a744:	000073ce 	.word	0x000073ce
    a748:	0000736c 	.word	0x0000736c
    a74c:	000073ce 	.word	0x000073ce
    a750:	0000744a 	.word	0x0000744a
    a754:	000073ce 	.word	0x000073ce
    a758:	0000736c 	.word	0x0000736c
    a75c:	000073aa 	.word	0x000073aa
    a760:	000073aa 	.word	0x000073aa
    a764:	0000744a 	.word	0x0000744a
    a768:	0000736c 	.word	0x0000736c
    a76c:	000074a0 	.word	0x000074a0
    a770:	000074a0 	.word	0x000074a0
    a774:	000074a0 	.word	0x000074a0
    a778:	00007456 	.word	0x00007456
    a77c:	000073aa 	.word	0x000073aa
    a780:	000073aa 	.word	0x000073aa
    a784:	000073ce 	.word	0x000073ce
    a788:	0000736a 	.word	0x0000736a
    a78c:	000073ce 	.word	0x000073ce
    a790:	0000744a 	.word	0x0000744a
    a794:	000073ce 	.word	0x000073ce
    a798:	0000736a 	.word	0x0000736a
    a79c:	000073aa 	.word	0x000073aa
    a7a0:	000073aa 	.word	0x000073aa
    a7a4:	0000744a 	.word	0x0000744a
    a7a8:	0000736a 	.word	0x0000736a
    a7ac:	000074a0 	.word	0x000074a0
    a7b0:	000074a0 	.word	0x000074a0
    a7b4:	000074a0 	.word	0x000074a0
    a7b8:	00007454 	.word	0x00007454
    a7bc:	00007798 	.word	0x00007798
    a7c0:	00007742 	.word	0x00007742
    a7c4:	00007742 	.word	0x00007742
    a7c8:	00007870 	.word	0x00007870
    a7cc:	0000773e 	.word	0x0000773e
    a7d0:	0000773e 	.word	0x0000773e
    a7d4:	00007866 	.word	0x00007866
    a7d8:	00007870 	.word	0x00007870
    a7dc:	0000773e 	.word	0x0000773e
    a7e0:	00007866 	.word	0x00007866
    a7e4:	0000773e 	.word	0x0000773e
    a7e8:	00007870 	.word	0x00007870
    a7ec:	00007874 	.word	0x00007874
    a7f0:	00007874 	.word	0x00007874
    a7f4:	00007874 	.word	0x00007874
    a7f8:	0000787c 	.word	0x0000787c
    a7fc:	000081a8 	.word	0x000081a8
    a800:	000080aa 	.word	0x000080aa
    a804:	000080aa 	.word	0x000080aa
    a808:	000083c8 	.word	0x000083c8
    a80c:	000080a4 	.word	0x000080a4
    a810:	000080a4 	.word	0x000080a4
    a814:	000083b0 	.word	0x000083b0
    a818:	000083c8 	.word	0x000083c8
    a81c:	000080a4 	.word	0x000080a4
    a820:	000083b0 	.word	0x000083b0
    a824:	000080a4 	.word	0x000080a4
    a828:	000083c8 	.word	0x000083c8
    a82c:	000083be 	.word	0x000083be
    a830:	000083be 	.word	0x000083be
    a834:	000083be 	.word	0x000083be
    a838:	000083cc 	.word	0x000083cc
    a83c:	2d2d2d2d 	.word	0x2d2d2d2d
    a840:	2d2d2d2d 	.word	0x2d2d2d2d
    a844:	2d2d2d2d 	.word	0x2d2d2d2d
    a848:	2d2d2d2d 	.word	0x2d2d2d2d
    a84c:	2d2d2d2d 	.word	0x2d2d2d2d
    a850:	2d2d2d2d 	.word	0x2d2d2d2d
    a854:	2d2d2d2d 	.word	0x2d2d2d2d
    a858:	2d2d2d2d 	.word	0x2d2d2d2d
    a85c:	2d2d2d2d 	.word	0x2d2d2d2d
    a860:	2d2d2d2d 	.word	0x2d2d2d2d
    a864:	2d2d2d2d 	.word	0x2d2d2d2d
    a868:	2d2d2d2d 	.word	0x2d2d2d2d
    a86c:	2d2d2d2d 	.word	0x2d2d2d2d
    a870:	000a2d2d 	.word	0x000a2d2d
    a874:	f9baf0bd 	.word	0xf9baf0bd
    a878:	e1ccabc2 	.word	0xe1ccabc2
    a87c:	baa3beca 	.word	0xbaa3beca
    a880:	2d4d5750 	.word	0x2d4d5750
    a884:	41434e49 	.word	0x41434e49
    a888:	c0b5ca50 	.word	0xc0b5ca50
    a88c:	000a20fd 	.word	0x000a20fd
    a890:	d9a22020 	.word	0xd9a22020
    a894:	b5b6c020 	.word	0xb5b6c020
    a898:	cbc1c9c6 	.word	0xcbc1c9c6
    a89c:	00000ab8 	.word	0x00000ab8
    a8a0:	daa22020 	.word	0xdaa22020
    a8a4:	b9a8cd20 	.word	0xb9a8cd20
    a8a8:	434e49fd 	.word	0x434e49fd
    a8ac:	555f5041 	.word	0x555f5041
    a8b0:	ca524553 	.word	0xca524553
    a8b4:	34f6b3e4 	.word	0x34f6b3e4
    a8b8:	b57a484b 	.word	0xb57a484b
    a8bc:	4d5750c4 	.word	0x4d5750c4
    a8c0:	c5bac5d0 	.word	0xc5bac5d0
    a8c4:	bcd5aca3 	.word	0xbcd5aca3
    a8c8:	c8b1d5bf 	.word	0xc8b1d5bf
    a8cc:	3035aace 	.word	0x3035aace
    a8d0:	20a3a125 	.word	0x20a3a125
    a8d4:	0000000a 	.word	0x0000000a
    a8d8:	dba22020 	.word	0xdba22020
    a8dc:	d6e8c920 	.word	0xd6e8c920
    a8e0:	434e49c3 	.word	0x434e49c3
    a8e4:	555f5041 	.word	0x555f5041
    a8e8:	ce524553 	.word	0xce524553
    a8ec:	c8e4caaa 	.word	0xc8e4caaa
    a8f0:	d7b6b2eb 	.word	0xd7b6b2eb
    a8f4:	b2aca3bd 	.word	0xb2aca3bd
    a8f8:	cbc3d3c9 	.word	0xcbc3d3c9
    a8fc:	d1dfb1ab 	.word	0xd1dfb1ab
    a900:	d7b6b2d8 	.word	0xd7b6b2d8
    a904:	20aca3bd 	.word	0x20aca3bd
    a908:	0000000a 	.word	0x0000000a
    a90c:	dca22020 	.word	0xdca22020
    a910:	b4bfc320 	.word	0xb4bfc320
    a914:	b7a5b4ce 	.word	0xb7a5b4ce
    a918:	c8e4caa2 	.word	0xc8e4caa2
    a91c:	d7b6b2eb 	.word	0xd7b6b2eb
    a920:	b6aca3bd 	.word	0xb6aca3bd
    a924:	cfe1bbbc 	.word	0xcfe1bbbc
    a928:	cecfc9f2 	.word	0xcecfc9f2
    a92c:	cafabbbb 	.word	0xcafabbbb
    a930:	b5f6b3e4 	.word	0xb5f6b3e4
    a934:	b2b0c7b1 	.word	0xb2b0c7b1
    a938:	b5bdd7b6 	.word	0xb5bdd7b6
    a93c:	cdc4b5bd 	.word	0xcdc4b5bd
    a940:	d6c0b5a8 	.word	0xd6c0b5a8
    a944:	a1b1a1b5 	.word	0xa1b1a1b5
    a948:	000a20a3 	.word	0x000a20a3
    a94c:	000a6425 	.word	0x000a6425

0000a950 <PORT_ARR>:
    a950:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    a960:	4004d000 33323130 37363534 42413938     ...@0123456789AB
    a970:	46454443 30323032 36313730 00000000     CDEF20200716....
    a980:	bea12020 72657355 becae1cc baa3bfa1       ..User........
    a990:	f8bdabbd 7355ebc8 c4b57265 6e69616d     ......User..main
    a9a0:	b4d62928 2e2ed0d0 000a0d2e              ()..........

0000a9ac <UART_ARR>:
    a9ac:	4006b000 4006c000 00009d30 00009d48     ...@...@0...H...
    a9bc:	00009d48 00009d3c 00009d48 00009d48     H...<...H...H...
    a9cc:	00009d48 00009d48 00009d48 00009d48     H...H...H...H...
    a9dc:	00009d48 00009d2a 00009d48 00009d0a     H...*...H.......
    a9ec:	00009d48 00009d48 00009d36 00009fba     H...H...6.......
    a9fc:	0000a1e2 0000a1e2 0000a1e2 0000a1e2     ................
    aa0c:	0000a1e2 0000a1e2 0000a1e2 0000a1e2     ................
    aa1c:	0000a1e2 0000a0b6 0000a140 00009dfc     ........@.......
    aa2c:	0000a1e2 00009ec0 0000a1e2 0000a1e2     ................
    aa3c:	00009dfc 0000a1e2 0000a1e2 0000a1e2     ................
    aa4c:	0000a1e2 0000a1d2 0000a084 0000a0d0     ................
    aa5c:	0000a1e2 0000a1e2 0000a154 0000a1e2     ........T.......
    aa6c:	0000a0ea 0000a1e2 0000a1e2 00009fba     ................

0000aa7c <PORT_ARR>:
    aa7c:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    aa8c:	4004d000                                ...@

0000aa90 <TPM_ARR>:
    aa90:	40038000 40039000 4003a000              ...@...@...@

0000aa9c <TPM_IRQ>:
    aa9c:	00131211                                ....

0000aaa0 <_init>:
_init():
    aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aaa2:	46c0      	nop			; (mov r8, r8)
    aaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    aaa6:	bc08      	pop	{r3}
    aaa8:	469e      	mov	lr, r3
    aaaa:	4770      	bx	lr

0000aaac <_fini>:
_fini():
    aaac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aaae:	46c0      	nop			; (mov r8, r8)
    aab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    aab2:	bc08      	pop	{r3}
    aab4:	469e      	mov	lr, r3
    aab6:	4770      	bx	lr
