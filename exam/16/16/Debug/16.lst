
16.elf:     file format elf32-littlearm
16.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00006c59

Program Header:
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000068c0 memsz 0x000068c0 flags r--
    LOAD off    0x00006c00 vaddr 0x00006c00 paddr 0x00006c00 align 2**16
         filesz 0x00000010 memsz 0x00000010 flags r--
    LOAD off    0x00006c10 vaddr 0x00006c10 paddr 0x00006c10 align 2**16
         filesz 0x00004a34 memsz 0x00004a34 flags rwx
    LOAD off    0x00010400 vaddr 0x20000400 paddr 0x0000b644 align 2**16
         filesz 0x00000014 memsz 0x00000338 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name            Size      VMA       LMA       File off  Algn  Flags
  0 .interrupts     000000c0  00006800  00006800  00006800  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .flash_config   00000010  00006c00  00006c00  00006c00  2**0  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text           00004a24  00006c10  00006c10  00006c10  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM            00000008  0000b634  0000b634  0000b634  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array     00000004  0000b63c  0000b63c  0000b63c  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array     00000004  0000b640  0000b640  0000b640  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .mtb            00000000  20000400  20000400  00010414  2**0  CONTENTS
  7 .data           00000014  20000400  0000b644  00010400  2**2  CONTENTS, ALLOC, LOAD, DATA
  8 .bss            00000020  20000414  0000b658  00010414  2**2  ALLOC
  9 .heap           00000204  20000434  0000b678  00010414  2**0  ALLOC
 10 .stack          00000100  20000638  0000b87c  00010414  2**0  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010414  2**0  CONTENTS, READONLY
 12 .debug_info     0000d7b7  00000000  00000000  0001043c  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev   000023df  00000000  00000000  0001dbf3  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc      00003dc0  00000000  00000000  0001ffd2  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges  00000498  00000000  00000000  00023d98  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges   00000398  00000000  00000000  00024230  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro    0000fc25  00000000  00000000  000245c8  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_line     00003f7e  00000000  00000000  000341ed  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_str      0004faf5  00000000  00000000  0003816b  2**0  CONTENTS, READONLY, DEBUGGING
 20 .comment        0000007e  00000000  00000000  00087c60  2**0  CONTENTS, READONLY
 21 .debug_frame    00000f98  00000000  00000000  00087ce0  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00006800 l    d  .interrupts	00000000 .interrupts
00006c00 l    d  .flash_config	00000000 .flash_config
00006c10 l    d  .text	00000000 .text
0000b634 l    d  .ARM	00000000 .ARM
0000b63c l    d  .init_array	00000000 .init_array
0000b640 l    d  .fini_array	00000000 .fini_array
20000400 l    d  .mtb	00000000 .mtb
20000400 l    d  .data	00000000 .data
20000414 l    d  .bss	00000000 .bss
20000434 l    d  .heap	00000000 .heap
20000638 l    d  .stack	00000000 .stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 ./obj/startup_MKL36Z4.o
00000000 l    df *ABS*	00000000 crtstuff.c
0000b61c l     O .text	00000000 __EH_FRAME_BEGIN__
00006c10 l     F .text	00000000 __do_global_dtors_aux
20000414 l       .bss	00000001 completed.8654
0000b640 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
00006c38 l     F .text	00000000 frame_dummy
20000418 l       .bss	00000018 object.8659
0000b63c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 _udivsi3.o
00006ca8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _divsi3.o
00006dbc l       .text	00000000 .divsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_cmpsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 _clzsi2.o
00000000 l    df *ABS*	00000000 _clzdi2.o
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 adc.c
00000000 l    df *ABS*	00000000 timer.c
00000000 l    df *ABS*	00000000 system_MKL36Z4.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 wdog.c
00000000 l    df *ABS*	00000000 spi.c
00000000 l    df *ABS*	00000000 NumToStr.c
00000000 l    df *ABS*	00000000 gec.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 lcd.c
0000af54 l     O .text	00000600 nAsciiDot
0000aeec l     O .text	00000066 GB_16
00000000 l    df *ABS*	00000000 isr.c
00000000 l    df *ABS*	00000000 printf.c
0000a4fa l     F .text	0000002a printk_putc
0000a524 l     F .text	00000084 printk_mknumstr
0000a5a8 l     F .text	0000001e printk_pad_zero
0000a5c6 l     F .text	0000001e printk_pad_space
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 d:/嵌入式技术app/ahl-gec-ide(4.11)/gcc/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v6-m/crti.o
00000000 l    df *ABS*	00000000 d:/嵌入式技术app/ahl-gec-ide(4.11)/gcc/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v6-m/crtn.o
00000000 l    df *ABS*	00000000 
0000b640 l       .init_array	00000000 __init_array_end
0000b63c l       .init_array	00000000 __preinit_array_end
0000b63c l       .init_array	00000000 __init_array_start
0000b63c l       .init_array	00000000 __preinit_array_start
20000438 g       .heap	00000000 __HeapBase
0000a034 g     F .text	00000014 LCD_DrawPoint
00006fd4 g     F .text	00000012 .hidden __aeabi_dcmple
00009640 g     F .text	00000008 flash_read_physical
00008110 g     F .text	00000078 .hidden __eqdf2
20000400 g       .data	00000000 __data_start__
00000100 g       *ABS*	00000000 STACK_SIZE
00006ca0  w    F .text	00000006 I2C0_IRQHandler
0000003e g       *ABS*	00000000 GEC_USER_SECTOR_END
00006ca0  w    F .text	00000006 HardFault_Handler
0000982c g     F .text	0000003c wdog_start
00006ca0  w    F .text	00000006 SysTick_Handler
00006ca0  w    F .text	00000006 PendSV_Handler
00006ca0  w    F .text	00000006 NMI_Handler
0000b63c g       .ARM	00000000 __exidx_end
00006ca0  w    F .text	00000006 PORTC_PORTD_IRQHandler
00006ca0  w    F .text	00000006 I2C1_IRQHandler
00006ca0  w    F .text	00000006 UART1_IRQHandler
0000a290 g     F .text	00000108 LCD_aotu
00008188 g     F .text	000000c8 .hidden __gtdf2
0000b644 g       .fini_array	00000000 __etext
00006ca0  w    F .text	00000006 DMA2_IRQHandler
0000a398 g     F .text	00000018 LCD_Dly_ms
00009ffe g     F .text	00000036 LCD_Clear
00009eac g     F .text	00000050 uart_enable_re_int
00006ca0  w    F .text	00000006 TPM0_IRQHandler
20000400 g     O .data	0000000c TPM_ARR
00009f6c g     F .text	00000034 LCD_WR_REG
00006fa4 g     F .text	00000010 .hidden __aeabi_cdcmple
00006ca0  w    F .text	00000006 I2S0_IRQHandler
00006ca0  w    F .text	00000006 LLWU_IRQHandler
00009868 g     F .text	00000018 wdog_feed
0000001a g       *ABS*	00000000 GEC_USER_SECTOR_START
00006ca0  w    F .text	00000006 TSI0_IRQHandler
000092a8 g     F .text	000000a4 adc_init_inner
0000a460 g     F .text	0000008c UART0_IRQHandler
000093a4 g     F .text	00000014 tpm_clear_int
0000acfc g     F .text	00000012 memcpy
00006f94 g     F .text	00000020 .hidden __aeabi_cdrcmple
0000705c g     F .text	00000012 .hidden __aeabi_fcmpgt
00008250 g     F .text	000000d0 .hidden __ltdf2
0000b63c g       .init_array	00000000 __DTOR_END__
00007084 g     F .text	0000003e .hidden __aeabi_uldivmod
0000a250 g     F .text	0000003e LCD_DrawSurface
2000040c g     O .data	00000004 SystemCoreClock
00006ca0  w    F .text	00000006 ADC0_IRQHandler
0000a048 g     F .text	000000ae LCD_DrawLine
00006ca8 g     F .text	0000010a .hidden __udivsi3
20000414 g       .bss	00000000 __START_BSS
00009880 g     F .text	00000214 spi_init
00007a78 g     F .text	00000094 .hidden __aeabi_i2f
000073ac g     F .text	0000009e .hidden __lesf2
000070c4 g     F .text	0000003c .hidden __fixunsdfsi
0000a0f6 g     F .text	00000050 LCD_ShowCharactor
20000638 g       .heap	00000000 __HeapLimit
20000414 g       .bss	00000000 __bss_start__
000096ac g     F .text	00000068 flash_erase
00008f74 g     F .text	00000064 .hidden __aeabi_ui2d
00006ca0  w    F .text	00000006 SPI1_IRQHandler
0000713c g     F .text	00000182 .hidden __udivmoddi4
00006ca0  w    F .text	00000006 DefaultISR
00006fc0 g     F .text	00000012 .hidden __aeabi_dcmplt
00007b0c g     F .text	00000604 .hidden __aeabi_ddiv
000072c0 g     F .text	0000004e .hidden __nesf2
0000b634 g       .ARM	00000000 __exidx_start
00008320 g     F .text	000004e4 .hidden __aeabi_dmul
0000a5f0 g     F .text	00000188 printk_mkfloatstr
0000b61c g     F .text	00000000 _init
00006ca0  w    F .text	00000006 TPM2_IRQHandler
000093b8 g     F .text	00000024 timer_clear_int
0000907c g     F .text	00000108 .hidden __aeabi_d2f
00007100 g     F .text	0000003c .hidden __aeabi_d2ulz
000076b0 g     F .text	00000388 .hidden __aeabi_fsub
00006ca0  w    F .text	00000006 RTC_IRQHandler
0000ae88 g     O .text	00000014 PORT_ARR
00000400 g       *ABS*	00000000 MCU_SECTORSIZE
00006c58  w    F .text	00000048 Reset_Handler
00007070 g     F .text	00000012 .hidden __aeabi_fcmpge
00006ca0  w    F .text	00000006 LCD_IRQHandler
0000920c g     F .text	0000000a adc_read
00009f30 g     F .text	0000003c LCD_WR_DATA
00007310 g     F .text	0000009c .hidden __gtsf2
00008250 g     F .text	000000d0 .hidden __ledf2
200017ff g       *ABS*	00000000 GEC_USER_RAM_END
0000acd8 g     F .text	00000024 myprintf
00007048 g     F .text	00000012 .hidden __aeabi_fcmple
00006ca0  w    F .text	00000006 RTC_Seconds_IRQHandler
00006dbc g     F .text	00000000 .hidden __aeabi_idiv
00006ca0  w    F .text	00000006 MCG_IRQHandler
00009e18 g     F .text	0000002a uart_send_string
00006ca0  w    F .text	00000006 UART2_IRQHandler
20000414 g       .data	00000000 __data_end__
0000b63c g       .init_array	00000000 __CTOR_LIST__
00000200 g       *ABS*	00000000 HEAP_SIZE
00006fe8 g     F .text	00000012 .hidden __aeabi_dcmpgt
00009184 g     F .text	0000003c .hidden __clzsi2
00009c74 g     F .text	00000148 uart_init
20000434 g       .bss	00000000 __bss_end__
00006ca0  w    F .text	00000006 Reserved20_IRQHandler
00006ffc g     F .text	00000012 .hidden __aeabi_dcmpge
00009668 g     F .text	00000044 flash_cmd_launch
00008804 g     F .text	00000690 .hidden __aeabi_dsub
20000430 g     O .bss	00000004 component_fun
20000400 g       *ABS*	00000000 GEC_USER_RAM_START
0000aee4 g     O .text	00000008 UART_ARR
000091e8 g     F .text	00000024 adc_read_inner
00007a38 g     F .text	00000040 .hidden __aeabi_f2iz
000072c0 g     F .text	0000004e .hidden __eqsf2
00008f00 g     F .text	00000074 .hidden __aeabi_i2d
00009a94 g     F .text	00000034 spi_send1
0000a5e4 g     F .text	0000000c out_char
0000a778 g     F .text	0000055e printk
00006f90  w    F .text	00000002 .hidden __aeabi_ldiv0
20000410 g     O .data	00000003 table_irq_uart
00009e44 g     F .text	00000068 uart_re1
00009efc g     F .text	00000034 LCD_WR_DATA8
0000a3b0 g     F .text	000000b0 LCD_Init
0000ad0e g     F .text	00000010 memset
00006800 g       .interrupts	000000c0 __isr_vector
000094a0 g     F .text	000001a0 main
00006ca0  w    F .text	00000006 PIT_IRQHandler
000073ac g     F .text	0000009e .hidden __ltsf2
00009ac8 g     F .text	00000114 NumToStr_float
00006ca8 g     F .text	00000000 .hidden __aeabi_uidiv
00006ca0  w    F .text	00000006 SVC_Handler
20000400 g       .data	00000000 __DATA_RAM
00009768 g     F .text	00000008 gpio_get_port_pin
20000438 g       .heap	00000000 __end__
00007018 g     F .text	00000010 .hidden __aeabi_cfcmple
00006dbc g     F .text	000001cc .hidden __divsi3
0000b63c g       .init_array	00000000 __CTOR_END__
00006ca0  w    F .text	00000006 DMA3_IRQHandler
0000b63c g       .init_array	00000000 __DTOR_LIST__
20000434 g       .bss	00000000 __END_BSS
000093dc g     F .text	000000c4 SystemInit
00006ca0  w    F .text	00000006 DMA0_IRQHandler
00008110 g     F .text	00000078 .hidden __nedf2
00007100 g     F .text	0000003c .hidden __fixunsdfdi
0000b628 g     F .text	00000000 _fini
00006ca0  w    F .text	00000006 DAC0_IRQHandler
00007310 g     F .text	0000009c .hidden __gesf2
00009fa0 g     F .text	00000010 LCD_WR_REG_DATA
20001800 g       .stack	00000000 __StackTop
00007028 g     F .text	0000000c .hidden __aeabi_fcmpeq
0000934c g     F .text	0000000e adc_init
0000744c g     F .text	00000264 .hidden __aeabi_fmul
00009714 g     F .text	00000054 flash_write_physical
20000400 g       .mtb	00000000 _mtb_end
00007010 g     F .text	00000018 .hidden __aeabi_cfrcmple
0000b658 g       *ABS*	00000000 __DATA_END
00009648 g     F .text	0000001e flash_isempty
0000935c g     F .text	00000048 TempTrans
000070c4 g     F .text	0000003c .hidden __aeabi_d2uiz
0000a4ec g     F .text	0000000e TPM1_IRQHandler
00007034 g     F .text	00000012 .hidden __aeabi_fcmplt
00009bdc g     F .text	0000008c Vectors_Init
20001800 g       *ABS*	00000000 __stack
00006db4 g     F .text	00000008 .hidden __aeabi_uidivmod
00006fb4 g     F .text	0000000c .hidden __aeabi_dcmpeq
00006ca0  w    F .text	00000006 LVD_LVW_IRQHandler
00006ca0  w    F .text	00000006 SPI0_IRQHandler
00006ca0  w    F .text	00000006 PORTA_IRQHandler
00006800 g       .interrupts	00000000 __VECTOR_TABLE
0000b644 g       .fini_array	00000000 __DATA_ROM
20001700 g       *ABS*	00000000 __StackLimit
00006ca0  w    F .text	00000006 FTFA_IRQHandler
00009fb0 g     F .text	0000004e Address_set
0000ae74 g     O .text	00000014 GPIO_ARR
00008e94 g     F .text	0000006c .hidden __aeabi_d2iz
00007018 g     F .text	00000010 .hidden __aeabi_cfcmpeq
20000400 g       .mtb	00000000 _mtb_start
00006ca0  w    F .text	00000006 Reserved40_IRQHandler
00006f90  w    F .text	00000002 .hidden __aeabi_idiv0
0000a148 g     F .text	00000108 LCD_ShowString
00006ca0  w    F .text	00000006 LPTMR0_IRQHandler
000091d8 g     F .text	0000000e strlen
00009218 g     F .text	00000090 adc_cal
00006fa4 g     F .text	00000010 .hidden __aeabi_cdcmpeq
00008188 g     F .text	000000c8 .hidden __gedf2
00009dbc g     F .text	0000005c uart_send1
00009c68 g     F .text	0000000c uart_is_uartNo
00009770 g     F .text	00000044 gpio_set
00008fd8 g     F .text	000000a4 .hidden __aeabi_f2d
000097b4 g     F .text	00000078 gpio_init
000091c0 g     F .text	00000016 .hidden __clzdi2
00006ca0  w    F .text	00000006 CMP0_IRQHandler
00006f88 g     F .text	00000008 .hidden __aeabi_idivmod
00000000 g       *ABS*	00000000 MCU_FLASH_ADDR_START
00006ca0  w    F .text	00000006 DMA1_IRQHandler



Disassembly of section .text:

00006c10 <__do_global_dtors_aux>:
__do_global_dtors_aux():
    6c10:	b510      	push	{r4, lr}
    6c12:	4c06      	ldr	r4, [pc, #24]	; (6c2c <__do_global_dtors_aux+0x1c>)
    6c14:	7823      	ldrb	r3, [r4, #0]
    6c16:	2b00      	cmp	r3, #0
    6c18:	d107      	bne.n	6c2a <__do_global_dtors_aux+0x1a>
    6c1a:	4b05      	ldr	r3, [pc, #20]	; (6c30 <__do_global_dtors_aux+0x20>)
    6c1c:	2b00      	cmp	r3, #0
    6c1e:	d002      	beq.n	6c26 <__do_global_dtors_aux+0x16>
    6c20:	4804      	ldr	r0, [pc, #16]	; (6c34 <__do_global_dtors_aux+0x24>)
    6c22:	e000      	b.n	6c26 <__do_global_dtors_aux+0x16>
    6c24:	bf00      	nop
    6c26:	2301      	movs	r3, #1
    6c28:	7023      	strb	r3, [r4, #0]
    6c2a:	bd10      	pop	{r4, pc}
    6c2c:	20000414 	.word	0x20000414
    6c30:	00000000 	.word	0x00000000
    6c34:	0000b61c 	.word	0x0000b61c

00006c38 <frame_dummy>:
frame_dummy():
    6c38:	4b04      	ldr	r3, [pc, #16]	; (6c4c <frame_dummy+0x14>)
    6c3a:	b510      	push	{r4, lr}
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d003      	beq.n	6c48 <frame_dummy+0x10>
    6c40:	4903      	ldr	r1, [pc, #12]	; (6c50 <frame_dummy+0x18>)
    6c42:	4804      	ldr	r0, [pc, #16]	; (6c54 <frame_dummy+0x1c>)
    6c44:	e000      	b.n	6c48 <frame_dummy+0x10>
    6c46:	bf00      	nop
    6c48:	bd10      	pop	{r4, pc}
    6c4a:	46c0      	nop			; (mov r8, r8)
    6c4c:	00000000 	.word	0x00000000
    6c50:	20000418 	.word	0x20000418
    6c54:	0000b61c 	.word	0x0000b61c

00006c58 <Reset_Handler>:
Reset_Handler():
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:118
    .align 2
    .globl   Reset_Handler
    .weak    Reset_Handler
    .type    Reset_Handler, %function
Reset_Handler:
    cpsid   i               /* Mask interrupts */
    6c58:	b672      	cpsid	i
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:120
#ifndef __NO_SYSTEM_INIT
    bl SystemInit
    6c5a:	f002 fbbf 	bl	93dc <SystemInit>
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:122
#endif
    cpsie   i               /* Unmask interrupts */
    6c5e:	b662      	cpsie	i
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:130
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */

    ldr    r1, =__etext
    6c60:	490a      	ldr	r1, [pc, #40]	; (6c8c <Reset_Handler+0x34>)
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:131
    ldr    r2, =__data_start__
    6c62:	4a0b      	ldr	r2, [pc, #44]	; (6c90 <Reset_Handler+0x38>)
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:132
    ldr    r3, =__data_end__
    6c64:	4b0b      	ldr	r3, [pc, #44]	; (6c94 <Reset_Handler+0x3c>)
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:134

    subs    r3, r2
    6c66:	1a9b      	subs	r3, r3, r2
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:135
    ble     .LC0
    6c68:	dd03      	ble.n	6c72 <Reset_Handler+0x1a>
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:138

.LC1:
    subs    r3, 4
    6c6a:	3b04      	subs	r3, #4
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:139
    ldr    r0, [r1,r3]
    6c6c:	58c8      	ldr	r0, [r1, r3]
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:140
    str    r0, [r2,r3]
    6c6e:	50d0      	str	r0, [r2, r3]
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:141
    bgt    .LC1
    6c70:	dcfb      	bgt.n	6c6a <Reset_Handler+0x12>
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:154
 *     Loop to zero out BSS section, which uses following symbols
 *     in linker script:
 *      __bss_start__: start of BSS section. Must align to 4
 *      __bss_end__: end of BSS section. Must align to 4
 */
    ldr r1, =__bss_start__
    6c72:	4909      	ldr	r1, [pc, #36]	; (6c98 <Reset_Handler+0x40>)
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:155
    ldr r2, =__bss_end__
    6c74:	4a09      	ldr	r2, [pc, #36]	; (6c9c <Reset_Handler+0x44>)
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:157

    subs    r2, r1
    6c76:	1a52      	subs	r2, r2, r1
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:158
    ble .LC3
    6c78:	dd03      	ble.n	6c82 <Reset_Handler+0x2a>
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:160

    movs    r0, 0
    6c7a:	2000      	movs	r0, #0
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:162
.LC2:
    str r0, [r1, r2]
    6c7c:	5088      	str	r0, [r1, r2]
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:163
    subs    r2, 4
    6c7e:	3a04      	subs	r2, #4
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:164
    bge .LC2
    6c80:	dafc      	bge.n	6c7c <Reset_Handler+0x24>
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:173
#define __START _start
#endif


/*【User程序修改处1】*/
	bl	 Vectors_Init  
    6c82:	f002 ffab 	bl	9bdc <Vectors_Init>
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:175
  //  bl    __START
   bl main
    6c86:	f002 fc0b 	bl	94a0 <main>
    6c8a:	0000      	.short	0x0000
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:130
    ldr    r1, =__etext
    6c8c:	0000b644 	.word	0x0000b644
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:131
    ldr    r2, =__data_start__
    6c90:	20000400 	.word	0x20000400
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:132
    ldr    r3, =__data_end__
    6c94:	20000414 	.word	0x20000414
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:154
    ldr r1, =__bss_start__
    6c98:	20000414 	.word	0x20000414
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:155
    ldr r2, =__bss_end__
    6c9c:	20000434 	.word	0x20000434

00006ca0 <ADC0_IRQHandler>:
DMA1_IRQHandler():
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:186
    .weak DefaultISR
    .type DefaultISR, %function
DefaultISR:    
    //ldr	r0, =DefaultISR   //误中断，进入无限循环
    //bx r0
       push  {lr}        //【20200326】WYH改，误中断，回原处
    6ca0:	b500      	push	{lr}
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:187
       nop
    6ca2:	46c0      	nop			; (mov r8, r8)
D:\app_for_qianrushi\exam\16\Debug/srcs/startup_MKL36Z4.S:188
       pop   {pc}
    6ca4:	bd00      	pop	{pc}
    6ca6:	46c0      	nop			; (mov r8, r8)

00006ca8 <__udivsi3>:
__aeabi_uidiv():
    6ca8:	2200      	movs	r2, #0
    6caa:	0843      	lsrs	r3, r0, #1
    6cac:	428b      	cmp	r3, r1
    6cae:	d374      	bcc.n	6d9a <__udivsi3+0xf2>
    6cb0:	0903      	lsrs	r3, r0, #4
    6cb2:	428b      	cmp	r3, r1
    6cb4:	d35f      	bcc.n	6d76 <__udivsi3+0xce>
    6cb6:	0a03      	lsrs	r3, r0, #8
    6cb8:	428b      	cmp	r3, r1
    6cba:	d344      	bcc.n	6d46 <__udivsi3+0x9e>
    6cbc:	0b03      	lsrs	r3, r0, #12
    6cbe:	428b      	cmp	r3, r1
    6cc0:	d328      	bcc.n	6d14 <__udivsi3+0x6c>
    6cc2:	0c03      	lsrs	r3, r0, #16
    6cc4:	428b      	cmp	r3, r1
    6cc6:	d30d      	bcc.n	6ce4 <__udivsi3+0x3c>
    6cc8:	22ff      	movs	r2, #255	; 0xff
    6cca:	0209      	lsls	r1, r1, #8
    6ccc:	ba12      	rev	r2, r2
    6cce:	0c03      	lsrs	r3, r0, #16
    6cd0:	428b      	cmp	r3, r1
    6cd2:	d302      	bcc.n	6cda <__udivsi3+0x32>
    6cd4:	1212      	asrs	r2, r2, #8
    6cd6:	0209      	lsls	r1, r1, #8
    6cd8:	d065      	beq.n	6da6 <__udivsi3+0xfe>
    6cda:	0b03      	lsrs	r3, r0, #12
    6cdc:	428b      	cmp	r3, r1
    6cde:	d319      	bcc.n	6d14 <__udivsi3+0x6c>
    6ce0:	e000      	b.n	6ce4 <__udivsi3+0x3c>
    6ce2:	0a09      	lsrs	r1, r1, #8
    6ce4:	0bc3      	lsrs	r3, r0, #15
    6ce6:	428b      	cmp	r3, r1
    6ce8:	d301      	bcc.n	6cee <__udivsi3+0x46>
    6cea:	03cb      	lsls	r3, r1, #15
    6cec:	1ac0      	subs	r0, r0, r3
    6cee:	4152      	adcs	r2, r2
    6cf0:	0b83      	lsrs	r3, r0, #14
    6cf2:	428b      	cmp	r3, r1
    6cf4:	d301      	bcc.n	6cfa <__udivsi3+0x52>
    6cf6:	038b      	lsls	r3, r1, #14
    6cf8:	1ac0      	subs	r0, r0, r3
    6cfa:	4152      	adcs	r2, r2
    6cfc:	0b43      	lsrs	r3, r0, #13
    6cfe:	428b      	cmp	r3, r1
    6d00:	d301      	bcc.n	6d06 <__udivsi3+0x5e>
    6d02:	034b      	lsls	r3, r1, #13
    6d04:	1ac0      	subs	r0, r0, r3
    6d06:	4152      	adcs	r2, r2
    6d08:	0b03      	lsrs	r3, r0, #12
    6d0a:	428b      	cmp	r3, r1
    6d0c:	d301      	bcc.n	6d12 <__udivsi3+0x6a>
    6d0e:	030b      	lsls	r3, r1, #12
    6d10:	1ac0      	subs	r0, r0, r3
    6d12:	4152      	adcs	r2, r2
    6d14:	0ac3      	lsrs	r3, r0, #11
    6d16:	428b      	cmp	r3, r1
    6d18:	d301      	bcc.n	6d1e <__udivsi3+0x76>
    6d1a:	02cb      	lsls	r3, r1, #11
    6d1c:	1ac0      	subs	r0, r0, r3
    6d1e:	4152      	adcs	r2, r2
    6d20:	0a83      	lsrs	r3, r0, #10
    6d22:	428b      	cmp	r3, r1
    6d24:	d301      	bcc.n	6d2a <__udivsi3+0x82>
    6d26:	028b      	lsls	r3, r1, #10
    6d28:	1ac0      	subs	r0, r0, r3
    6d2a:	4152      	adcs	r2, r2
    6d2c:	0a43      	lsrs	r3, r0, #9
    6d2e:	428b      	cmp	r3, r1
    6d30:	d301      	bcc.n	6d36 <__udivsi3+0x8e>
    6d32:	024b      	lsls	r3, r1, #9
    6d34:	1ac0      	subs	r0, r0, r3
    6d36:	4152      	adcs	r2, r2
    6d38:	0a03      	lsrs	r3, r0, #8
    6d3a:	428b      	cmp	r3, r1
    6d3c:	d301      	bcc.n	6d42 <__udivsi3+0x9a>
    6d3e:	020b      	lsls	r3, r1, #8
    6d40:	1ac0      	subs	r0, r0, r3
    6d42:	4152      	adcs	r2, r2
    6d44:	d2cd      	bcs.n	6ce2 <__udivsi3+0x3a>
    6d46:	09c3      	lsrs	r3, r0, #7
    6d48:	428b      	cmp	r3, r1
    6d4a:	d301      	bcc.n	6d50 <__udivsi3+0xa8>
    6d4c:	01cb      	lsls	r3, r1, #7
    6d4e:	1ac0      	subs	r0, r0, r3
    6d50:	4152      	adcs	r2, r2
    6d52:	0983      	lsrs	r3, r0, #6
    6d54:	428b      	cmp	r3, r1
    6d56:	d301      	bcc.n	6d5c <__udivsi3+0xb4>
    6d58:	018b      	lsls	r3, r1, #6
    6d5a:	1ac0      	subs	r0, r0, r3
    6d5c:	4152      	adcs	r2, r2
    6d5e:	0943      	lsrs	r3, r0, #5
    6d60:	428b      	cmp	r3, r1
    6d62:	d301      	bcc.n	6d68 <__udivsi3+0xc0>
    6d64:	014b      	lsls	r3, r1, #5
    6d66:	1ac0      	subs	r0, r0, r3
    6d68:	4152      	adcs	r2, r2
    6d6a:	0903      	lsrs	r3, r0, #4
    6d6c:	428b      	cmp	r3, r1
    6d6e:	d301      	bcc.n	6d74 <__udivsi3+0xcc>
    6d70:	010b      	lsls	r3, r1, #4
    6d72:	1ac0      	subs	r0, r0, r3
    6d74:	4152      	adcs	r2, r2
    6d76:	08c3      	lsrs	r3, r0, #3
    6d78:	428b      	cmp	r3, r1
    6d7a:	d301      	bcc.n	6d80 <__udivsi3+0xd8>
    6d7c:	00cb      	lsls	r3, r1, #3
    6d7e:	1ac0      	subs	r0, r0, r3
    6d80:	4152      	adcs	r2, r2
    6d82:	0883      	lsrs	r3, r0, #2
    6d84:	428b      	cmp	r3, r1
    6d86:	d301      	bcc.n	6d8c <__udivsi3+0xe4>
    6d88:	008b      	lsls	r3, r1, #2
    6d8a:	1ac0      	subs	r0, r0, r3
    6d8c:	4152      	adcs	r2, r2
    6d8e:	0843      	lsrs	r3, r0, #1
    6d90:	428b      	cmp	r3, r1
    6d92:	d301      	bcc.n	6d98 <__udivsi3+0xf0>
    6d94:	004b      	lsls	r3, r1, #1
    6d96:	1ac0      	subs	r0, r0, r3
    6d98:	4152      	adcs	r2, r2
    6d9a:	1a41      	subs	r1, r0, r1
    6d9c:	d200      	bcs.n	6da0 <__udivsi3+0xf8>
    6d9e:	4601      	mov	r1, r0
    6da0:	4152      	adcs	r2, r2
    6da2:	4610      	mov	r0, r2
    6da4:	4770      	bx	lr
    6da6:	e7ff      	b.n	6da8 <__udivsi3+0x100>
    6da8:	b501      	push	{r0, lr}
    6daa:	2000      	movs	r0, #0
    6dac:	f000 f8f0 	bl	6f90 <__aeabi_idiv0>
    6db0:	bd02      	pop	{r1, pc}
    6db2:	46c0      	nop			; (mov r8, r8)

00006db4 <__aeabi_uidivmod>:
__aeabi_uidivmod():
    6db4:	2900      	cmp	r1, #0
    6db6:	d0f7      	beq.n	6da8 <__udivsi3+0x100>
    6db8:	e776      	b.n	6ca8 <__udivsi3>
    6dba:	4770      	bx	lr

00006dbc <__divsi3>:
__divsi3():
    6dbc:	4603      	mov	r3, r0
    6dbe:	430b      	orrs	r3, r1
    6dc0:	d47f      	bmi.n	6ec2 <__divsi3+0x106>
    6dc2:	2200      	movs	r2, #0
    6dc4:	0843      	lsrs	r3, r0, #1
    6dc6:	428b      	cmp	r3, r1
    6dc8:	d374      	bcc.n	6eb4 <__divsi3+0xf8>
    6dca:	0903      	lsrs	r3, r0, #4
    6dcc:	428b      	cmp	r3, r1
    6dce:	d35f      	bcc.n	6e90 <__divsi3+0xd4>
    6dd0:	0a03      	lsrs	r3, r0, #8
    6dd2:	428b      	cmp	r3, r1
    6dd4:	d344      	bcc.n	6e60 <__divsi3+0xa4>
    6dd6:	0b03      	lsrs	r3, r0, #12
    6dd8:	428b      	cmp	r3, r1
    6dda:	d328      	bcc.n	6e2e <__divsi3+0x72>
    6ddc:	0c03      	lsrs	r3, r0, #16
    6dde:	428b      	cmp	r3, r1
    6de0:	d30d      	bcc.n	6dfe <__divsi3+0x42>
    6de2:	22ff      	movs	r2, #255	; 0xff
    6de4:	0209      	lsls	r1, r1, #8
    6de6:	ba12      	rev	r2, r2
    6de8:	0c03      	lsrs	r3, r0, #16
    6dea:	428b      	cmp	r3, r1
    6dec:	d302      	bcc.n	6df4 <__divsi3+0x38>
    6dee:	1212      	asrs	r2, r2, #8
    6df0:	0209      	lsls	r1, r1, #8
    6df2:	d065      	beq.n	6ec0 <__divsi3+0x104>
    6df4:	0b03      	lsrs	r3, r0, #12
    6df6:	428b      	cmp	r3, r1
    6df8:	d319      	bcc.n	6e2e <__divsi3+0x72>
    6dfa:	e000      	b.n	6dfe <__divsi3+0x42>
    6dfc:	0a09      	lsrs	r1, r1, #8
    6dfe:	0bc3      	lsrs	r3, r0, #15
    6e00:	428b      	cmp	r3, r1
    6e02:	d301      	bcc.n	6e08 <__divsi3+0x4c>
    6e04:	03cb      	lsls	r3, r1, #15
    6e06:	1ac0      	subs	r0, r0, r3
    6e08:	4152      	adcs	r2, r2
    6e0a:	0b83      	lsrs	r3, r0, #14
    6e0c:	428b      	cmp	r3, r1
    6e0e:	d301      	bcc.n	6e14 <__divsi3+0x58>
    6e10:	038b      	lsls	r3, r1, #14
    6e12:	1ac0      	subs	r0, r0, r3
    6e14:	4152      	adcs	r2, r2
    6e16:	0b43      	lsrs	r3, r0, #13
    6e18:	428b      	cmp	r3, r1
    6e1a:	d301      	bcc.n	6e20 <__divsi3+0x64>
    6e1c:	034b      	lsls	r3, r1, #13
    6e1e:	1ac0      	subs	r0, r0, r3
    6e20:	4152      	adcs	r2, r2
    6e22:	0b03      	lsrs	r3, r0, #12
    6e24:	428b      	cmp	r3, r1
    6e26:	d301      	bcc.n	6e2c <__divsi3+0x70>
    6e28:	030b      	lsls	r3, r1, #12
    6e2a:	1ac0      	subs	r0, r0, r3
    6e2c:	4152      	adcs	r2, r2
    6e2e:	0ac3      	lsrs	r3, r0, #11
    6e30:	428b      	cmp	r3, r1
    6e32:	d301      	bcc.n	6e38 <__divsi3+0x7c>
    6e34:	02cb      	lsls	r3, r1, #11
    6e36:	1ac0      	subs	r0, r0, r3
    6e38:	4152      	adcs	r2, r2
    6e3a:	0a83      	lsrs	r3, r0, #10
    6e3c:	428b      	cmp	r3, r1
    6e3e:	d301      	bcc.n	6e44 <__divsi3+0x88>
    6e40:	028b      	lsls	r3, r1, #10
    6e42:	1ac0      	subs	r0, r0, r3
    6e44:	4152      	adcs	r2, r2
    6e46:	0a43      	lsrs	r3, r0, #9
    6e48:	428b      	cmp	r3, r1
    6e4a:	d301      	bcc.n	6e50 <__divsi3+0x94>
    6e4c:	024b      	lsls	r3, r1, #9
    6e4e:	1ac0      	subs	r0, r0, r3
    6e50:	4152      	adcs	r2, r2
    6e52:	0a03      	lsrs	r3, r0, #8
    6e54:	428b      	cmp	r3, r1
    6e56:	d301      	bcc.n	6e5c <__divsi3+0xa0>
    6e58:	020b      	lsls	r3, r1, #8
    6e5a:	1ac0      	subs	r0, r0, r3
    6e5c:	4152      	adcs	r2, r2
    6e5e:	d2cd      	bcs.n	6dfc <__divsi3+0x40>
    6e60:	09c3      	lsrs	r3, r0, #7
    6e62:	428b      	cmp	r3, r1
    6e64:	d301      	bcc.n	6e6a <__divsi3+0xae>
    6e66:	01cb      	lsls	r3, r1, #7
    6e68:	1ac0      	subs	r0, r0, r3
    6e6a:	4152      	adcs	r2, r2
    6e6c:	0983      	lsrs	r3, r0, #6
    6e6e:	428b      	cmp	r3, r1
    6e70:	d301      	bcc.n	6e76 <__divsi3+0xba>
    6e72:	018b      	lsls	r3, r1, #6
    6e74:	1ac0      	subs	r0, r0, r3
    6e76:	4152      	adcs	r2, r2
    6e78:	0943      	lsrs	r3, r0, #5
    6e7a:	428b      	cmp	r3, r1
    6e7c:	d301      	bcc.n	6e82 <__divsi3+0xc6>
    6e7e:	014b      	lsls	r3, r1, #5
    6e80:	1ac0      	subs	r0, r0, r3
    6e82:	4152      	adcs	r2, r2
    6e84:	0903      	lsrs	r3, r0, #4
    6e86:	428b      	cmp	r3, r1
    6e88:	d301      	bcc.n	6e8e <__divsi3+0xd2>
    6e8a:	010b      	lsls	r3, r1, #4
    6e8c:	1ac0      	subs	r0, r0, r3
    6e8e:	4152      	adcs	r2, r2
    6e90:	08c3      	lsrs	r3, r0, #3
    6e92:	428b      	cmp	r3, r1
    6e94:	d301      	bcc.n	6e9a <__divsi3+0xde>
    6e96:	00cb      	lsls	r3, r1, #3
    6e98:	1ac0      	subs	r0, r0, r3
    6e9a:	4152      	adcs	r2, r2
    6e9c:	0883      	lsrs	r3, r0, #2
    6e9e:	428b      	cmp	r3, r1
    6ea0:	d301      	bcc.n	6ea6 <__divsi3+0xea>
    6ea2:	008b      	lsls	r3, r1, #2
    6ea4:	1ac0      	subs	r0, r0, r3
    6ea6:	4152      	adcs	r2, r2
    6ea8:	0843      	lsrs	r3, r0, #1
    6eaa:	428b      	cmp	r3, r1
    6eac:	d301      	bcc.n	6eb2 <__divsi3+0xf6>
    6eae:	004b      	lsls	r3, r1, #1
    6eb0:	1ac0      	subs	r0, r0, r3
    6eb2:	4152      	adcs	r2, r2
    6eb4:	1a41      	subs	r1, r0, r1
    6eb6:	d200      	bcs.n	6eba <__divsi3+0xfe>
    6eb8:	4601      	mov	r1, r0
    6eba:	4152      	adcs	r2, r2
    6ebc:	4610      	mov	r0, r2
    6ebe:	4770      	bx	lr
    6ec0:	e05d      	b.n	6f7e <__divsi3+0x1c2>
    6ec2:	0fca      	lsrs	r2, r1, #31
    6ec4:	d000      	beq.n	6ec8 <__divsi3+0x10c>
    6ec6:	4249      	negs	r1, r1
    6ec8:	1003      	asrs	r3, r0, #32
    6eca:	d300      	bcc.n	6ece <__divsi3+0x112>
    6ecc:	4240      	negs	r0, r0
    6ece:	4053      	eors	r3, r2
    6ed0:	2200      	movs	r2, #0
    6ed2:	469c      	mov	ip, r3
    6ed4:	0903      	lsrs	r3, r0, #4
    6ed6:	428b      	cmp	r3, r1
    6ed8:	d32d      	bcc.n	6f36 <__divsi3+0x17a>
    6eda:	0a03      	lsrs	r3, r0, #8
    6edc:	428b      	cmp	r3, r1
    6ede:	d312      	bcc.n	6f06 <__divsi3+0x14a>
    6ee0:	22fc      	movs	r2, #252	; 0xfc
    6ee2:	0189      	lsls	r1, r1, #6
    6ee4:	ba12      	rev	r2, r2
    6ee6:	0a03      	lsrs	r3, r0, #8
    6ee8:	428b      	cmp	r3, r1
    6eea:	d30c      	bcc.n	6f06 <__divsi3+0x14a>
    6eec:	0189      	lsls	r1, r1, #6
    6eee:	1192      	asrs	r2, r2, #6
    6ef0:	428b      	cmp	r3, r1
    6ef2:	d308      	bcc.n	6f06 <__divsi3+0x14a>
    6ef4:	0189      	lsls	r1, r1, #6
    6ef6:	1192      	asrs	r2, r2, #6
    6ef8:	428b      	cmp	r3, r1
    6efa:	d304      	bcc.n	6f06 <__divsi3+0x14a>
    6efc:	0189      	lsls	r1, r1, #6
    6efe:	d03a      	beq.n	6f76 <__divsi3+0x1ba>
    6f00:	1192      	asrs	r2, r2, #6
    6f02:	e000      	b.n	6f06 <__divsi3+0x14a>
    6f04:	0989      	lsrs	r1, r1, #6
    6f06:	09c3      	lsrs	r3, r0, #7
    6f08:	428b      	cmp	r3, r1
    6f0a:	d301      	bcc.n	6f10 <__divsi3+0x154>
    6f0c:	01cb      	lsls	r3, r1, #7
    6f0e:	1ac0      	subs	r0, r0, r3
    6f10:	4152      	adcs	r2, r2
    6f12:	0983      	lsrs	r3, r0, #6
    6f14:	428b      	cmp	r3, r1
    6f16:	d301      	bcc.n	6f1c <__divsi3+0x160>
    6f18:	018b      	lsls	r3, r1, #6
    6f1a:	1ac0      	subs	r0, r0, r3
    6f1c:	4152      	adcs	r2, r2
    6f1e:	0943      	lsrs	r3, r0, #5
    6f20:	428b      	cmp	r3, r1
    6f22:	d301      	bcc.n	6f28 <__divsi3+0x16c>
    6f24:	014b      	lsls	r3, r1, #5
    6f26:	1ac0      	subs	r0, r0, r3
    6f28:	4152      	adcs	r2, r2
    6f2a:	0903      	lsrs	r3, r0, #4
    6f2c:	428b      	cmp	r3, r1
    6f2e:	d301      	bcc.n	6f34 <__divsi3+0x178>
    6f30:	010b      	lsls	r3, r1, #4
    6f32:	1ac0      	subs	r0, r0, r3
    6f34:	4152      	adcs	r2, r2
    6f36:	08c3      	lsrs	r3, r0, #3
    6f38:	428b      	cmp	r3, r1
    6f3a:	d301      	bcc.n	6f40 <__divsi3+0x184>
    6f3c:	00cb      	lsls	r3, r1, #3
    6f3e:	1ac0      	subs	r0, r0, r3
    6f40:	4152      	adcs	r2, r2
    6f42:	0883      	lsrs	r3, r0, #2
    6f44:	428b      	cmp	r3, r1
    6f46:	d301      	bcc.n	6f4c <__divsi3+0x190>
    6f48:	008b      	lsls	r3, r1, #2
    6f4a:	1ac0      	subs	r0, r0, r3
    6f4c:	4152      	adcs	r2, r2
    6f4e:	d2d9      	bcs.n	6f04 <__divsi3+0x148>
    6f50:	0843      	lsrs	r3, r0, #1
    6f52:	428b      	cmp	r3, r1
    6f54:	d301      	bcc.n	6f5a <__divsi3+0x19e>
    6f56:	004b      	lsls	r3, r1, #1
    6f58:	1ac0      	subs	r0, r0, r3
    6f5a:	4152      	adcs	r2, r2
    6f5c:	1a41      	subs	r1, r0, r1
    6f5e:	d200      	bcs.n	6f62 <__divsi3+0x1a6>
    6f60:	4601      	mov	r1, r0
    6f62:	4663      	mov	r3, ip
    6f64:	4152      	adcs	r2, r2
    6f66:	105b      	asrs	r3, r3, #1
    6f68:	4610      	mov	r0, r2
    6f6a:	d301      	bcc.n	6f70 <__divsi3+0x1b4>
    6f6c:	4240      	negs	r0, r0
    6f6e:	2b00      	cmp	r3, #0
    6f70:	d500      	bpl.n	6f74 <__divsi3+0x1b8>
    6f72:	4249      	negs	r1, r1
    6f74:	4770      	bx	lr
    6f76:	4663      	mov	r3, ip
    6f78:	105b      	asrs	r3, r3, #1
    6f7a:	d300      	bcc.n	6f7e <__divsi3+0x1c2>
    6f7c:	4240      	negs	r0, r0
    6f7e:	b501      	push	{r0, lr}
    6f80:	2000      	movs	r0, #0
    6f82:	f000 f805 	bl	6f90 <__aeabi_idiv0>
    6f86:	bd02      	pop	{r1, pc}

00006f88 <__aeabi_idivmod>:
__aeabi_idivmod():
    6f88:	2900      	cmp	r1, #0
    6f8a:	d0f8      	beq.n	6f7e <__divsi3+0x1c2>
    6f8c:	e716      	b.n	6dbc <__divsi3>
    6f8e:	4770      	bx	lr

00006f90 <__aeabi_idiv0>:
__aeabi_idiv0():
    6f90:	4770      	bx	lr
    6f92:	46c0      	nop			; (mov r8, r8)

00006f94 <__aeabi_cdrcmple>:
__aeabi_cdrcmple():
    6f94:	4684      	mov	ip, r0
    6f96:	1c10      	adds	r0, r2, #0
    6f98:	4662      	mov	r2, ip
    6f9a:	468c      	mov	ip, r1
    6f9c:	1c19      	adds	r1, r3, #0
    6f9e:	4663      	mov	r3, ip
    6fa0:	e000      	b.n	6fa4 <__aeabi_cdcmpeq>
    6fa2:	46c0      	nop			; (mov r8, r8)

00006fa4 <__aeabi_cdcmpeq>:
__aeabi_cdcmpeq():
    6fa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    6fa6:	f001 f953 	bl	8250 <__ledf2>
    6faa:	2800      	cmp	r0, #0
    6fac:	d401      	bmi.n	6fb2 <__aeabi_cdcmpeq+0xe>
    6fae:	2100      	movs	r1, #0
    6fb0:	42c8      	cmn	r0, r1
    6fb2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00006fb4 <__aeabi_dcmpeq>:
__aeabi_dcmpeq():
    6fb4:	b510      	push	{r4, lr}
    6fb6:	f001 f8ab 	bl	8110 <__eqdf2>
    6fba:	4240      	negs	r0, r0
    6fbc:	3001      	adds	r0, #1
    6fbe:	bd10      	pop	{r4, pc}

00006fc0 <__aeabi_dcmplt>:
__aeabi_dcmplt():
    6fc0:	b510      	push	{r4, lr}
    6fc2:	f001 f945 	bl	8250 <__ledf2>
    6fc6:	2800      	cmp	r0, #0
    6fc8:	db01      	blt.n	6fce <__aeabi_dcmplt+0xe>
    6fca:	2000      	movs	r0, #0
    6fcc:	bd10      	pop	{r4, pc}
    6fce:	2001      	movs	r0, #1
    6fd0:	bd10      	pop	{r4, pc}
    6fd2:	46c0      	nop			; (mov r8, r8)

00006fd4 <__aeabi_dcmple>:
__aeabi_dcmple():
    6fd4:	b510      	push	{r4, lr}
    6fd6:	f001 f93b 	bl	8250 <__ledf2>
    6fda:	2800      	cmp	r0, #0
    6fdc:	dd01      	ble.n	6fe2 <__aeabi_dcmple+0xe>
    6fde:	2000      	movs	r0, #0
    6fe0:	bd10      	pop	{r4, pc}
    6fe2:	2001      	movs	r0, #1
    6fe4:	bd10      	pop	{r4, pc}
    6fe6:	46c0      	nop			; (mov r8, r8)

00006fe8 <__aeabi_dcmpgt>:
__aeabi_dcmpgt():
    6fe8:	b510      	push	{r4, lr}
    6fea:	f001 f8cd 	bl	8188 <__gedf2>
    6fee:	2800      	cmp	r0, #0
    6ff0:	dc01      	bgt.n	6ff6 <__aeabi_dcmpgt+0xe>
    6ff2:	2000      	movs	r0, #0
    6ff4:	bd10      	pop	{r4, pc}
    6ff6:	2001      	movs	r0, #1
    6ff8:	bd10      	pop	{r4, pc}
    6ffa:	46c0      	nop			; (mov r8, r8)

00006ffc <__aeabi_dcmpge>:
__aeabi_dcmpge():
    6ffc:	b510      	push	{r4, lr}
    6ffe:	f001 f8c3 	bl	8188 <__gedf2>
    7002:	2800      	cmp	r0, #0
    7004:	da01      	bge.n	700a <__aeabi_dcmpge+0xe>
    7006:	2000      	movs	r0, #0
    7008:	bd10      	pop	{r4, pc}
    700a:	2001      	movs	r0, #1
    700c:	bd10      	pop	{r4, pc}
    700e:	46c0      	nop			; (mov r8, r8)

00007010 <__aeabi_cfrcmple>:
__aeabi_cfrcmple():
    7010:	4684      	mov	ip, r0
    7012:	1c08      	adds	r0, r1, #0
    7014:	4661      	mov	r1, ip
    7016:	e7ff      	b.n	7018 <__aeabi_cfcmpeq>

00007018 <__aeabi_cfcmpeq>:
__aeabi_cfcmpeq():
    7018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    701a:	f000 f9c7 	bl	73ac <__lesf2>
    701e:	2800      	cmp	r0, #0
    7020:	d401      	bmi.n	7026 <__aeabi_cfcmpeq+0xe>
    7022:	2100      	movs	r1, #0
    7024:	42c8      	cmn	r0, r1
    7026:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00007028 <__aeabi_fcmpeq>:
__aeabi_fcmpeq():
    7028:	b510      	push	{r4, lr}
    702a:	f000 f949 	bl	72c0 <__eqsf2>
    702e:	4240      	negs	r0, r0
    7030:	3001      	adds	r0, #1
    7032:	bd10      	pop	{r4, pc}

00007034 <__aeabi_fcmplt>:
__aeabi_fcmplt():
    7034:	b510      	push	{r4, lr}
    7036:	f000 f9b9 	bl	73ac <__lesf2>
    703a:	2800      	cmp	r0, #0
    703c:	db01      	blt.n	7042 <__aeabi_fcmplt+0xe>
    703e:	2000      	movs	r0, #0
    7040:	bd10      	pop	{r4, pc}
    7042:	2001      	movs	r0, #1
    7044:	bd10      	pop	{r4, pc}
    7046:	46c0      	nop			; (mov r8, r8)

00007048 <__aeabi_fcmple>:
__aeabi_fcmple():
    7048:	b510      	push	{r4, lr}
    704a:	f000 f9af 	bl	73ac <__lesf2>
    704e:	2800      	cmp	r0, #0
    7050:	dd01      	ble.n	7056 <__aeabi_fcmple+0xe>
    7052:	2000      	movs	r0, #0
    7054:	bd10      	pop	{r4, pc}
    7056:	2001      	movs	r0, #1
    7058:	bd10      	pop	{r4, pc}
    705a:	46c0      	nop			; (mov r8, r8)

0000705c <__aeabi_fcmpgt>:
__aeabi_fcmpgt():
    705c:	b510      	push	{r4, lr}
    705e:	f000 f957 	bl	7310 <__gesf2>
    7062:	2800      	cmp	r0, #0
    7064:	dc01      	bgt.n	706a <__aeabi_fcmpgt+0xe>
    7066:	2000      	movs	r0, #0
    7068:	bd10      	pop	{r4, pc}
    706a:	2001      	movs	r0, #1
    706c:	bd10      	pop	{r4, pc}
    706e:	46c0      	nop			; (mov r8, r8)

00007070 <__aeabi_fcmpge>:
__aeabi_fcmpge():
    7070:	b510      	push	{r4, lr}
    7072:	f000 f94d 	bl	7310 <__gesf2>
    7076:	2800      	cmp	r0, #0
    7078:	da01      	bge.n	707e <__aeabi_fcmpge+0xe>
    707a:	2000      	movs	r0, #0
    707c:	bd10      	pop	{r4, pc}
    707e:	2001      	movs	r0, #1
    7080:	bd10      	pop	{r4, pc}
    7082:	46c0      	nop			; (mov r8, r8)

00007084 <__aeabi_uldivmod>:
__aeabi_uldivmod():
    7084:	2b00      	cmp	r3, #0
    7086:	d111      	bne.n	70ac <__aeabi_uldivmod+0x28>
    7088:	2a00      	cmp	r2, #0
    708a:	d10f      	bne.n	70ac <__aeabi_uldivmod+0x28>
    708c:	2900      	cmp	r1, #0
    708e:	d100      	bne.n	7092 <__aeabi_uldivmod+0xe>
    7090:	2800      	cmp	r0, #0
    7092:	d002      	beq.n	709a <__aeabi_uldivmod+0x16>
    7094:	2100      	movs	r1, #0
    7096:	43c9      	mvns	r1, r1
    7098:	1c08      	adds	r0, r1, #0
    709a:	b407      	push	{r0, r1, r2}
    709c:	4802      	ldr	r0, [pc, #8]	; (70a8 <__aeabi_uldivmod+0x24>)
    709e:	a102      	add	r1, pc, #8	; (adr r1, 70a8 <__aeabi_uldivmod+0x24>)
    70a0:	1840      	adds	r0, r0, r1
    70a2:	9002      	str	r0, [sp, #8]
    70a4:	bd03      	pop	{r0, r1, pc}
    70a6:	46c0      	nop			; (mov r8, r8)
    70a8:	fffffee9 	.word	0xfffffee9
    70ac:	b403      	push	{r0, r1}
    70ae:	4668      	mov	r0, sp
    70b0:	b501      	push	{r0, lr}
    70b2:	9802      	ldr	r0, [sp, #8]
    70b4:	f000 f842 	bl	713c <__udivmoddi4>
    70b8:	9b01      	ldr	r3, [sp, #4]
    70ba:	469e      	mov	lr, r3
    70bc:	b002      	add	sp, #8
    70be:	bc0c      	pop	{r2, r3}
    70c0:	4770      	bx	lr
    70c2:	46c0      	nop			; (mov r8, r8)

000070c4 <__aeabi_d2uiz>:
__aeabi_d2uiz():
    70c4:	b570      	push	{r4, r5, r6, lr}
    70c6:	2200      	movs	r2, #0
    70c8:	4b0c      	ldr	r3, [pc, #48]	; (70fc <__aeabi_d2uiz+0x38>)
    70ca:	0004      	movs	r4, r0
    70cc:	000d      	movs	r5, r1
    70ce:	f7ff ff95 	bl	6ffc <__aeabi_dcmpge>
    70d2:	2800      	cmp	r0, #0
    70d4:	d104      	bne.n	70e0 <__aeabi_d2uiz+0x1c>
    70d6:	0020      	movs	r0, r4
    70d8:	0029      	movs	r1, r5
    70da:	f001 fedb 	bl	8e94 <__aeabi_d2iz>
    70de:	bd70      	pop	{r4, r5, r6, pc}
    70e0:	4b06      	ldr	r3, [pc, #24]	; (70fc <__aeabi_d2uiz+0x38>)
    70e2:	2200      	movs	r2, #0
    70e4:	0020      	movs	r0, r4
    70e6:	0029      	movs	r1, r5
    70e8:	f001 fb8c 	bl	8804 <__aeabi_dsub>
    70ec:	f001 fed2 	bl	8e94 <__aeabi_d2iz>
    70f0:	2380      	movs	r3, #128	; 0x80
    70f2:	061b      	lsls	r3, r3, #24
    70f4:	469c      	mov	ip, r3
    70f6:	4460      	add	r0, ip
    70f8:	e7f1      	b.n	70de <__aeabi_d2uiz+0x1a>
    70fa:	46c0      	nop			; (mov r8, r8)
    70fc:	41e00000 	.word	0x41e00000

00007100 <__aeabi_d2ulz>:
__fixunsdfdi():
    7100:	b570      	push	{r4, r5, r6, lr}
    7102:	2200      	movs	r2, #0
    7104:	4b0b      	ldr	r3, [pc, #44]	; (7134 <__aeabi_d2ulz+0x34>)
    7106:	000d      	movs	r5, r1
    7108:	0004      	movs	r4, r0
    710a:	f001 f909 	bl	8320 <__aeabi_dmul>
    710e:	f7ff ffd9 	bl	70c4 <__aeabi_d2uiz>
    7112:	0006      	movs	r6, r0
    7114:	f001 ff2e 	bl	8f74 <__aeabi_ui2d>
    7118:	2200      	movs	r2, #0
    711a:	4b07      	ldr	r3, [pc, #28]	; (7138 <__aeabi_d2ulz+0x38>)
    711c:	f001 f900 	bl	8320 <__aeabi_dmul>
    7120:	0002      	movs	r2, r0
    7122:	000b      	movs	r3, r1
    7124:	0020      	movs	r0, r4
    7126:	0029      	movs	r1, r5
    7128:	f001 fb6c 	bl	8804 <__aeabi_dsub>
    712c:	f7ff ffca 	bl	70c4 <__aeabi_d2uiz>
    7130:	0031      	movs	r1, r6
    7132:	bd70      	pop	{r4, r5, r6, pc}
    7134:	3df00000 	.word	0x3df00000
    7138:	41f00000 	.word	0x41f00000

0000713c <__udivmoddi4>:
__udivmoddi4():
    713c:	b5f0      	push	{r4, r5, r6, r7, lr}
    713e:	464f      	mov	r7, r9
    7140:	4646      	mov	r6, r8
    7142:	46d6      	mov	lr, sl
    7144:	b5c0      	push	{r6, r7, lr}
    7146:	0004      	movs	r4, r0
    7148:	b082      	sub	sp, #8
    714a:	000d      	movs	r5, r1
    714c:	4691      	mov	r9, r2
    714e:	4698      	mov	r8, r3
    7150:	428b      	cmp	r3, r1
    7152:	d82f      	bhi.n	71b4 <__udivmoddi4+0x78>
    7154:	d02c      	beq.n	71b0 <__udivmoddi4+0x74>
    7156:	4641      	mov	r1, r8
    7158:	4648      	mov	r0, r9
    715a:	f002 f831 	bl	91c0 <__clzdi2>
    715e:	0029      	movs	r1, r5
    7160:	0006      	movs	r6, r0
    7162:	0020      	movs	r0, r4
    7164:	f002 f82c 	bl	91c0 <__clzdi2>
    7168:	1a33      	subs	r3, r6, r0
    716a:	469c      	mov	ip, r3
    716c:	3b20      	subs	r3, #32
    716e:	469a      	mov	sl, r3
    7170:	d500      	bpl.n	7174 <__udivmoddi4+0x38>
    7172:	e076      	b.n	7262 <__udivmoddi4+0x126>
    7174:	464b      	mov	r3, r9
    7176:	4652      	mov	r2, sl
    7178:	4093      	lsls	r3, r2
    717a:	001f      	movs	r7, r3
    717c:	464b      	mov	r3, r9
    717e:	4662      	mov	r2, ip
    7180:	4093      	lsls	r3, r2
    7182:	001e      	movs	r6, r3
    7184:	42af      	cmp	r7, r5
    7186:	d828      	bhi.n	71da <__udivmoddi4+0x9e>
    7188:	d025      	beq.n	71d6 <__udivmoddi4+0x9a>
    718a:	4653      	mov	r3, sl
    718c:	1ba4      	subs	r4, r4, r6
    718e:	41bd      	sbcs	r5, r7
    7190:	2b00      	cmp	r3, #0
    7192:	da00      	bge.n	7196 <__udivmoddi4+0x5a>
    7194:	e07b      	b.n	728e <__udivmoddi4+0x152>
    7196:	2200      	movs	r2, #0
    7198:	2300      	movs	r3, #0
    719a:	9200      	str	r2, [sp, #0]
    719c:	9301      	str	r3, [sp, #4]
    719e:	2301      	movs	r3, #1
    71a0:	4652      	mov	r2, sl
    71a2:	4093      	lsls	r3, r2
    71a4:	9301      	str	r3, [sp, #4]
    71a6:	2301      	movs	r3, #1
    71a8:	4662      	mov	r2, ip
    71aa:	4093      	lsls	r3, r2
    71ac:	9300      	str	r3, [sp, #0]
    71ae:	e018      	b.n	71e2 <__udivmoddi4+0xa6>
    71b0:	4282      	cmp	r2, r0
    71b2:	d9d0      	bls.n	7156 <__udivmoddi4+0x1a>
    71b4:	2200      	movs	r2, #0
    71b6:	2300      	movs	r3, #0
    71b8:	9200      	str	r2, [sp, #0]
    71ba:	9301      	str	r3, [sp, #4]
    71bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    71be:	2b00      	cmp	r3, #0
    71c0:	d001      	beq.n	71c6 <__udivmoddi4+0x8a>
    71c2:	601c      	str	r4, [r3, #0]
    71c4:	605d      	str	r5, [r3, #4]
    71c6:	9800      	ldr	r0, [sp, #0]
    71c8:	9901      	ldr	r1, [sp, #4]
    71ca:	b002      	add	sp, #8
    71cc:	bc1c      	pop	{r2, r3, r4}
    71ce:	4690      	mov	r8, r2
    71d0:	4699      	mov	r9, r3
    71d2:	46a2      	mov	sl, r4
    71d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    71d6:	42a3      	cmp	r3, r4
    71d8:	d9d7      	bls.n	718a <__udivmoddi4+0x4e>
    71da:	2200      	movs	r2, #0
    71dc:	2300      	movs	r3, #0
    71de:	9200      	str	r2, [sp, #0]
    71e0:	9301      	str	r3, [sp, #4]
    71e2:	4663      	mov	r3, ip
    71e4:	2b00      	cmp	r3, #0
    71e6:	d0e9      	beq.n	71bc <__udivmoddi4+0x80>
    71e8:	07fb      	lsls	r3, r7, #31
    71ea:	4698      	mov	r8, r3
    71ec:	4641      	mov	r1, r8
    71ee:	0872      	lsrs	r2, r6, #1
    71f0:	430a      	orrs	r2, r1
    71f2:	087b      	lsrs	r3, r7, #1
    71f4:	4666      	mov	r6, ip
    71f6:	e00e      	b.n	7216 <__udivmoddi4+0xda>
    71f8:	42ab      	cmp	r3, r5
    71fa:	d101      	bne.n	7200 <__udivmoddi4+0xc4>
    71fc:	42a2      	cmp	r2, r4
    71fe:	d80c      	bhi.n	721a <__udivmoddi4+0xde>
    7200:	1aa4      	subs	r4, r4, r2
    7202:	419d      	sbcs	r5, r3
    7204:	2001      	movs	r0, #1
    7206:	1924      	adds	r4, r4, r4
    7208:	416d      	adcs	r5, r5
    720a:	2100      	movs	r1, #0
    720c:	3e01      	subs	r6, #1
    720e:	1824      	adds	r4, r4, r0
    7210:	414d      	adcs	r5, r1
    7212:	2e00      	cmp	r6, #0
    7214:	d006      	beq.n	7224 <__udivmoddi4+0xe8>
    7216:	42ab      	cmp	r3, r5
    7218:	d9ee      	bls.n	71f8 <__udivmoddi4+0xbc>
    721a:	3e01      	subs	r6, #1
    721c:	1924      	adds	r4, r4, r4
    721e:	416d      	adcs	r5, r5
    7220:	2e00      	cmp	r6, #0
    7222:	d1f8      	bne.n	7216 <__udivmoddi4+0xda>
    7224:	9800      	ldr	r0, [sp, #0]
    7226:	9901      	ldr	r1, [sp, #4]
    7228:	4653      	mov	r3, sl
    722a:	1900      	adds	r0, r0, r4
    722c:	4169      	adcs	r1, r5
    722e:	2b00      	cmp	r3, #0
    7230:	db23      	blt.n	727a <__udivmoddi4+0x13e>
    7232:	002b      	movs	r3, r5
    7234:	4652      	mov	r2, sl
    7236:	40d3      	lsrs	r3, r2
    7238:	002a      	movs	r2, r5
    723a:	4664      	mov	r4, ip
    723c:	40e2      	lsrs	r2, r4
    723e:	001c      	movs	r4, r3
    7240:	4653      	mov	r3, sl
    7242:	0015      	movs	r5, r2
    7244:	2b00      	cmp	r3, #0
    7246:	db2d      	blt.n	72a4 <__udivmoddi4+0x168>
    7248:	0026      	movs	r6, r4
    724a:	4657      	mov	r7, sl
    724c:	40be      	lsls	r6, r7
    724e:	0033      	movs	r3, r6
    7250:	0026      	movs	r6, r4
    7252:	4667      	mov	r7, ip
    7254:	40be      	lsls	r6, r7
    7256:	0032      	movs	r2, r6
    7258:	1a80      	subs	r0, r0, r2
    725a:	4199      	sbcs	r1, r3
    725c:	9000      	str	r0, [sp, #0]
    725e:	9101      	str	r1, [sp, #4]
    7260:	e7ac      	b.n	71bc <__udivmoddi4+0x80>
    7262:	4662      	mov	r2, ip
    7264:	2320      	movs	r3, #32
    7266:	1a9b      	subs	r3, r3, r2
    7268:	464a      	mov	r2, r9
    726a:	40da      	lsrs	r2, r3
    726c:	4661      	mov	r1, ip
    726e:	0013      	movs	r3, r2
    7270:	4642      	mov	r2, r8
    7272:	408a      	lsls	r2, r1
    7274:	0017      	movs	r7, r2
    7276:	431f      	orrs	r7, r3
    7278:	e780      	b.n	717c <__udivmoddi4+0x40>
    727a:	4662      	mov	r2, ip
    727c:	2320      	movs	r3, #32
    727e:	1a9b      	subs	r3, r3, r2
    7280:	002a      	movs	r2, r5
    7282:	4666      	mov	r6, ip
    7284:	409a      	lsls	r2, r3
    7286:	0023      	movs	r3, r4
    7288:	40f3      	lsrs	r3, r6
    728a:	4313      	orrs	r3, r2
    728c:	e7d4      	b.n	7238 <__udivmoddi4+0xfc>
    728e:	4662      	mov	r2, ip
    7290:	2320      	movs	r3, #32
    7292:	2100      	movs	r1, #0
    7294:	1a9b      	subs	r3, r3, r2
    7296:	2200      	movs	r2, #0
    7298:	9100      	str	r1, [sp, #0]
    729a:	9201      	str	r2, [sp, #4]
    729c:	2201      	movs	r2, #1
    729e:	40da      	lsrs	r2, r3
    72a0:	9201      	str	r2, [sp, #4]
    72a2:	e780      	b.n	71a6 <__udivmoddi4+0x6a>
    72a4:	2320      	movs	r3, #32
    72a6:	4662      	mov	r2, ip
    72a8:	0026      	movs	r6, r4
    72aa:	1a9b      	subs	r3, r3, r2
    72ac:	40de      	lsrs	r6, r3
    72ae:	002f      	movs	r7, r5
    72b0:	46b0      	mov	r8, r6
    72b2:	4666      	mov	r6, ip
    72b4:	40b7      	lsls	r7, r6
    72b6:	4646      	mov	r6, r8
    72b8:	003b      	movs	r3, r7
    72ba:	4333      	orrs	r3, r6
    72bc:	e7c8      	b.n	7250 <__udivmoddi4+0x114>
    72be:	46c0      	nop			; (mov r8, r8)

000072c0 <__eqsf2>:
__eqsf2():
    72c0:	b570      	push	{r4, r5, r6, lr}
    72c2:	0042      	lsls	r2, r0, #1
    72c4:	024e      	lsls	r6, r1, #9
    72c6:	004c      	lsls	r4, r1, #1
    72c8:	0245      	lsls	r5, r0, #9
    72ca:	0a6d      	lsrs	r5, r5, #9
    72cc:	0e12      	lsrs	r2, r2, #24
    72ce:	0fc3      	lsrs	r3, r0, #31
    72d0:	0a76      	lsrs	r6, r6, #9
    72d2:	0e24      	lsrs	r4, r4, #24
    72d4:	0fc9      	lsrs	r1, r1, #31
    72d6:	2aff      	cmp	r2, #255	; 0xff
    72d8:	d00f      	beq.n	72fa <__eqsf2+0x3a>
    72da:	2cff      	cmp	r4, #255	; 0xff
    72dc:	d011      	beq.n	7302 <__eqsf2+0x42>
    72de:	2001      	movs	r0, #1
    72e0:	42a2      	cmp	r2, r4
    72e2:	d000      	beq.n	72e6 <__eqsf2+0x26>
    72e4:	bd70      	pop	{r4, r5, r6, pc}
    72e6:	42b5      	cmp	r5, r6
    72e8:	d1fc      	bne.n	72e4 <__eqsf2+0x24>
    72ea:	428b      	cmp	r3, r1
    72ec:	d00d      	beq.n	730a <__eqsf2+0x4a>
    72ee:	2a00      	cmp	r2, #0
    72f0:	d1f8      	bne.n	72e4 <__eqsf2+0x24>
    72f2:	0028      	movs	r0, r5
    72f4:	1e45      	subs	r5, r0, #1
    72f6:	41a8      	sbcs	r0, r5
    72f8:	e7f4      	b.n	72e4 <__eqsf2+0x24>
    72fa:	2001      	movs	r0, #1
    72fc:	2d00      	cmp	r5, #0
    72fe:	d1f1      	bne.n	72e4 <__eqsf2+0x24>
    7300:	e7eb      	b.n	72da <__eqsf2+0x1a>
    7302:	2001      	movs	r0, #1
    7304:	2e00      	cmp	r6, #0
    7306:	d1ed      	bne.n	72e4 <__eqsf2+0x24>
    7308:	e7e9      	b.n	72de <__eqsf2+0x1e>
    730a:	2000      	movs	r0, #0
    730c:	e7ea      	b.n	72e4 <__eqsf2+0x24>
    730e:	46c0      	nop			; (mov r8, r8)

00007310 <__gesf2>:
__gesf2():
    7310:	b570      	push	{r4, r5, r6, lr}
    7312:	004a      	lsls	r2, r1, #1
    7314:	024e      	lsls	r6, r1, #9
    7316:	0245      	lsls	r5, r0, #9
    7318:	0044      	lsls	r4, r0, #1
    731a:	0a6d      	lsrs	r5, r5, #9
    731c:	0e24      	lsrs	r4, r4, #24
    731e:	0fc3      	lsrs	r3, r0, #31
    7320:	0a76      	lsrs	r6, r6, #9
    7322:	0e12      	lsrs	r2, r2, #24
    7324:	0fc9      	lsrs	r1, r1, #31
    7326:	2cff      	cmp	r4, #255	; 0xff
    7328:	d015      	beq.n	7356 <__gesf2+0x46>
    732a:	2aff      	cmp	r2, #255	; 0xff
    732c:	d00e      	beq.n	734c <__gesf2+0x3c>
    732e:	2c00      	cmp	r4, #0
    7330:	d115      	bne.n	735e <__gesf2+0x4e>
    7332:	2a00      	cmp	r2, #0
    7334:	d101      	bne.n	733a <__gesf2+0x2a>
    7336:	2e00      	cmp	r6, #0
    7338:	d01c      	beq.n	7374 <__gesf2+0x64>
    733a:	2d00      	cmp	r5, #0
    733c:	d014      	beq.n	7368 <__gesf2+0x58>
    733e:	428b      	cmp	r3, r1
    7340:	d027      	beq.n	7392 <__gesf2+0x82>
    7342:	2002      	movs	r0, #2
    7344:	3b01      	subs	r3, #1
    7346:	4018      	ands	r0, r3
    7348:	3801      	subs	r0, #1
    734a:	bd70      	pop	{r4, r5, r6, pc}
    734c:	2e00      	cmp	r6, #0
    734e:	d0ee      	beq.n	732e <__gesf2+0x1e>
    7350:	2002      	movs	r0, #2
    7352:	4240      	negs	r0, r0
    7354:	e7f9      	b.n	734a <__gesf2+0x3a>
    7356:	2d00      	cmp	r5, #0
    7358:	d1fa      	bne.n	7350 <__gesf2+0x40>
    735a:	2aff      	cmp	r2, #255	; 0xff
    735c:	d00e      	beq.n	737c <__gesf2+0x6c>
    735e:	2a00      	cmp	r2, #0
    7360:	d10e      	bne.n	7380 <__gesf2+0x70>
    7362:	2e00      	cmp	r6, #0
    7364:	d0ed      	beq.n	7342 <__gesf2+0x32>
    7366:	e00b      	b.n	7380 <__gesf2+0x70>
    7368:	2301      	movs	r3, #1
    736a:	3901      	subs	r1, #1
    736c:	4399      	bics	r1, r3
    736e:	0008      	movs	r0, r1
    7370:	3001      	adds	r0, #1
    7372:	e7ea      	b.n	734a <__gesf2+0x3a>
    7374:	2000      	movs	r0, #0
    7376:	2d00      	cmp	r5, #0
    7378:	d0e7      	beq.n	734a <__gesf2+0x3a>
    737a:	e7e2      	b.n	7342 <__gesf2+0x32>
    737c:	2e00      	cmp	r6, #0
    737e:	d1e7      	bne.n	7350 <__gesf2+0x40>
    7380:	428b      	cmp	r3, r1
    7382:	d1de      	bne.n	7342 <__gesf2+0x32>
    7384:	4294      	cmp	r4, r2
    7386:	dd05      	ble.n	7394 <__gesf2+0x84>
    7388:	2102      	movs	r1, #2
    738a:	1e58      	subs	r0, r3, #1
    738c:	4008      	ands	r0, r1
    738e:	3801      	subs	r0, #1
    7390:	e7db      	b.n	734a <__gesf2+0x3a>
    7392:	2400      	movs	r4, #0
    7394:	42a2      	cmp	r2, r4
    7396:	dc04      	bgt.n	73a2 <__gesf2+0x92>
    7398:	42b5      	cmp	r5, r6
    739a:	d8d2      	bhi.n	7342 <__gesf2+0x32>
    739c:	2000      	movs	r0, #0
    739e:	42b5      	cmp	r5, r6
    73a0:	d2d3      	bcs.n	734a <__gesf2+0x3a>
    73a2:	1e58      	subs	r0, r3, #1
    73a4:	2301      	movs	r3, #1
    73a6:	4398      	bics	r0, r3
    73a8:	3001      	adds	r0, #1
    73aa:	e7ce      	b.n	734a <__gesf2+0x3a>

000073ac <__lesf2>:
__ltsf2():
    73ac:	b530      	push	{r4, r5, lr}
    73ae:	0042      	lsls	r2, r0, #1
    73b0:	0244      	lsls	r4, r0, #9
    73b2:	024d      	lsls	r5, r1, #9
    73b4:	0fc3      	lsrs	r3, r0, #31
    73b6:	0048      	lsls	r0, r1, #1
    73b8:	0a64      	lsrs	r4, r4, #9
    73ba:	0e12      	lsrs	r2, r2, #24
    73bc:	0a6d      	lsrs	r5, r5, #9
    73be:	0e00      	lsrs	r0, r0, #24
    73c0:	0fc9      	lsrs	r1, r1, #31
    73c2:	2aff      	cmp	r2, #255	; 0xff
    73c4:	d012      	beq.n	73ec <__lesf2+0x40>
    73c6:	28ff      	cmp	r0, #255	; 0xff
    73c8:	d00c      	beq.n	73e4 <__lesf2+0x38>
    73ca:	2a00      	cmp	r2, #0
    73cc:	d112      	bne.n	73f4 <__lesf2+0x48>
    73ce:	2800      	cmp	r0, #0
    73d0:	d119      	bne.n	7406 <__lesf2+0x5a>
    73d2:	2d00      	cmp	r5, #0
    73d4:	d117      	bne.n	7406 <__lesf2+0x5a>
    73d6:	2c00      	cmp	r4, #0
    73d8:	d02b      	beq.n	7432 <__lesf2+0x86>
    73da:	2002      	movs	r0, #2
    73dc:	3b01      	subs	r3, #1
    73de:	4018      	ands	r0, r3
    73e0:	3801      	subs	r0, #1
    73e2:	e026      	b.n	7432 <__lesf2+0x86>
    73e4:	2d00      	cmp	r5, #0
    73e6:	d0f0      	beq.n	73ca <__lesf2+0x1e>
    73e8:	2002      	movs	r0, #2
    73ea:	e022      	b.n	7432 <__lesf2+0x86>
    73ec:	2c00      	cmp	r4, #0
    73ee:	d1fb      	bne.n	73e8 <__lesf2+0x3c>
    73f0:	28ff      	cmp	r0, #255	; 0xff
    73f2:	d01f      	beq.n	7434 <__lesf2+0x88>
    73f4:	2800      	cmp	r0, #0
    73f6:	d11f      	bne.n	7438 <__lesf2+0x8c>
    73f8:	2d00      	cmp	r5, #0
    73fa:	d11d      	bne.n	7438 <__lesf2+0x8c>
    73fc:	2002      	movs	r0, #2
    73fe:	3b01      	subs	r3, #1
    7400:	4018      	ands	r0, r3
    7402:	3801      	subs	r0, #1
    7404:	e015      	b.n	7432 <__lesf2+0x86>
    7406:	2c00      	cmp	r4, #0
    7408:	d00e      	beq.n	7428 <__lesf2+0x7c>
    740a:	428b      	cmp	r3, r1
    740c:	d1e5      	bne.n	73da <__lesf2+0x2e>
    740e:	2200      	movs	r2, #0
    7410:	4290      	cmp	r0, r2
    7412:	dc04      	bgt.n	741e <__lesf2+0x72>
    7414:	42ac      	cmp	r4, r5
    7416:	d8e0      	bhi.n	73da <__lesf2+0x2e>
    7418:	2000      	movs	r0, #0
    741a:	42ac      	cmp	r4, r5
    741c:	d209      	bcs.n	7432 <__lesf2+0x86>
    741e:	1e58      	subs	r0, r3, #1
    7420:	2301      	movs	r3, #1
    7422:	4398      	bics	r0, r3
    7424:	3001      	adds	r0, #1
    7426:	e004      	b.n	7432 <__lesf2+0x86>
    7428:	2301      	movs	r3, #1
    742a:	3901      	subs	r1, #1
    742c:	4399      	bics	r1, r3
    742e:	0008      	movs	r0, r1
    7430:	3001      	adds	r0, #1
    7432:	bd30      	pop	{r4, r5, pc}
    7434:	2d00      	cmp	r5, #0
    7436:	d1d7      	bne.n	73e8 <__lesf2+0x3c>
    7438:	428b      	cmp	r3, r1
    743a:	d1ce      	bne.n	73da <__lesf2+0x2e>
    743c:	4282      	cmp	r2, r0
    743e:	dde7      	ble.n	7410 <__lesf2+0x64>
    7440:	2102      	movs	r1, #2
    7442:	1e58      	subs	r0, r3, #1
    7444:	4008      	ands	r0, r1
    7446:	3801      	subs	r0, #1
    7448:	e7f3      	b.n	7432 <__lesf2+0x86>
    744a:	46c0      	nop			; (mov r8, r8)

0000744c <__aeabi_fmul>:
__aeabi_fmul():
    744c:	b5f0      	push	{r4, r5, r6, r7, lr}
    744e:	464e      	mov	r6, r9
    7450:	4657      	mov	r7, sl
    7452:	4645      	mov	r5, r8
    7454:	46de      	mov	lr, fp
    7456:	b5e0      	push	{r5, r6, r7, lr}
    7458:	0243      	lsls	r3, r0, #9
    745a:	0a5b      	lsrs	r3, r3, #9
    745c:	0045      	lsls	r5, r0, #1
    745e:	b083      	sub	sp, #12
    7460:	1c0f      	adds	r7, r1, #0
    7462:	4699      	mov	r9, r3
    7464:	0e2d      	lsrs	r5, r5, #24
    7466:	0fc6      	lsrs	r6, r0, #31
    7468:	2d00      	cmp	r5, #0
    746a:	d057      	beq.n	751c <__aeabi_fmul+0xd0>
    746c:	2dff      	cmp	r5, #255	; 0xff
    746e:	d024      	beq.n	74ba <__aeabi_fmul+0x6e>
    7470:	2080      	movs	r0, #128	; 0x80
    7472:	00db      	lsls	r3, r3, #3
    7474:	04c0      	lsls	r0, r0, #19
    7476:	4318      	orrs	r0, r3
    7478:	2300      	movs	r3, #0
    747a:	4681      	mov	r9, r0
    747c:	469a      	mov	sl, r3
    747e:	469b      	mov	fp, r3
    7480:	3d7f      	subs	r5, #127	; 0x7f
    7482:	027c      	lsls	r4, r7, #9
    7484:	007a      	lsls	r2, r7, #1
    7486:	0ffb      	lsrs	r3, r7, #31
    7488:	0a64      	lsrs	r4, r4, #9
    748a:	0e12      	lsrs	r2, r2, #24
    748c:	4698      	mov	r8, r3
    748e:	d023      	beq.n	74d8 <__aeabi_fmul+0x8c>
    7490:	2aff      	cmp	r2, #255	; 0xff
    7492:	d04b      	beq.n	752c <__aeabi_fmul+0xe0>
    7494:	00e3      	lsls	r3, r4, #3
    7496:	2480      	movs	r4, #128	; 0x80
    7498:	2000      	movs	r0, #0
    749a:	04e4      	lsls	r4, r4, #19
    749c:	3a7f      	subs	r2, #127	; 0x7f
    749e:	431c      	orrs	r4, r3
    74a0:	18ad      	adds	r5, r5, r2
    74a2:	1c6b      	adds	r3, r5, #1
    74a4:	4647      	mov	r7, r8
    74a6:	9301      	str	r3, [sp, #4]
    74a8:	4653      	mov	r3, sl
    74aa:	4077      	eors	r7, r6
    74ac:	003a      	movs	r2, r7
    74ae:	2b0f      	cmp	r3, #15
    74b0:	d848      	bhi.n	7544 <__aeabi_fmul+0xf8>
    74b2:	497d      	ldr	r1, [pc, #500]	; (76a8 <__aeabi_fmul+0x25c>)
    74b4:	009b      	lsls	r3, r3, #2
    74b6:	58cb      	ldr	r3, [r1, r3]
    74b8:	469f      	mov	pc, r3
    74ba:	2b00      	cmp	r3, #0
    74bc:	d000      	beq.n	74c0 <__aeabi_fmul+0x74>
    74be:	e085      	b.n	75cc <__aeabi_fmul+0x180>
    74c0:	3308      	adds	r3, #8
    74c2:	469a      	mov	sl, r3
    74c4:	3b06      	subs	r3, #6
    74c6:	469b      	mov	fp, r3
    74c8:	027c      	lsls	r4, r7, #9
    74ca:	007a      	lsls	r2, r7, #1
    74cc:	0ffb      	lsrs	r3, r7, #31
    74ce:	25ff      	movs	r5, #255	; 0xff
    74d0:	0a64      	lsrs	r4, r4, #9
    74d2:	0e12      	lsrs	r2, r2, #24
    74d4:	4698      	mov	r8, r3
    74d6:	d1db      	bne.n	7490 <__aeabi_fmul+0x44>
    74d8:	2c00      	cmp	r4, #0
    74da:	d000      	beq.n	74de <__aeabi_fmul+0x92>
    74dc:	e090      	b.n	7600 <__aeabi_fmul+0x1b4>
    74de:	4652      	mov	r2, sl
    74e0:	2301      	movs	r3, #1
    74e2:	431a      	orrs	r2, r3
    74e4:	4692      	mov	sl, r2
    74e6:	2001      	movs	r0, #1
    74e8:	e7db      	b.n	74a2 <__aeabi_fmul+0x56>
    74ea:	464c      	mov	r4, r9
    74ec:	4658      	mov	r0, fp
    74ee:	0017      	movs	r7, r2
    74f0:	2802      	cmp	r0, #2
    74f2:	d024      	beq.n	753e <__aeabi_fmul+0xf2>
    74f4:	2803      	cmp	r0, #3
    74f6:	d100      	bne.n	74fa <__aeabi_fmul+0xae>
    74f8:	e0cf      	b.n	769a <__aeabi_fmul+0x24e>
    74fa:	2200      	movs	r2, #0
    74fc:	2300      	movs	r3, #0
    74fe:	2801      	cmp	r0, #1
    7500:	d14d      	bne.n	759e <__aeabi_fmul+0x152>
    7502:	0258      	lsls	r0, r3, #9
    7504:	05d2      	lsls	r2, r2, #23
    7506:	0a40      	lsrs	r0, r0, #9
    7508:	07ff      	lsls	r7, r7, #31
    750a:	4310      	orrs	r0, r2
    750c:	4338      	orrs	r0, r7
    750e:	b003      	add	sp, #12
    7510:	bc3c      	pop	{r2, r3, r4, r5}
    7512:	4690      	mov	r8, r2
    7514:	4699      	mov	r9, r3
    7516:	46a2      	mov	sl, r4
    7518:	46ab      	mov	fp, r5
    751a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    751c:	2b00      	cmp	r3, #0
    751e:	d15b      	bne.n	75d8 <__aeabi_fmul+0x18c>
    7520:	2304      	movs	r3, #4
    7522:	469a      	mov	sl, r3
    7524:	3b03      	subs	r3, #3
    7526:	2500      	movs	r5, #0
    7528:	469b      	mov	fp, r3
    752a:	e7aa      	b.n	7482 <__aeabi_fmul+0x36>
    752c:	35ff      	adds	r5, #255	; 0xff
    752e:	2c00      	cmp	r4, #0
    7530:	d160      	bne.n	75f4 <__aeabi_fmul+0x1a8>
    7532:	4652      	mov	r2, sl
    7534:	2302      	movs	r3, #2
    7536:	431a      	orrs	r2, r3
    7538:	4692      	mov	sl, r2
    753a:	2002      	movs	r0, #2
    753c:	e7b1      	b.n	74a2 <__aeabi_fmul+0x56>
    753e:	22ff      	movs	r2, #255	; 0xff
    7540:	2300      	movs	r3, #0
    7542:	e7de      	b.n	7502 <__aeabi_fmul+0xb6>
    7544:	464b      	mov	r3, r9
    7546:	0c1b      	lsrs	r3, r3, #16
    7548:	469c      	mov	ip, r3
    754a:	464b      	mov	r3, r9
    754c:	0426      	lsls	r6, r4, #16
    754e:	0c36      	lsrs	r6, r6, #16
    7550:	0418      	lsls	r0, r3, #16
    7552:	4661      	mov	r1, ip
    7554:	0033      	movs	r3, r6
    7556:	0c22      	lsrs	r2, r4, #16
    7558:	4664      	mov	r4, ip
    755a:	0c00      	lsrs	r0, r0, #16
    755c:	4343      	muls	r3, r0
    755e:	434e      	muls	r6, r1
    7560:	4350      	muls	r0, r2
    7562:	4354      	muls	r4, r2
    7564:	1980      	adds	r0, r0, r6
    7566:	0c1a      	lsrs	r2, r3, #16
    7568:	1812      	adds	r2, r2, r0
    756a:	4296      	cmp	r6, r2
    756c:	d903      	bls.n	7576 <__aeabi_fmul+0x12a>
    756e:	2180      	movs	r1, #128	; 0x80
    7570:	0249      	lsls	r1, r1, #9
    7572:	468c      	mov	ip, r1
    7574:	4464      	add	r4, ip
    7576:	041b      	lsls	r3, r3, #16
    7578:	0c1b      	lsrs	r3, r3, #16
    757a:	0410      	lsls	r0, r2, #16
    757c:	18c0      	adds	r0, r0, r3
    757e:	0183      	lsls	r3, r0, #6
    7580:	1e5e      	subs	r6, r3, #1
    7582:	41b3      	sbcs	r3, r6
    7584:	0e80      	lsrs	r0, r0, #26
    7586:	4318      	orrs	r0, r3
    7588:	0c13      	lsrs	r3, r2, #16
    758a:	191b      	adds	r3, r3, r4
    758c:	019b      	lsls	r3, r3, #6
    758e:	4303      	orrs	r3, r0
    7590:	001c      	movs	r4, r3
    7592:	0123      	lsls	r3, r4, #4
    7594:	d579      	bpl.n	768a <__aeabi_fmul+0x23e>
    7596:	2301      	movs	r3, #1
    7598:	0862      	lsrs	r2, r4, #1
    759a:	401c      	ands	r4, r3
    759c:	4314      	orrs	r4, r2
    759e:	9a01      	ldr	r2, [sp, #4]
    75a0:	327f      	adds	r2, #127	; 0x7f
    75a2:	2a00      	cmp	r2, #0
    75a4:	dd4d      	ble.n	7642 <__aeabi_fmul+0x1f6>
    75a6:	0763      	lsls	r3, r4, #29
    75a8:	d004      	beq.n	75b4 <__aeabi_fmul+0x168>
    75aa:	230f      	movs	r3, #15
    75ac:	4023      	ands	r3, r4
    75ae:	2b04      	cmp	r3, #4
    75b0:	d000      	beq.n	75b4 <__aeabi_fmul+0x168>
    75b2:	3404      	adds	r4, #4
    75b4:	0123      	lsls	r3, r4, #4
    75b6:	d503      	bpl.n	75c0 <__aeabi_fmul+0x174>
    75b8:	4b3c      	ldr	r3, [pc, #240]	; (76ac <__aeabi_fmul+0x260>)
    75ba:	9a01      	ldr	r2, [sp, #4]
    75bc:	401c      	ands	r4, r3
    75be:	3280      	adds	r2, #128	; 0x80
    75c0:	2afe      	cmp	r2, #254	; 0xfe
    75c2:	dcbc      	bgt.n	753e <__aeabi_fmul+0xf2>
    75c4:	01a3      	lsls	r3, r4, #6
    75c6:	0a5b      	lsrs	r3, r3, #9
    75c8:	b2d2      	uxtb	r2, r2
    75ca:	e79a      	b.n	7502 <__aeabi_fmul+0xb6>
    75cc:	230c      	movs	r3, #12
    75ce:	469a      	mov	sl, r3
    75d0:	3b09      	subs	r3, #9
    75d2:	25ff      	movs	r5, #255	; 0xff
    75d4:	469b      	mov	fp, r3
    75d6:	e754      	b.n	7482 <__aeabi_fmul+0x36>
    75d8:	0018      	movs	r0, r3
    75da:	f001 fdd3 	bl	9184 <__clzsi2>
    75de:	464a      	mov	r2, r9
    75e0:	1f43      	subs	r3, r0, #5
    75e2:	2576      	movs	r5, #118	; 0x76
    75e4:	409a      	lsls	r2, r3
    75e6:	2300      	movs	r3, #0
    75e8:	426d      	negs	r5, r5
    75ea:	4691      	mov	r9, r2
    75ec:	1a2d      	subs	r5, r5, r0
    75ee:	469a      	mov	sl, r3
    75f0:	469b      	mov	fp, r3
    75f2:	e746      	b.n	7482 <__aeabi_fmul+0x36>
    75f4:	4652      	mov	r2, sl
    75f6:	2303      	movs	r3, #3
    75f8:	431a      	orrs	r2, r3
    75fa:	4692      	mov	sl, r2
    75fc:	2003      	movs	r0, #3
    75fe:	e750      	b.n	74a2 <__aeabi_fmul+0x56>
    7600:	0020      	movs	r0, r4
    7602:	f001 fdbf 	bl	9184 <__clzsi2>
    7606:	1f43      	subs	r3, r0, #5
    7608:	1a2d      	subs	r5, r5, r0
    760a:	409c      	lsls	r4, r3
    760c:	3d76      	subs	r5, #118	; 0x76
    760e:	2000      	movs	r0, #0
    7610:	e747      	b.n	74a2 <__aeabi_fmul+0x56>
    7612:	2380      	movs	r3, #128	; 0x80
    7614:	2700      	movs	r7, #0
    7616:	03db      	lsls	r3, r3, #15
    7618:	22ff      	movs	r2, #255	; 0xff
    761a:	e772      	b.n	7502 <__aeabi_fmul+0xb6>
    761c:	4642      	mov	r2, r8
    761e:	e766      	b.n	74ee <__aeabi_fmul+0xa2>
    7620:	464c      	mov	r4, r9
    7622:	0032      	movs	r2, r6
    7624:	4658      	mov	r0, fp
    7626:	e762      	b.n	74ee <__aeabi_fmul+0xa2>
    7628:	2380      	movs	r3, #128	; 0x80
    762a:	464a      	mov	r2, r9
    762c:	03db      	lsls	r3, r3, #15
    762e:	421a      	tst	r2, r3
    7630:	d022      	beq.n	7678 <__aeabi_fmul+0x22c>
    7632:	421c      	tst	r4, r3
    7634:	d120      	bne.n	7678 <__aeabi_fmul+0x22c>
    7636:	4323      	orrs	r3, r4
    7638:	025b      	lsls	r3, r3, #9
    763a:	0a5b      	lsrs	r3, r3, #9
    763c:	4647      	mov	r7, r8
    763e:	22ff      	movs	r2, #255	; 0xff
    7640:	e75f      	b.n	7502 <__aeabi_fmul+0xb6>
    7642:	2301      	movs	r3, #1
    7644:	1a9a      	subs	r2, r3, r2
    7646:	2a1b      	cmp	r2, #27
    7648:	dc21      	bgt.n	768e <__aeabi_fmul+0x242>
    764a:	0023      	movs	r3, r4
    764c:	9901      	ldr	r1, [sp, #4]
    764e:	40d3      	lsrs	r3, r2
    7650:	319e      	adds	r1, #158	; 0x9e
    7652:	408c      	lsls	r4, r1
    7654:	001a      	movs	r2, r3
    7656:	0023      	movs	r3, r4
    7658:	1e5c      	subs	r4, r3, #1
    765a:	41a3      	sbcs	r3, r4
    765c:	4313      	orrs	r3, r2
    765e:	075a      	lsls	r2, r3, #29
    7660:	d004      	beq.n	766c <__aeabi_fmul+0x220>
    7662:	220f      	movs	r2, #15
    7664:	401a      	ands	r2, r3
    7666:	2a04      	cmp	r2, #4
    7668:	d000      	beq.n	766c <__aeabi_fmul+0x220>
    766a:	3304      	adds	r3, #4
    766c:	015a      	lsls	r2, r3, #5
    766e:	d411      	bmi.n	7694 <__aeabi_fmul+0x248>
    7670:	019b      	lsls	r3, r3, #6
    7672:	0a5b      	lsrs	r3, r3, #9
    7674:	2200      	movs	r2, #0
    7676:	e744      	b.n	7502 <__aeabi_fmul+0xb6>
    7678:	2380      	movs	r3, #128	; 0x80
    767a:	464a      	mov	r2, r9
    767c:	03db      	lsls	r3, r3, #15
    767e:	4313      	orrs	r3, r2
    7680:	025b      	lsls	r3, r3, #9
    7682:	0a5b      	lsrs	r3, r3, #9
    7684:	0037      	movs	r7, r6
    7686:	22ff      	movs	r2, #255	; 0xff
    7688:	e73b      	b.n	7502 <__aeabi_fmul+0xb6>
    768a:	9501      	str	r5, [sp, #4]
    768c:	e787      	b.n	759e <__aeabi_fmul+0x152>
    768e:	2200      	movs	r2, #0
    7690:	2300      	movs	r3, #0
    7692:	e736      	b.n	7502 <__aeabi_fmul+0xb6>
    7694:	2201      	movs	r2, #1
    7696:	2300      	movs	r3, #0
    7698:	e733      	b.n	7502 <__aeabi_fmul+0xb6>
    769a:	2380      	movs	r3, #128	; 0x80
    769c:	03db      	lsls	r3, r3, #15
    769e:	4323      	orrs	r3, r4
    76a0:	025b      	lsls	r3, r3, #9
    76a2:	0a5b      	lsrs	r3, r3, #9
    76a4:	22ff      	movs	r2, #255	; 0xff
    76a6:	e72c      	b.n	7502 <__aeabi_fmul+0xb6>
    76a8:	0000ad20 	.word	0x0000ad20
    76ac:	f7ffffff 	.word	0xf7ffffff

000076b0 <__aeabi_fsub>:
__aeabi_fsub():
    76b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76b2:	4647      	mov	r7, r8
    76b4:	46ce      	mov	lr, r9
    76b6:	0044      	lsls	r4, r0, #1
    76b8:	0fc2      	lsrs	r2, r0, #31
    76ba:	b580      	push	{r7, lr}
    76bc:	0247      	lsls	r7, r0, #9
    76be:	0248      	lsls	r0, r1, #9
    76c0:	0a40      	lsrs	r0, r0, #9
    76c2:	4684      	mov	ip, r0
    76c4:	4666      	mov	r6, ip
    76c6:	0048      	lsls	r0, r1, #1
    76c8:	0a7f      	lsrs	r7, r7, #9
    76ca:	0e24      	lsrs	r4, r4, #24
    76cc:	00f6      	lsls	r6, r6, #3
    76ce:	0025      	movs	r5, r4
    76d0:	4690      	mov	r8, r2
    76d2:	00fb      	lsls	r3, r7, #3
    76d4:	0e00      	lsrs	r0, r0, #24
    76d6:	0fc9      	lsrs	r1, r1, #31
    76d8:	46b1      	mov	r9, r6
    76da:	28ff      	cmp	r0, #255	; 0xff
    76dc:	d100      	bne.n	76e0 <__aeabi_fsub+0x30>
    76de:	e085      	b.n	77ec <__aeabi_fsub+0x13c>
    76e0:	2601      	movs	r6, #1
    76e2:	4071      	eors	r1, r6
    76e4:	1a26      	subs	r6, r4, r0
    76e6:	4291      	cmp	r1, r2
    76e8:	d057      	beq.n	779a <__aeabi_fsub+0xea>
    76ea:	2e00      	cmp	r6, #0
    76ec:	dd43      	ble.n	7776 <__aeabi_fsub+0xc6>
    76ee:	2800      	cmp	r0, #0
    76f0:	d000      	beq.n	76f4 <__aeabi_fsub+0x44>
    76f2:	e07f      	b.n	77f4 <__aeabi_fsub+0x144>
    76f4:	4649      	mov	r1, r9
    76f6:	2900      	cmp	r1, #0
    76f8:	d100      	bne.n	76fc <__aeabi_fsub+0x4c>
    76fa:	e0aa      	b.n	7852 <__aeabi_fsub+0x1a2>
    76fc:	3e01      	subs	r6, #1
    76fe:	2e00      	cmp	r6, #0
    7700:	d000      	beq.n	7704 <__aeabi_fsub+0x54>
    7702:	e0f7      	b.n	78f4 <__aeabi_fsub+0x244>
    7704:	1a5b      	subs	r3, r3, r1
    7706:	015a      	lsls	r2, r3, #5
    7708:	d400      	bmi.n	770c <__aeabi_fsub+0x5c>
    770a:	e08b      	b.n	7824 <__aeabi_fsub+0x174>
    770c:	019b      	lsls	r3, r3, #6
    770e:	099c      	lsrs	r4, r3, #6
    7710:	0020      	movs	r0, r4
    7712:	f001 fd37 	bl	9184 <__clzsi2>
    7716:	3805      	subs	r0, #5
    7718:	4084      	lsls	r4, r0
    771a:	4285      	cmp	r5, r0
    771c:	dd00      	ble.n	7720 <__aeabi_fsub+0x70>
    771e:	e0d3      	b.n	78c8 <__aeabi_fsub+0x218>
    7720:	1b45      	subs	r5, r0, r5
    7722:	0023      	movs	r3, r4
    7724:	2020      	movs	r0, #32
    7726:	3501      	adds	r5, #1
    7728:	40eb      	lsrs	r3, r5
    772a:	1b45      	subs	r5, r0, r5
    772c:	40ac      	lsls	r4, r5
    772e:	1e62      	subs	r2, r4, #1
    7730:	4194      	sbcs	r4, r2
    7732:	4323      	orrs	r3, r4
    7734:	2407      	movs	r4, #7
    7736:	2500      	movs	r5, #0
    7738:	401c      	ands	r4, r3
    773a:	2201      	movs	r2, #1
    773c:	4641      	mov	r1, r8
    773e:	400a      	ands	r2, r1
    7740:	2c00      	cmp	r4, #0
    7742:	d004      	beq.n	774e <__aeabi_fsub+0x9e>
    7744:	210f      	movs	r1, #15
    7746:	4019      	ands	r1, r3
    7748:	2904      	cmp	r1, #4
    774a:	d000      	beq.n	774e <__aeabi_fsub+0x9e>
    774c:	3304      	adds	r3, #4
    774e:	0159      	lsls	r1, r3, #5
    7750:	d400      	bmi.n	7754 <__aeabi_fsub+0xa4>
    7752:	e080      	b.n	7856 <__aeabi_fsub+0x1a6>
    7754:	3501      	adds	r5, #1
    7756:	b2ec      	uxtb	r4, r5
    7758:	2dff      	cmp	r5, #255	; 0xff
    775a:	d000      	beq.n	775e <__aeabi_fsub+0xae>
    775c:	e0a3      	b.n	78a6 <__aeabi_fsub+0x1f6>
    775e:	24ff      	movs	r4, #255	; 0xff
    7760:	2300      	movs	r3, #0
    7762:	025b      	lsls	r3, r3, #9
    7764:	05e4      	lsls	r4, r4, #23
    7766:	0a58      	lsrs	r0, r3, #9
    7768:	07d2      	lsls	r2, r2, #31
    776a:	4320      	orrs	r0, r4
    776c:	4310      	orrs	r0, r2
    776e:	bc0c      	pop	{r2, r3}
    7770:	4690      	mov	r8, r2
    7772:	4699      	mov	r9, r3
    7774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7776:	2e00      	cmp	r6, #0
    7778:	d174      	bne.n	7864 <__aeabi_fsub+0x1b4>
    777a:	1c60      	adds	r0, r4, #1
    777c:	b2c0      	uxtb	r0, r0
    777e:	2801      	cmp	r0, #1
    7780:	dc00      	bgt.n	7784 <__aeabi_fsub+0xd4>
    7782:	e0a7      	b.n	78d4 <__aeabi_fsub+0x224>
    7784:	464a      	mov	r2, r9
    7786:	1a9c      	subs	r4, r3, r2
    7788:	0162      	lsls	r2, r4, #5
    778a:	d500      	bpl.n	778e <__aeabi_fsub+0xde>
    778c:	e0b6      	b.n	78fc <__aeabi_fsub+0x24c>
    778e:	2c00      	cmp	r4, #0
    7790:	d1be      	bne.n	7710 <__aeabi_fsub+0x60>
    7792:	2200      	movs	r2, #0
    7794:	2400      	movs	r4, #0
    7796:	2300      	movs	r3, #0
    7798:	e7e3      	b.n	7762 <__aeabi_fsub+0xb2>
    779a:	2e00      	cmp	r6, #0
    779c:	dc00      	bgt.n	77a0 <__aeabi_fsub+0xf0>
    779e:	e085      	b.n	78ac <__aeabi_fsub+0x1fc>
    77a0:	2800      	cmp	r0, #0
    77a2:	d046      	beq.n	7832 <__aeabi_fsub+0x182>
    77a4:	2cff      	cmp	r4, #255	; 0xff
    77a6:	d049      	beq.n	783c <__aeabi_fsub+0x18c>
    77a8:	2280      	movs	r2, #128	; 0x80
    77aa:	4648      	mov	r0, r9
    77ac:	04d2      	lsls	r2, r2, #19
    77ae:	4310      	orrs	r0, r2
    77b0:	4681      	mov	r9, r0
    77b2:	2201      	movs	r2, #1
    77b4:	2e1b      	cmp	r6, #27
    77b6:	dc09      	bgt.n	77cc <__aeabi_fsub+0x11c>
    77b8:	2020      	movs	r0, #32
    77ba:	464c      	mov	r4, r9
    77bc:	1b80      	subs	r0, r0, r6
    77be:	4084      	lsls	r4, r0
    77c0:	464a      	mov	r2, r9
    77c2:	0020      	movs	r0, r4
    77c4:	40f2      	lsrs	r2, r6
    77c6:	1e44      	subs	r4, r0, #1
    77c8:	41a0      	sbcs	r0, r4
    77ca:	4302      	orrs	r2, r0
    77cc:	189b      	adds	r3, r3, r2
    77ce:	015a      	lsls	r2, r3, #5
    77d0:	d528      	bpl.n	7824 <__aeabi_fsub+0x174>
    77d2:	3501      	adds	r5, #1
    77d4:	2dff      	cmp	r5, #255	; 0xff
    77d6:	d100      	bne.n	77da <__aeabi_fsub+0x12a>
    77d8:	e0a8      	b.n	792c <__aeabi_fsub+0x27c>
    77da:	2201      	movs	r2, #1
    77dc:	2407      	movs	r4, #7
    77de:	4994      	ldr	r1, [pc, #592]	; (7a30 <__aeabi_fsub+0x380>)
    77e0:	401a      	ands	r2, r3
    77e2:	085b      	lsrs	r3, r3, #1
    77e4:	400b      	ands	r3, r1
    77e6:	4313      	orrs	r3, r2
    77e8:	401c      	ands	r4, r3
    77ea:	e7a6      	b.n	773a <__aeabi_fsub+0x8a>
    77ec:	2e00      	cmp	r6, #0
    77ee:	d000      	beq.n	77f2 <__aeabi_fsub+0x142>
    77f0:	e778      	b.n	76e4 <__aeabi_fsub+0x34>
    77f2:	e775      	b.n	76e0 <__aeabi_fsub+0x30>
    77f4:	2cff      	cmp	r4, #255	; 0xff
    77f6:	d054      	beq.n	78a2 <__aeabi_fsub+0x1f2>
    77f8:	2280      	movs	r2, #128	; 0x80
    77fa:	4649      	mov	r1, r9
    77fc:	04d2      	lsls	r2, r2, #19
    77fe:	4311      	orrs	r1, r2
    7800:	4689      	mov	r9, r1
    7802:	2201      	movs	r2, #1
    7804:	2e1b      	cmp	r6, #27
    7806:	dc09      	bgt.n	781c <__aeabi_fsub+0x16c>
    7808:	2120      	movs	r1, #32
    780a:	4648      	mov	r0, r9
    780c:	1b89      	subs	r1, r1, r6
    780e:	4088      	lsls	r0, r1
    7810:	464a      	mov	r2, r9
    7812:	0001      	movs	r1, r0
    7814:	40f2      	lsrs	r2, r6
    7816:	1e48      	subs	r0, r1, #1
    7818:	4181      	sbcs	r1, r0
    781a:	430a      	orrs	r2, r1
    781c:	1a9b      	subs	r3, r3, r2
    781e:	015a      	lsls	r2, r3, #5
    7820:	d500      	bpl.n	7824 <__aeabi_fsub+0x174>
    7822:	e773      	b.n	770c <__aeabi_fsub+0x5c>
    7824:	2201      	movs	r2, #1
    7826:	4641      	mov	r1, r8
    7828:	400a      	ands	r2, r1
    782a:	0759      	lsls	r1, r3, #29
    782c:	d000      	beq.n	7830 <__aeabi_fsub+0x180>
    782e:	e789      	b.n	7744 <__aeabi_fsub+0x94>
    7830:	e011      	b.n	7856 <__aeabi_fsub+0x1a6>
    7832:	4648      	mov	r0, r9
    7834:	2800      	cmp	r0, #0
    7836:	d158      	bne.n	78ea <__aeabi_fsub+0x23a>
    7838:	2cff      	cmp	r4, #255	; 0xff
    783a:	d10c      	bne.n	7856 <__aeabi_fsub+0x1a6>
    783c:	08db      	lsrs	r3, r3, #3
    783e:	2b00      	cmp	r3, #0
    7840:	d100      	bne.n	7844 <__aeabi_fsub+0x194>
    7842:	e78c      	b.n	775e <__aeabi_fsub+0xae>
    7844:	2080      	movs	r0, #128	; 0x80
    7846:	03c0      	lsls	r0, r0, #15
    7848:	4303      	orrs	r3, r0
    784a:	025b      	lsls	r3, r3, #9
    784c:	0a5b      	lsrs	r3, r3, #9
    784e:	24ff      	movs	r4, #255	; 0xff
    7850:	e787      	b.n	7762 <__aeabi_fsub+0xb2>
    7852:	2cff      	cmp	r4, #255	; 0xff
    7854:	d025      	beq.n	78a2 <__aeabi_fsub+0x1f2>
    7856:	08db      	lsrs	r3, r3, #3
    7858:	2dff      	cmp	r5, #255	; 0xff
    785a:	d0f0      	beq.n	783e <__aeabi_fsub+0x18e>
    785c:	025b      	lsls	r3, r3, #9
    785e:	0a5b      	lsrs	r3, r3, #9
    7860:	b2ec      	uxtb	r4, r5
    7862:	e77e      	b.n	7762 <__aeabi_fsub+0xb2>
    7864:	2c00      	cmp	r4, #0
    7866:	d04d      	beq.n	7904 <__aeabi_fsub+0x254>
    7868:	28ff      	cmp	r0, #255	; 0xff
    786a:	d018      	beq.n	789e <__aeabi_fsub+0x1ee>
    786c:	2480      	movs	r4, #128	; 0x80
    786e:	04e4      	lsls	r4, r4, #19
    7870:	4272      	negs	r2, r6
    7872:	4323      	orrs	r3, r4
    7874:	2a1b      	cmp	r2, #27
    7876:	dd00      	ble.n	787a <__aeabi_fsub+0x1ca>
    7878:	e0c4      	b.n	7a04 <__aeabi_fsub+0x354>
    787a:	001c      	movs	r4, r3
    787c:	2520      	movs	r5, #32
    787e:	40d4      	lsrs	r4, r2
    7880:	1aaa      	subs	r2, r5, r2
    7882:	4093      	lsls	r3, r2
    7884:	1e5a      	subs	r2, r3, #1
    7886:	4193      	sbcs	r3, r2
    7888:	4323      	orrs	r3, r4
    788a:	464a      	mov	r2, r9
    788c:	0005      	movs	r5, r0
    788e:	1ad3      	subs	r3, r2, r3
    7890:	4688      	mov	r8, r1
    7892:	e738      	b.n	7706 <__aeabi_fsub+0x56>
    7894:	1c72      	adds	r2, r6, #1
    7896:	d0f8      	beq.n	788a <__aeabi_fsub+0x1da>
    7898:	43f2      	mvns	r2, r6
    789a:	28ff      	cmp	r0, #255	; 0xff
    789c:	d1ea      	bne.n	7874 <__aeabi_fsub+0x1c4>
    789e:	000a      	movs	r2, r1
    78a0:	464b      	mov	r3, r9
    78a2:	25ff      	movs	r5, #255	; 0xff
    78a4:	e7d7      	b.n	7856 <__aeabi_fsub+0x1a6>
    78a6:	019b      	lsls	r3, r3, #6
    78a8:	0a5b      	lsrs	r3, r3, #9
    78aa:	e75a      	b.n	7762 <__aeabi_fsub+0xb2>
    78ac:	2e00      	cmp	r6, #0
    78ae:	d141      	bne.n	7934 <__aeabi_fsub+0x284>
    78b0:	1c65      	adds	r5, r4, #1
    78b2:	b2e9      	uxtb	r1, r5
    78b4:	2901      	cmp	r1, #1
    78b6:	dd45      	ble.n	7944 <__aeabi_fsub+0x294>
    78b8:	2dff      	cmp	r5, #255	; 0xff
    78ba:	d100      	bne.n	78be <__aeabi_fsub+0x20e>
    78bc:	e74f      	b.n	775e <__aeabi_fsub+0xae>
    78be:	2407      	movs	r4, #7
    78c0:	444b      	add	r3, r9
    78c2:	085b      	lsrs	r3, r3, #1
    78c4:	401c      	ands	r4, r3
    78c6:	e738      	b.n	773a <__aeabi_fsub+0x8a>
    78c8:	2207      	movs	r2, #7
    78ca:	4b5a      	ldr	r3, [pc, #360]	; (7a34 <__aeabi_fsub+0x384>)
    78cc:	1a2d      	subs	r5, r5, r0
    78ce:	4023      	ands	r3, r4
    78d0:	4014      	ands	r4, r2
    78d2:	e732      	b.n	773a <__aeabi_fsub+0x8a>
    78d4:	2c00      	cmp	r4, #0
    78d6:	d11d      	bne.n	7914 <__aeabi_fsub+0x264>
    78d8:	2b00      	cmp	r3, #0
    78da:	d17a      	bne.n	79d2 <__aeabi_fsub+0x322>
    78dc:	464b      	mov	r3, r9
    78de:	2b00      	cmp	r3, #0
    78e0:	d100      	bne.n	78e4 <__aeabi_fsub+0x234>
    78e2:	e091      	b.n	7a08 <__aeabi_fsub+0x358>
    78e4:	000a      	movs	r2, r1
    78e6:	2500      	movs	r5, #0
    78e8:	e7b5      	b.n	7856 <__aeabi_fsub+0x1a6>
    78ea:	3e01      	subs	r6, #1
    78ec:	2e00      	cmp	r6, #0
    78ee:	d119      	bne.n	7924 <__aeabi_fsub+0x274>
    78f0:	444b      	add	r3, r9
    78f2:	e76c      	b.n	77ce <__aeabi_fsub+0x11e>
    78f4:	2cff      	cmp	r4, #255	; 0xff
    78f6:	d184      	bne.n	7802 <__aeabi_fsub+0x152>
    78f8:	25ff      	movs	r5, #255	; 0xff
    78fa:	e7ac      	b.n	7856 <__aeabi_fsub+0x1a6>
    78fc:	464a      	mov	r2, r9
    78fe:	4688      	mov	r8, r1
    7900:	1ad4      	subs	r4, r2, r3
    7902:	e705      	b.n	7710 <__aeabi_fsub+0x60>
    7904:	2b00      	cmp	r3, #0
    7906:	d1c5      	bne.n	7894 <__aeabi_fsub+0x1e4>
    7908:	000a      	movs	r2, r1
    790a:	28ff      	cmp	r0, #255	; 0xff
    790c:	d0c8      	beq.n	78a0 <__aeabi_fsub+0x1f0>
    790e:	0005      	movs	r5, r0
    7910:	464b      	mov	r3, r9
    7912:	e7a0      	b.n	7856 <__aeabi_fsub+0x1a6>
    7914:	2b00      	cmp	r3, #0
    7916:	d149      	bne.n	79ac <__aeabi_fsub+0x2fc>
    7918:	464b      	mov	r3, r9
    791a:	2b00      	cmp	r3, #0
    791c:	d077      	beq.n	7a0e <__aeabi_fsub+0x35e>
    791e:	000a      	movs	r2, r1
    7920:	25ff      	movs	r5, #255	; 0xff
    7922:	e798      	b.n	7856 <__aeabi_fsub+0x1a6>
    7924:	2cff      	cmp	r4, #255	; 0xff
    7926:	d000      	beq.n	792a <__aeabi_fsub+0x27a>
    7928:	e743      	b.n	77b2 <__aeabi_fsub+0x102>
    792a:	e787      	b.n	783c <__aeabi_fsub+0x18c>
    792c:	000a      	movs	r2, r1
    792e:	24ff      	movs	r4, #255	; 0xff
    7930:	2300      	movs	r3, #0
    7932:	e716      	b.n	7762 <__aeabi_fsub+0xb2>
    7934:	2c00      	cmp	r4, #0
    7936:	d115      	bne.n	7964 <__aeabi_fsub+0x2b4>
    7938:	2b00      	cmp	r3, #0
    793a:	d157      	bne.n	79ec <__aeabi_fsub+0x33c>
    793c:	28ff      	cmp	r0, #255	; 0xff
    793e:	d1e6      	bne.n	790e <__aeabi_fsub+0x25e>
    7940:	464b      	mov	r3, r9
    7942:	e77b      	b.n	783c <__aeabi_fsub+0x18c>
    7944:	2c00      	cmp	r4, #0
    7946:	d120      	bne.n	798a <__aeabi_fsub+0x2da>
    7948:	2b00      	cmp	r3, #0
    794a:	d057      	beq.n	79fc <__aeabi_fsub+0x34c>
    794c:	4649      	mov	r1, r9
    794e:	2900      	cmp	r1, #0
    7950:	d053      	beq.n	79fa <__aeabi_fsub+0x34a>
    7952:	444b      	add	r3, r9
    7954:	015a      	lsls	r2, r3, #5
    7956:	d568      	bpl.n	7a2a <__aeabi_fsub+0x37a>
    7958:	2407      	movs	r4, #7
    795a:	4a36      	ldr	r2, [pc, #216]	; (7a34 <__aeabi_fsub+0x384>)
    795c:	401c      	ands	r4, r3
    795e:	2501      	movs	r5, #1
    7960:	4013      	ands	r3, r2
    7962:	e6ea      	b.n	773a <__aeabi_fsub+0x8a>
    7964:	28ff      	cmp	r0, #255	; 0xff
    7966:	d0eb      	beq.n	7940 <__aeabi_fsub+0x290>
    7968:	2280      	movs	r2, #128	; 0x80
    796a:	04d2      	lsls	r2, r2, #19
    796c:	4276      	negs	r6, r6
    796e:	4313      	orrs	r3, r2
    7970:	2e1b      	cmp	r6, #27
    7972:	dc53      	bgt.n	7a1c <__aeabi_fsub+0x36c>
    7974:	2520      	movs	r5, #32
    7976:	1bad      	subs	r5, r5, r6
    7978:	001a      	movs	r2, r3
    797a:	40ab      	lsls	r3, r5
    797c:	40f2      	lsrs	r2, r6
    797e:	1e5c      	subs	r4, r3, #1
    7980:	41a3      	sbcs	r3, r4
    7982:	4313      	orrs	r3, r2
    7984:	444b      	add	r3, r9
    7986:	0005      	movs	r5, r0
    7988:	e721      	b.n	77ce <__aeabi_fsub+0x11e>
    798a:	2b00      	cmp	r3, #0
    798c:	d0d8      	beq.n	7940 <__aeabi_fsub+0x290>
    798e:	4649      	mov	r1, r9
    7990:	2900      	cmp	r1, #0
    7992:	d100      	bne.n	7996 <__aeabi_fsub+0x2e6>
    7994:	e752      	b.n	783c <__aeabi_fsub+0x18c>
    7996:	2180      	movs	r1, #128	; 0x80
    7998:	03c9      	lsls	r1, r1, #15
    799a:	420f      	tst	r7, r1
    799c:	d100      	bne.n	79a0 <__aeabi_fsub+0x2f0>
    799e:	e74d      	b.n	783c <__aeabi_fsub+0x18c>
    79a0:	4660      	mov	r0, ip
    79a2:	4208      	tst	r0, r1
    79a4:	d000      	beq.n	79a8 <__aeabi_fsub+0x2f8>
    79a6:	e749      	b.n	783c <__aeabi_fsub+0x18c>
    79a8:	464b      	mov	r3, r9
    79aa:	e747      	b.n	783c <__aeabi_fsub+0x18c>
    79ac:	4648      	mov	r0, r9
    79ae:	25ff      	movs	r5, #255	; 0xff
    79b0:	2800      	cmp	r0, #0
    79b2:	d100      	bne.n	79b6 <__aeabi_fsub+0x306>
    79b4:	e74f      	b.n	7856 <__aeabi_fsub+0x1a6>
    79b6:	2280      	movs	r2, #128	; 0x80
    79b8:	03d2      	lsls	r2, r2, #15
    79ba:	4217      	tst	r7, r2
    79bc:	d004      	beq.n	79c8 <__aeabi_fsub+0x318>
    79be:	4660      	mov	r0, ip
    79c0:	4210      	tst	r0, r2
    79c2:	d101      	bne.n	79c8 <__aeabi_fsub+0x318>
    79c4:	464b      	mov	r3, r9
    79c6:	4688      	mov	r8, r1
    79c8:	2201      	movs	r2, #1
    79ca:	4641      	mov	r1, r8
    79cc:	25ff      	movs	r5, #255	; 0xff
    79ce:	400a      	ands	r2, r1
    79d0:	e741      	b.n	7856 <__aeabi_fsub+0x1a6>
    79d2:	4648      	mov	r0, r9
    79d4:	2800      	cmp	r0, #0
    79d6:	d01f      	beq.n	7a18 <__aeabi_fsub+0x368>
    79d8:	1a1a      	subs	r2, r3, r0
    79da:	0150      	lsls	r0, r2, #5
    79dc:	d520      	bpl.n	7a20 <__aeabi_fsub+0x370>
    79de:	464a      	mov	r2, r9
    79e0:	2407      	movs	r4, #7
    79e2:	1ad3      	subs	r3, r2, r3
    79e4:	401c      	ands	r4, r3
    79e6:	4688      	mov	r8, r1
    79e8:	2500      	movs	r5, #0
    79ea:	e6a6      	b.n	773a <__aeabi_fsub+0x8a>
    79ec:	1c74      	adds	r4, r6, #1
    79ee:	d0c9      	beq.n	7984 <__aeabi_fsub+0x2d4>
    79f0:	43f6      	mvns	r6, r6
    79f2:	28ff      	cmp	r0, #255	; 0xff
    79f4:	d1bc      	bne.n	7970 <__aeabi_fsub+0x2c0>
    79f6:	464b      	mov	r3, r9
    79f8:	e720      	b.n	783c <__aeabi_fsub+0x18c>
    79fa:	4699      	mov	r9, r3
    79fc:	464b      	mov	r3, r9
    79fe:	2500      	movs	r5, #0
    7a00:	08db      	lsrs	r3, r3, #3
    7a02:	e72b      	b.n	785c <__aeabi_fsub+0x1ac>
    7a04:	2301      	movs	r3, #1
    7a06:	e740      	b.n	788a <__aeabi_fsub+0x1da>
    7a08:	2200      	movs	r2, #0
    7a0a:	2300      	movs	r3, #0
    7a0c:	e6a9      	b.n	7762 <__aeabi_fsub+0xb2>
    7a0e:	2380      	movs	r3, #128	; 0x80
    7a10:	2200      	movs	r2, #0
    7a12:	03db      	lsls	r3, r3, #15
    7a14:	24ff      	movs	r4, #255	; 0xff
    7a16:	e6a4      	b.n	7762 <__aeabi_fsub+0xb2>
    7a18:	2500      	movs	r5, #0
    7a1a:	e71c      	b.n	7856 <__aeabi_fsub+0x1a6>
    7a1c:	2301      	movs	r3, #1
    7a1e:	e7b1      	b.n	7984 <__aeabi_fsub+0x2d4>
    7a20:	2a00      	cmp	r2, #0
    7a22:	d0f1      	beq.n	7a08 <__aeabi_fsub+0x358>
    7a24:	0013      	movs	r3, r2
    7a26:	2500      	movs	r5, #0
    7a28:	e6fc      	b.n	7824 <__aeabi_fsub+0x174>
    7a2a:	2500      	movs	r5, #0
    7a2c:	e6fa      	b.n	7824 <__aeabi_fsub+0x174>
    7a2e:	46c0      	nop			; (mov r8, r8)
    7a30:	7dffffff 	.word	0x7dffffff
    7a34:	fbffffff 	.word	0xfbffffff

00007a38 <__aeabi_f2iz>:
__aeabi_f2iz():
    7a38:	0241      	lsls	r1, r0, #9
    7a3a:	0042      	lsls	r2, r0, #1
    7a3c:	0fc3      	lsrs	r3, r0, #31
    7a3e:	0a49      	lsrs	r1, r1, #9
    7a40:	0e12      	lsrs	r2, r2, #24
    7a42:	2000      	movs	r0, #0
    7a44:	2a7e      	cmp	r2, #126	; 0x7e
    7a46:	d90d      	bls.n	7a64 <__aeabi_f2iz+0x2c>
    7a48:	2a9d      	cmp	r2, #157	; 0x9d
    7a4a:	d80c      	bhi.n	7a66 <__aeabi_f2iz+0x2e>
    7a4c:	2080      	movs	r0, #128	; 0x80
    7a4e:	0400      	lsls	r0, r0, #16
    7a50:	4301      	orrs	r1, r0
    7a52:	2a95      	cmp	r2, #149	; 0x95
    7a54:	dc0a      	bgt.n	7a6c <__aeabi_f2iz+0x34>
    7a56:	2096      	movs	r0, #150	; 0x96
    7a58:	1a82      	subs	r2, r0, r2
    7a5a:	40d1      	lsrs	r1, r2
    7a5c:	4248      	negs	r0, r1
    7a5e:	2b00      	cmp	r3, #0
    7a60:	d100      	bne.n	7a64 <__aeabi_f2iz+0x2c>
    7a62:	0008      	movs	r0, r1
    7a64:	4770      	bx	lr
    7a66:	4a03      	ldr	r2, [pc, #12]	; (7a74 <__aeabi_f2iz+0x3c>)
    7a68:	1898      	adds	r0, r3, r2
    7a6a:	e7fb      	b.n	7a64 <__aeabi_f2iz+0x2c>
    7a6c:	3a96      	subs	r2, #150	; 0x96
    7a6e:	4091      	lsls	r1, r2
    7a70:	e7f4      	b.n	7a5c <__aeabi_f2iz+0x24>
    7a72:	46c0      	nop			; (mov r8, r8)
    7a74:	7fffffff 	.word	0x7fffffff

00007a78 <__aeabi_i2f>:
__aeabi_i2f():
    7a78:	b570      	push	{r4, r5, r6, lr}
    7a7a:	2800      	cmp	r0, #0
    7a7c:	d03d      	beq.n	7afa <__aeabi_i2f+0x82>
    7a7e:	17c3      	asrs	r3, r0, #31
    7a80:	18c5      	adds	r5, r0, r3
    7a82:	405d      	eors	r5, r3
    7a84:	0fc4      	lsrs	r4, r0, #31
    7a86:	0028      	movs	r0, r5
    7a88:	f001 fb7c 	bl	9184 <__clzsi2>
    7a8c:	229e      	movs	r2, #158	; 0x9e
    7a8e:	1a12      	subs	r2, r2, r0
    7a90:	2a96      	cmp	r2, #150	; 0x96
    7a92:	dc07      	bgt.n	7aa4 <__aeabi_i2f+0x2c>
    7a94:	b2d2      	uxtb	r2, r2
    7a96:	2808      	cmp	r0, #8
    7a98:	dd33      	ble.n	7b02 <__aeabi_i2f+0x8a>
    7a9a:	3808      	subs	r0, #8
    7a9c:	4085      	lsls	r5, r0
    7a9e:	0268      	lsls	r0, r5, #9
    7aa0:	0a40      	lsrs	r0, r0, #9
    7aa2:	e023      	b.n	7aec <__aeabi_i2f+0x74>
    7aa4:	2a99      	cmp	r2, #153	; 0x99
    7aa6:	dd0b      	ble.n	7ac0 <__aeabi_i2f+0x48>
    7aa8:	2305      	movs	r3, #5
    7aaa:	0029      	movs	r1, r5
    7aac:	1a1b      	subs	r3, r3, r0
    7aae:	40d9      	lsrs	r1, r3
    7ab0:	0003      	movs	r3, r0
    7ab2:	331b      	adds	r3, #27
    7ab4:	409d      	lsls	r5, r3
    7ab6:	002b      	movs	r3, r5
    7ab8:	1e5d      	subs	r5, r3, #1
    7aba:	41ab      	sbcs	r3, r5
    7abc:	4319      	orrs	r1, r3
    7abe:	000d      	movs	r5, r1
    7ac0:	2805      	cmp	r0, #5
    7ac2:	dd01      	ble.n	7ac8 <__aeabi_i2f+0x50>
    7ac4:	1f43      	subs	r3, r0, #5
    7ac6:	409d      	lsls	r5, r3
    7ac8:	002b      	movs	r3, r5
    7aca:	490f      	ldr	r1, [pc, #60]	; (7b08 <__aeabi_i2f+0x90>)
    7acc:	400b      	ands	r3, r1
    7ace:	076e      	lsls	r6, r5, #29
    7ad0:	d009      	beq.n	7ae6 <__aeabi_i2f+0x6e>
    7ad2:	260f      	movs	r6, #15
    7ad4:	4035      	ands	r5, r6
    7ad6:	2d04      	cmp	r5, #4
    7ad8:	d005      	beq.n	7ae6 <__aeabi_i2f+0x6e>
    7ada:	3304      	adds	r3, #4
    7adc:	015d      	lsls	r5, r3, #5
    7ade:	d502      	bpl.n	7ae6 <__aeabi_i2f+0x6e>
    7ae0:	229f      	movs	r2, #159	; 0x9f
    7ae2:	400b      	ands	r3, r1
    7ae4:	1a12      	subs	r2, r2, r0
    7ae6:	019b      	lsls	r3, r3, #6
    7ae8:	0a58      	lsrs	r0, r3, #9
    7aea:	b2d2      	uxtb	r2, r2
    7aec:	0240      	lsls	r0, r0, #9
    7aee:	05d2      	lsls	r2, r2, #23
    7af0:	0a40      	lsrs	r0, r0, #9
    7af2:	07e4      	lsls	r4, r4, #31
    7af4:	4310      	orrs	r0, r2
    7af6:	4320      	orrs	r0, r4
    7af8:	bd70      	pop	{r4, r5, r6, pc}
    7afa:	2400      	movs	r4, #0
    7afc:	2200      	movs	r2, #0
    7afe:	2000      	movs	r0, #0
    7b00:	e7f4      	b.n	7aec <__aeabi_i2f+0x74>
    7b02:	0268      	lsls	r0, r5, #9
    7b04:	0a40      	lsrs	r0, r0, #9
    7b06:	e7f1      	b.n	7aec <__aeabi_i2f+0x74>
    7b08:	fbffffff 	.word	0xfbffffff

00007b0c <__aeabi_ddiv>:
__aeabi_ddiv():
    7b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7b0e:	4657      	mov	r7, sl
    7b10:	46de      	mov	lr, fp
    7b12:	464e      	mov	r6, r9
    7b14:	4645      	mov	r5, r8
    7b16:	b5e0      	push	{r5, r6, r7, lr}
    7b18:	4683      	mov	fp, r0
    7b1a:	0007      	movs	r7, r0
    7b1c:	030e      	lsls	r6, r1, #12
    7b1e:	0048      	lsls	r0, r1, #1
    7b20:	b085      	sub	sp, #20
    7b22:	4692      	mov	sl, r2
    7b24:	001c      	movs	r4, r3
    7b26:	0b36      	lsrs	r6, r6, #12
    7b28:	0d40      	lsrs	r0, r0, #21
    7b2a:	0fcd      	lsrs	r5, r1, #31
    7b2c:	2800      	cmp	r0, #0
    7b2e:	d100      	bne.n	7b32 <__aeabi_ddiv+0x26>
    7b30:	e09d      	b.n	7c6e <__aeabi_ddiv+0x162>
    7b32:	4b95      	ldr	r3, [pc, #596]	; (7d88 <__aeabi_ddiv+0x27c>)
    7b34:	4298      	cmp	r0, r3
    7b36:	d039      	beq.n	7bac <__aeabi_ddiv+0xa0>
    7b38:	2380      	movs	r3, #128	; 0x80
    7b3a:	00f6      	lsls	r6, r6, #3
    7b3c:	041b      	lsls	r3, r3, #16
    7b3e:	431e      	orrs	r6, r3
    7b40:	4a92      	ldr	r2, [pc, #584]	; (7d8c <__aeabi_ddiv+0x280>)
    7b42:	0f7b      	lsrs	r3, r7, #29
    7b44:	4333      	orrs	r3, r6
    7b46:	4699      	mov	r9, r3
    7b48:	4694      	mov	ip, r2
    7b4a:	0003      	movs	r3, r0
    7b4c:	4463      	add	r3, ip
    7b4e:	9300      	str	r3, [sp, #0]
    7b50:	2300      	movs	r3, #0
    7b52:	2600      	movs	r6, #0
    7b54:	00ff      	lsls	r7, r7, #3
    7b56:	9302      	str	r3, [sp, #8]
    7b58:	0323      	lsls	r3, r4, #12
    7b5a:	0b1b      	lsrs	r3, r3, #12
    7b5c:	4698      	mov	r8, r3
    7b5e:	0063      	lsls	r3, r4, #1
    7b60:	0fe4      	lsrs	r4, r4, #31
    7b62:	4652      	mov	r2, sl
    7b64:	0d5b      	lsrs	r3, r3, #21
    7b66:	9401      	str	r4, [sp, #4]
    7b68:	d100      	bne.n	7b6c <__aeabi_ddiv+0x60>
    7b6a:	e0b3      	b.n	7cd4 <__aeabi_ddiv+0x1c8>
    7b6c:	4986      	ldr	r1, [pc, #536]	; (7d88 <__aeabi_ddiv+0x27c>)
    7b6e:	428b      	cmp	r3, r1
    7b70:	d100      	bne.n	7b74 <__aeabi_ddiv+0x68>
    7b72:	e09e      	b.n	7cb2 <__aeabi_ddiv+0x1a6>
    7b74:	4642      	mov	r2, r8
    7b76:	00d1      	lsls	r1, r2, #3
    7b78:	2280      	movs	r2, #128	; 0x80
    7b7a:	0412      	lsls	r2, r2, #16
    7b7c:	430a      	orrs	r2, r1
    7b7e:	4651      	mov	r1, sl
    7b80:	0f49      	lsrs	r1, r1, #29
    7b82:	4311      	orrs	r1, r2
    7b84:	468b      	mov	fp, r1
    7b86:	4981      	ldr	r1, [pc, #516]	; (7d8c <__aeabi_ddiv+0x280>)
    7b88:	4652      	mov	r2, sl
    7b8a:	468c      	mov	ip, r1
    7b8c:	9900      	ldr	r1, [sp, #0]
    7b8e:	4463      	add	r3, ip
    7b90:	1acb      	subs	r3, r1, r3
    7b92:	2100      	movs	r1, #0
    7b94:	00d2      	lsls	r2, r2, #3
    7b96:	9300      	str	r3, [sp, #0]
    7b98:	002b      	movs	r3, r5
    7b9a:	4063      	eors	r3, r4
    7b9c:	469a      	mov	sl, r3
    7b9e:	2e0f      	cmp	r6, #15
    7ba0:	d900      	bls.n	7ba4 <__aeabi_ddiv+0x98>
    7ba2:	e105      	b.n	7db0 <__aeabi_ddiv+0x2a4>
    7ba4:	4b7a      	ldr	r3, [pc, #488]	; (7d90 <__aeabi_ddiv+0x284>)
    7ba6:	00b6      	lsls	r6, r6, #2
    7ba8:	599b      	ldr	r3, [r3, r6]
    7baa:	469f      	mov	pc, r3
    7bac:	465b      	mov	r3, fp
    7bae:	4333      	orrs	r3, r6
    7bb0:	4699      	mov	r9, r3
    7bb2:	d000      	beq.n	7bb6 <__aeabi_ddiv+0xaa>
    7bb4:	e0b8      	b.n	7d28 <__aeabi_ddiv+0x21c>
    7bb6:	2302      	movs	r3, #2
    7bb8:	2608      	movs	r6, #8
    7bba:	2700      	movs	r7, #0
    7bbc:	9000      	str	r0, [sp, #0]
    7bbe:	9302      	str	r3, [sp, #8]
    7bc0:	e7ca      	b.n	7b58 <__aeabi_ddiv+0x4c>
    7bc2:	46cb      	mov	fp, r9
    7bc4:	003a      	movs	r2, r7
    7bc6:	9902      	ldr	r1, [sp, #8]
    7bc8:	9501      	str	r5, [sp, #4]
    7bca:	9b01      	ldr	r3, [sp, #4]
    7bcc:	469a      	mov	sl, r3
    7bce:	2902      	cmp	r1, #2
    7bd0:	d027      	beq.n	7c22 <__aeabi_ddiv+0x116>
    7bd2:	2903      	cmp	r1, #3
    7bd4:	d100      	bne.n	7bd8 <__aeabi_ddiv+0xcc>
    7bd6:	e280      	b.n	80da <__aeabi_ddiv+0x5ce>
    7bd8:	2901      	cmp	r1, #1
    7bda:	d044      	beq.n	7c66 <__aeabi_ddiv+0x15a>
    7bdc:	496d      	ldr	r1, [pc, #436]	; (7d94 <__aeabi_ddiv+0x288>)
    7bde:	9b00      	ldr	r3, [sp, #0]
    7be0:	468c      	mov	ip, r1
    7be2:	4463      	add	r3, ip
    7be4:	001c      	movs	r4, r3
    7be6:	2c00      	cmp	r4, #0
    7be8:	dd38      	ble.n	7c5c <__aeabi_ddiv+0x150>
    7bea:	0753      	lsls	r3, r2, #29
    7bec:	d000      	beq.n	7bf0 <__aeabi_ddiv+0xe4>
    7bee:	e213      	b.n	8018 <__aeabi_ddiv+0x50c>
    7bf0:	08d2      	lsrs	r2, r2, #3
    7bf2:	465b      	mov	r3, fp
    7bf4:	01db      	lsls	r3, r3, #7
    7bf6:	d509      	bpl.n	7c0c <__aeabi_ddiv+0x100>
    7bf8:	4659      	mov	r1, fp
    7bfa:	4b67      	ldr	r3, [pc, #412]	; (7d98 <__aeabi_ddiv+0x28c>)
    7bfc:	4019      	ands	r1, r3
    7bfe:	468b      	mov	fp, r1
    7c00:	2180      	movs	r1, #128	; 0x80
    7c02:	00c9      	lsls	r1, r1, #3
    7c04:	468c      	mov	ip, r1
    7c06:	9b00      	ldr	r3, [sp, #0]
    7c08:	4463      	add	r3, ip
    7c0a:	001c      	movs	r4, r3
    7c0c:	4b63      	ldr	r3, [pc, #396]	; (7d9c <__aeabi_ddiv+0x290>)
    7c0e:	429c      	cmp	r4, r3
    7c10:	dc07      	bgt.n	7c22 <__aeabi_ddiv+0x116>
    7c12:	465b      	mov	r3, fp
    7c14:	0564      	lsls	r4, r4, #21
    7c16:	075f      	lsls	r7, r3, #29
    7c18:	025b      	lsls	r3, r3, #9
    7c1a:	4317      	orrs	r7, r2
    7c1c:	0b1b      	lsrs	r3, r3, #12
    7c1e:	0d62      	lsrs	r2, r4, #21
    7c20:	e002      	b.n	7c28 <__aeabi_ddiv+0x11c>
    7c22:	2300      	movs	r3, #0
    7c24:	2700      	movs	r7, #0
    7c26:	4a58      	ldr	r2, [pc, #352]	; (7d88 <__aeabi_ddiv+0x27c>)
    7c28:	2100      	movs	r1, #0
    7c2a:	031b      	lsls	r3, r3, #12
    7c2c:	0b1c      	lsrs	r4, r3, #12
    7c2e:	0d0b      	lsrs	r3, r1, #20
    7c30:	051b      	lsls	r3, r3, #20
    7c32:	4323      	orrs	r3, r4
    7c34:	0514      	lsls	r4, r2, #20
    7c36:	4a5a      	ldr	r2, [pc, #360]	; (7da0 <__aeabi_ddiv+0x294>)
    7c38:	0038      	movs	r0, r7
    7c3a:	4013      	ands	r3, r2
    7c3c:	431c      	orrs	r4, r3
    7c3e:	4653      	mov	r3, sl
    7c40:	0064      	lsls	r4, r4, #1
    7c42:	07db      	lsls	r3, r3, #31
    7c44:	0864      	lsrs	r4, r4, #1
    7c46:	431c      	orrs	r4, r3
    7c48:	0021      	movs	r1, r4
    7c4a:	b005      	add	sp, #20
    7c4c:	bc3c      	pop	{r2, r3, r4, r5}
    7c4e:	4690      	mov	r8, r2
    7c50:	4699      	mov	r9, r3
    7c52:	46a2      	mov	sl, r4
    7c54:	46ab      	mov	fp, r5
    7c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7c58:	2201      	movs	r2, #1
    7c5a:	4252      	negs	r2, r2
    7c5c:	2301      	movs	r3, #1
    7c5e:	1b1b      	subs	r3, r3, r4
    7c60:	2b38      	cmp	r3, #56	; 0x38
    7c62:	dc00      	bgt.n	7c66 <__aeabi_ddiv+0x15a>
    7c64:	e1ad      	b.n	7fc2 <__aeabi_ddiv+0x4b6>
    7c66:	2200      	movs	r2, #0
    7c68:	2300      	movs	r3, #0
    7c6a:	2700      	movs	r7, #0
    7c6c:	e7dc      	b.n	7c28 <__aeabi_ddiv+0x11c>
    7c6e:	465b      	mov	r3, fp
    7c70:	4333      	orrs	r3, r6
    7c72:	4699      	mov	r9, r3
    7c74:	d05e      	beq.n	7d34 <__aeabi_ddiv+0x228>
    7c76:	2e00      	cmp	r6, #0
    7c78:	d100      	bne.n	7c7c <__aeabi_ddiv+0x170>
    7c7a:	e18a      	b.n	7f92 <__aeabi_ddiv+0x486>
    7c7c:	0030      	movs	r0, r6
    7c7e:	f001 fa81 	bl	9184 <__clzsi2>
    7c82:	0003      	movs	r3, r0
    7c84:	3b0b      	subs	r3, #11
    7c86:	2b1c      	cmp	r3, #28
    7c88:	dd00      	ble.n	7c8c <__aeabi_ddiv+0x180>
    7c8a:	e17b      	b.n	7f84 <__aeabi_ddiv+0x478>
    7c8c:	221d      	movs	r2, #29
    7c8e:	1ad3      	subs	r3, r2, r3
    7c90:	465a      	mov	r2, fp
    7c92:	0001      	movs	r1, r0
    7c94:	40da      	lsrs	r2, r3
    7c96:	3908      	subs	r1, #8
    7c98:	408e      	lsls	r6, r1
    7c9a:	0013      	movs	r3, r2
    7c9c:	465f      	mov	r7, fp
    7c9e:	4333      	orrs	r3, r6
    7ca0:	4699      	mov	r9, r3
    7ca2:	408f      	lsls	r7, r1
    7ca4:	4b3f      	ldr	r3, [pc, #252]	; (7da4 <__aeabi_ddiv+0x298>)
    7ca6:	2600      	movs	r6, #0
    7ca8:	1a1b      	subs	r3, r3, r0
    7caa:	9300      	str	r3, [sp, #0]
    7cac:	2300      	movs	r3, #0
    7cae:	9302      	str	r3, [sp, #8]
    7cb0:	e752      	b.n	7b58 <__aeabi_ddiv+0x4c>
    7cb2:	4641      	mov	r1, r8
    7cb4:	4653      	mov	r3, sl
    7cb6:	430b      	orrs	r3, r1
    7cb8:	493b      	ldr	r1, [pc, #236]	; (7da8 <__aeabi_ddiv+0x29c>)
    7cba:	469b      	mov	fp, r3
    7cbc:	468c      	mov	ip, r1
    7cbe:	9b00      	ldr	r3, [sp, #0]
    7cc0:	4463      	add	r3, ip
    7cc2:	9300      	str	r3, [sp, #0]
    7cc4:	465b      	mov	r3, fp
    7cc6:	2b00      	cmp	r3, #0
    7cc8:	d13b      	bne.n	7d42 <__aeabi_ddiv+0x236>
    7cca:	2302      	movs	r3, #2
    7ccc:	2200      	movs	r2, #0
    7cce:	431e      	orrs	r6, r3
    7cd0:	2102      	movs	r1, #2
    7cd2:	e761      	b.n	7b98 <__aeabi_ddiv+0x8c>
    7cd4:	4643      	mov	r3, r8
    7cd6:	4313      	orrs	r3, r2
    7cd8:	469b      	mov	fp, r3
    7cda:	d037      	beq.n	7d4c <__aeabi_ddiv+0x240>
    7cdc:	4643      	mov	r3, r8
    7cde:	2b00      	cmp	r3, #0
    7ce0:	d100      	bne.n	7ce4 <__aeabi_ddiv+0x1d8>
    7ce2:	e162      	b.n	7faa <__aeabi_ddiv+0x49e>
    7ce4:	4640      	mov	r0, r8
    7ce6:	f001 fa4d 	bl	9184 <__clzsi2>
    7cea:	0003      	movs	r3, r0
    7cec:	3b0b      	subs	r3, #11
    7cee:	2b1c      	cmp	r3, #28
    7cf0:	dd00      	ble.n	7cf4 <__aeabi_ddiv+0x1e8>
    7cf2:	e153      	b.n	7f9c <__aeabi_ddiv+0x490>
    7cf4:	0002      	movs	r2, r0
    7cf6:	4641      	mov	r1, r8
    7cf8:	3a08      	subs	r2, #8
    7cfa:	4091      	lsls	r1, r2
    7cfc:	4688      	mov	r8, r1
    7cfe:	211d      	movs	r1, #29
    7d00:	1acb      	subs	r3, r1, r3
    7d02:	4651      	mov	r1, sl
    7d04:	40d9      	lsrs	r1, r3
    7d06:	000b      	movs	r3, r1
    7d08:	4641      	mov	r1, r8
    7d0a:	430b      	orrs	r3, r1
    7d0c:	469b      	mov	fp, r3
    7d0e:	4653      	mov	r3, sl
    7d10:	4093      	lsls	r3, r2
    7d12:	001a      	movs	r2, r3
    7d14:	9b00      	ldr	r3, [sp, #0]
    7d16:	4925      	ldr	r1, [pc, #148]	; (7dac <__aeabi_ddiv+0x2a0>)
    7d18:	469c      	mov	ip, r3
    7d1a:	4460      	add	r0, ip
    7d1c:	0003      	movs	r3, r0
    7d1e:	468c      	mov	ip, r1
    7d20:	4463      	add	r3, ip
    7d22:	9300      	str	r3, [sp, #0]
    7d24:	2100      	movs	r1, #0
    7d26:	e737      	b.n	7b98 <__aeabi_ddiv+0x8c>
    7d28:	2303      	movs	r3, #3
    7d2a:	46b1      	mov	r9, r6
    7d2c:	9000      	str	r0, [sp, #0]
    7d2e:	260c      	movs	r6, #12
    7d30:	9302      	str	r3, [sp, #8]
    7d32:	e711      	b.n	7b58 <__aeabi_ddiv+0x4c>
    7d34:	2300      	movs	r3, #0
    7d36:	9300      	str	r3, [sp, #0]
    7d38:	3301      	adds	r3, #1
    7d3a:	2604      	movs	r6, #4
    7d3c:	2700      	movs	r7, #0
    7d3e:	9302      	str	r3, [sp, #8]
    7d40:	e70a      	b.n	7b58 <__aeabi_ddiv+0x4c>
    7d42:	2303      	movs	r3, #3
    7d44:	46c3      	mov	fp, r8
    7d46:	431e      	orrs	r6, r3
    7d48:	2103      	movs	r1, #3
    7d4a:	e725      	b.n	7b98 <__aeabi_ddiv+0x8c>
    7d4c:	3301      	adds	r3, #1
    7d4e:	431e      	orrs	r6, r3
    7d50:	2200      	movs	r2, #0
    7d52:	2101      	movs	r1, #1
    7d54:	e720      	b.n	7b98 <__aeabi_ddiv+0x8c>
    7d56:	2300      	movs	r3, #0
    7d58:	469a      	mov	sl, r3
    7d5a:	2380      	movs	r3, #128	; 0x80
    7d5c:	2700      	movs	r7, #0
    7d5e:	031b      	lsls	r3, r3, #12
    7d60:	4a09      	ldr	r2, [pc, #36]	; (7d88 <__aeabi_ddiv+0x27c>)
    7d62:	e761      	b.n	7c28 <__aeabi_ddiv+0x11c>
    7d64:	2380      	movs	r3, #128	; 0x80
    7d66:	4649      	mov	r1, r9
    7d68:	031b      	lsls	r3, r3, #12
    7d6a:	4219      	tst	r1, r3
    7d6c:	d100      	bne.n	7d70 <__aeabi_ddiv+0x264>
    7d6e:	e0e2      	b.n	7f36 <__aeabi_ddiv+0x42a>
    7d70:	4659      	mov	r1, fp
    7d72:	4219      	tst	r1, r3
    7d74:	d000      	beq.n	7d78 <__aeabi_ddiv+0x26c>
    7d76:	e0de      	b.n	7f36 <__aeabi_ddiv+0x42a>
    7d78:	430b      	orrs	r3, r1
    7d7a:	031b      	lsls	r3, r3, #12
    7d7c:	0017      	movs	r7, r2
    7d7e:	0b1b      	lsrs	r3, r3, #12
    7d80:	46a2      	mov	sl, r4
    7d82:	4a01      	ldr	r2, [pc, #4]	; (7d88 <__aeabi_ddiv+0x27c>)
    7d84:	e750      	b.n	7c28 <__aeabi_ddiv+0x11c>
    7d86:	46c0      	nop			; (mov r8, r8)
    7d88:	000007ff 	.word	0x000007ff
    7d8c:	fffffc01 	.word	0xfffffc01
    7d90:	0000ad60 	.word	0x0000ad60
    7d94:	000003ff 	.word	0x000003ff
    7d98:	feffffff 	.word	0xfeffffff
    7d9c:	000007fe 	.word	0x000007fe
    7da0:	800fffff 	.word	0x800fffff
    7da4:	fffffc0d 	.word	0xfffffc0d
    7da8:	fffff801 	.word	0xfffff801
    7dac:	000003f3 	.word	0x000003f3
    7db0:	45d9      	cmp	r9, fp
    7db2:	d900      	bls.n	7db6 <__aeabi_ddiv+0x2aa>
    7db4:	e0cb      	b.n	7f4e <__aeabi_ddiv+0x442>
    7db6:	d100      	bne.n	7dba <__aeabi_ddiv+0x2ae>
    7db8:	e0c6      	b.n	7f48 <__aeabi_ddiv+0x43c>
    7dba:	003c      	movs	r4, r7
    7dbc:	4648      	mov	r0, r9
    7dbe:	2700      	movs	r7, #0
    7dc0:	9b00      	ldr	r3, [sp, #0]
    7dc2:	3b01      	subs	r3, #1
    7dc4:	9300      	str	r3, [sp, #0]
    7dc6:	465b      	mov	r3, fp
    7dc8:	0e16      	lsrs	r6, r2, #24
    7dca:	021b      	lsls	r3, r3, #8
    7dcc:	431e      	orrs	r6, r3
    7dce:	0213      	lsls	r3, r2, #8
    7dd0:	4698      	mov	r8, r3
    7dd2:	0433      	lsls	r3, r6, #16
    7dd4:	0c1b      	lsrs	r3, r3, #16
    7dd6:	4699      	mov	r9, r3
    7dd8:	0c31      	lsrs	r1, r6, #16
    7dda:	9101      	str	r1, [sp, #4]
    7ddc:	f7fe ffea 	bl	6db4 <__aeabi_uidivmod>
    7de0:	464a      	mov	r2, r9
    7de2:	4342      	muls	r2, r0
    7de4:	040b      	lsls	r3, r1, #16
    7de6:	0c21      	lsrs	r1, r4, #16
    7de8:	0005      	movs	r5, r0
    7dea:	4319      	orrs	r1, r3
    7dec:	428a      	cmp	r2, r1
    7dee:	d907      	bls.n	7e00 <__aeabi_ddiv+0x2f4>
    7df0:	1989      	adds	r1, r1, r6
    7df2:	3d01      	subs	r5, #1
    7df4:	428e      	cmp	r6, r1
    7df6:	d803      	bhi.n	7e00 <__aeabi_ddiv+0x2f4>
    7df8:	428a      	cmp	r2, r1
    7dfa:	d901      	bls.n	7e00 <__aeabi_ddiv+0x2f4>
    7dfc:	1e85      	subs	r5, r0, #2
    7dfe:	1989      	adds	r1, r1, r6
    7e00:	1a88      	subs	r0, r1, r2
    7e02:	9901      	ldr	r1, [sp, #4]
    7e04:	f7fe ffd6 	bl	6db4 <__aeabi_uidivmod>
    7e08:	0409      	lsls	r1, r1, #16
    7e0a:	468c      	mov	ip, r1
    7e0c:	464a      	mov	r2, r9
    7e0e:	0421      	lsls	r1, r4, #16
    7e10:	4664      	mov	r4, ip
    7e12:	4342      	muls	r2, r0
    7e14:	0c09      	lsrs	r1, r1, #16
    7e16:	0003      	movs	r3, r0
    7e18:	4321      	orrs	r1, r4
    7e1a:	428a      	cmp	r2, r1
    7e1c:	d904      	bls.n	7e28 <__aeabi_ddiv+0x31c>
    7e1e:	1989      	adds	r1, r1, r6
    7e20:	3b01      	subs	r3, #1
    7e22:	428e      	cmp	r6, r1
    7e24:	d800      	bhi.n	7e28 <__aeabi_ddiv+0x31c>
    7e26:	e0f1      	b.n	800c <__aeabi_ddiv+0x500>
    7e28:	042d      	lsls	r5, r5, #16
    7e2a:	431d      	orrs	r5, r3
    7e2c:	46ab      	mov	fp, r5
    7e2e:	4643      	mov	r3, r8
    7e30:	1a89      	subs	r1, r1, r2
    7e32:	4642      	mov	r2, r8
    7e34:	0c28      	lsrs	r0, r5, #16
    7e36:	0412      	lsls	r2, r2, #16
    7e38:	0c1d      	lsrs	r5, r3, #16
    7e3a:	465b      	mov	r3, fp
    7e3c:	0c14      	lsrs	r4, r2, #16
    7e3e:	0022      	movs	r2, r4
    7e40:	041b      	lsls	r3, r3, #16
    7e42:	0c1b      	lsrs	r3, r3, #16
    7e44:	435a      	muls	r2, r3
    7e46:	9403      	str	r4, [sp, #12]
    7e48:	436b      	muls	r3, r5
    7e4a:	4344      	muls	r4, r0
    7e4c:	9502      	str	r5, [sp, #8]
    7e4e:	4368      	muls	r0, r5
    7e50:	191b      	adds	r3, r3, r4
    7e52:	0c15      	lsrs	r5, r2, #16
    7e54:	18eb      	adds	r3, r5, r3
    7e56:	429c      	cmp	r4, r3
    7e58:	d903      	bls.n	7e62 <__aeabi_ddiv+0x356>
    7e5a:	2480      	movs	r4, #128	; 0x80
    7e5c:	0264      	lsls	r4, r4, #9
    7e5e:	46a4      	mov	ip, r4
    7e60:	4460      	add	r0, ip
    7e62:	0c1c      	lsrs	r4, r3, #16
    7e64:	0415      	lsls	r5, r2, #16
    7e66:	041b      	lsls	r3, r3, #16
    7e68:	0c2d      	lsrs	r5, r5, #16
    7e6a:	1820      	adds	r0, r4, r0
    7e6c:	195d      	adds	r5, r3, r5
    7e6e:	4281      	cmp	r1, r0
    7e70:	d377      	bcc.n	7f62 <__aeabi_ddiv+0x456>
    7e72:	d073      	beq.n	7f5c <__aeabi_ddiv+0x450>
    7e74:	1a0c      	subs	r4, r1, r0
    7e76:	4aa2      	ldr	r2, [pc, #648]	; (8100 <__aeabi_ddiv+0x5f4>)
    7e78:	1b7d      	subs	r5, r7, r5
    7e7a:	42af      	cmp	r7, r5
    7e7c:	41bf      	sbcs	r7, r7
    7e7e:	4694      	mov	ip, r2
    7e80:	9b00      	ldr	r3, [sp, #0]
    7e82:	427f      	negs	r7, r7
    7e84:	4463      	add	r3, ip
    7e86:	1be0      	subs	r0, r4, r7
    7e88:	001c      	movs	r4, r3
    7e8a:	4286      	cmp	r6, r0
    7e8c:	d100      	bne.n	7e90 <__aeabi_ddiv+0x384>
    7e8e:	e0db      	b.n	8048 <__aeabi_ddiv+0x53c>
    7e90:	9901      	ldr	r1, [sp, #4]
    7e92:	f7fe ff8f 	bl	6db4 <__aeabi_uidivmod>
    7e96:	464a      	mov	r2, r9
    7e98:	4342      	muls	r2, r0
    7e9a:	040b      	lsls	r3, r1, #16
    7e9c:	0c29      	lsrs	r1, r5, #16
    7e9e:	0007      	movs	r7, r0
    7ea0:	4319      	orrs	r1, r3
    7ea2:	428a      	cmp	r2, r1
    7ea4:	d907      	bls.n	7eb6 <__aeabi_ddiv+0x3aa>
    7ea6:	1989      	adds	r1, r1, r6
    7ea8:	3f01      	subs	r7, #1
    7eaa:	428e      	cmp	r6, r1
    7eac:	d803      	bhi.n	7eb6 <__aeabi_ddiv+0x3aa>
    7eae:	428a      	cmp	r2, r1
    7eb0:	d901      	bls.n	7eb6 <__aeabi_ddiv+0x3aa>
    7eb2:	1e87      	subs	r7, r0, #2
    7eb4:	1989      	adds	r1, r1, r6
    7eb6:	1a88      	subs	r0, r1, r2
    7eb8:	9901      	ldr	r1, [sp, #4]
    7eba:	f7fe ff7b 	bl	6db4 <__aeabi_uidivmod>
    7ebe:	0409      	lsls	r1, r1, #16
    7ec0:	464a      	mov	r2, r9
    7ec2:	4689      	mov	r9, r1
    7ec4:	0429      	lsls	r1, r5, #16
    7ec6:	464d      	mov	r5, r9
    7ec8:	4342      	muls	r2, r0
    7eca:	0c09      	lsrs	r1, r1, #16
    7ecc:	0003      	movs	r3, r0
    7ece:	4329      	orrs	r1, r5
    7ed0:	428a      	cmp	r2, r1
    7ed2:	d907      	bls.n	7ee4 <__aeabi_ddiv+0x3d8>
    7ed4:	1989      	adds	r1, r1, r6
    7ed6:	3b01      	subs	r3, #1
    7ed8:	428e      	cmp	r6, r1
    7eda:	d803      	bhi.n	7ee4 <__aeabi_ddiv+0x3d8>
    7edc:	428a      	cmp	r2, r1
    7ede:	d901      	bls.n	7ee4 <__aeabi_ddiv+0x3d8>
    7ee0:	1e83      	subs	r3, r0, #2
    7ee2:	1989      	adds	r1, r1, r6
    7ee4:	043f      	lsls	r7, r7, #16
    7ee6:	1a89      	subs	r1, r1, r2
    7ee8:	003a      	movs	r2, r7
    7eea:	9f03      	ldr	r7, [sp, #12]
    7eec:	431a      	orrs	r2, r3
    7eee:	0038      	movs	r0, r7
    7ef0:	0413      	lsls	r3, r2, #16
    7ef2:	0c1b      	lsrs	r3, r3, #16
    7ef4:	4358      	muls	r0, r3
    7ef6:	4681      	mov	r9, r0
    7ef8:	9802      	ldr	r0, [sp, #8]
    7efa:	0c15      	lsrs	r5, r2, #16
    7efc:	436f      	muls	r7, r5
    7efe:	4343      	muls	r3, r0
    7f00:	4345      	muls	r5, r0
    7f02:	4648      	mov	r0, r9
    7f04:	0c00      	lsrs	r0, r0, #16
    7f06:	4684      	mov	ip, r0
    7f08:	19db      	adds	r3, r3, r7
    7f0a:	4463      	add	r3, ip
    7f0c:	429f      	cmp	r7, r3
    7f0e:	d903      	bls.n	7f18 <__aeabi_ddiv+0x40c>
    7f10:	2080      	movs	r0, #128	; 0x80
    7f12:	0240      	lsls	r0, r0, #9
    7f14:	4684      	mov	ip, r0
    7f16:	4465      	add	r5, ip
    7f18:	4648      	mov	r0, r9
    7f1a:	0c1f      	lsrs	r7, r3, #16
    7f1c:	0400      	lsls	r0, r0, #16
    7f1e:	041b      	lsls	r3, r3, #16
    7f20:	0c00      	lsrs	r0, r0, #16
    7f22:	197d      	adds	r5, r7, r5
    7f24:	1818      	adds	r0, r3, r0
    7f26:	42a9      	cmp	r1, r5
    7f28:	d200      	bcs.n	7f2c <__aeabi_ddiv+0x420>
    7f2a:	e084      	b.n	8036 <__aeabi_ddiv+0x52a>
    7f2c:	d100      	bne.n	7f30 <__aeabi_ddiv+0x424>
    7f2e:	e07f      	b.n	8030 <__aeabi_ddiv+0x524>
    7f30:	2301      	movs	r3, #1
    7f32:	431a      	orrs	r2, r3
    7f34:	e657      	b.n	7be6 <__aeabi_ddiv+0xda>
    7f36:	2380      	movs	r3, #128	; 0x80
    7f38:	464a      	mov	r2, r9
    7f3a:	031b      	lsls	r3, r3, #12
    7f3c:	4313      	orrs	r3, r2
    7f3e:	031b      	lsls	r3, r3, #12
    7f40:	0b1b      	lsrs	r3, r3, #12
    7f42:	46aa      	mov	sl, r5
    7f44:	4a6f      	ldr	r2, [pc, #444]	; (8104 <__aeabi_ddiv+0x5f8>)
    7f46:	e66f      	b.n	7c28 <__aeabi_ddiv+0x11c>
    7f48:	42ba      	cmp	r2, r7
    7f4a:	d900      	bls.n	7f4e <__aeabi_ddiv+0x442>
    7f4c:	e735      	b.n	7dba <__aeabi_ddiv+0x2ae>
    7f4e:	464b      	mov	r3, r9
    7f50:	07dc      	lsls	r4, r3, #31
    7f52:	0858      	lsrs	r0, r3, #1
    7f54:	087b      	lsrs	r3, r7, #1
    7f56:	431c      	orrs	r4, r3
    7f58:	07ff      	lsls	r7, r7, #31
    7f5a:	e734      	b.n	7dc6 <__aeabi_ddiv+0x2ba>
    7f5c:	2400      	movs	r4, #0
    7f5e:	42af      	cmp	r7, r5
    7f60:	d289      	bcs.n	7e76 <__aeabi_ddiv+0x36a>
    7f62:	4447      	add	r7, r8
    7f64:	4547      	cmp	r7, r8
    7f66:	41a4      	sbcs	r4, r4
    7f68:	465b      	mov	r3, fp
    7f6a:	4264      	negs	r4, r4
    7f6c:	19a4      	adds	r4, r4, r6
    7f6e:	1864      	adds	r4, r4, r1
    7f70:	3b01      	subs	r3, #1
    7f72:	42a6      	cmp	r6, r4
    7f74:	d21e      	bcs.n	7fb4 <__aeabi_ddiv+0x4a8>
    7f76:	42a0      	cmp	r0, r4
    7f78:	d86d      	bhi.n	8056 <__aeabi_ddiv+0x54a>
    7f7a:	d100      	bne.n	7f7e <__aeabi_ddiv+0x472>
    7f7c:	e0b6      	b.n	80ec <__aeabi_ddiv+0x5e0>
    7f7e:	1a24      	subs	r4, r4, r0
    7f80:	469b      	mov	fp, r3
    7f82:	e778      	b.n	7e76 <__aeabi_ddiv+0x36a>
    7f84:	0003      	movs	r3, r0
    7f86:	465a      	mov	r2, fp
    7f88:	3b28      	subs	r3, #40	; 0x28
    7f8a:	409a      	lsls	r2, r3
    7f8c:	2700      	movs	r7, #0
    7f8e:	4691      	mov	r9, r2
    7f90:	e688      	b.n	7ca4 <__aeabi_ddiv+0x198>
    7f92:	4658      	mov	r0, fp
    7f94:	f001 f8f6 	bl	9184 <__clzsi2>
    7f98:	3020      	adds	r0, #32
    7f9a:	e672      	b.n	7c82 <__aeabi_ddiv+0x176>
    7f9c:	0003      	movs	r3, r0
    7f9e:	4652      	mov	r2, sl
    7fa0:	3b28      	subs	r3, #40	; 0x28
    7fa2:	409a      	lsls	r2, r3
    7fa4:	4693      	mov	fp, r2
    7fa6:	2200      	movs	r2, #0
    7fa8:	e6b4      	b.n	7d14 <__aeabi_ddiv+0x208>
    7faa:	4650      	mov	r0, sl
    7fac:	f001 f8ea 	bl	9184 <__clzsi2>
    7fb0:	3020      	adds	r0, #32
    7fb2:	e69a      	b.n	7cea <__aeabi_ddiv+0x1de>
    7fb4:	42a6      	cmp	r6, r4
    7fb6:	d1e2      	bne.n	7f7e <__aeabi_ddiv+0x472>
    7fb8:	45b8      	cmp	r8, r7
    7fba:	d9dc      	bls.n	7f76 <__aeabi_ddiv+0x46a>
    7fbc:	1a34      	subs	r4, r6, r0
    7fbe:	469b      	mov	fp, r3
    7fc0:	e759      	b.n	7e76 <__aeabi_ddiv+0x36a>
    7fc2:	2b1f      	cmp	r3, #31
    7fc4:	dc65      	bgt.n	8092 <__aeabi_ddiv+0x586>
    7fc6:	4c50      	ldr	r4, [pc, #320]	; (8108 <__aeabi_ddiv+0x5fc>)
    7fc8:	9900      	ldr	r1, [sp, #0]
    7fca:	46a4      	mov	ip, r4
    7fcc:	465c      	mov	r4, fp
    7fce:	4461      	add	r1, ip
    7fd0:	0008      	movs	r0, r1
    7fd2:	408c      	lsls	r4, r1
    7fd4:	0011      	movs	r1, r2
    7fd6:	4082      	lsls	r2, r0
    7fd8:	40d9      	lsrs	r1, r3
    7fda:	1e50      	subs	r0, r2, #1
    7fdc:	4182      	sbcs	r2, r0
    7fde:	430c      	orrs	r4, r1
    7fe0:	4314      	orrs	r4, r2
    7fe2:	465a      	mov	r2, fp
    7fe4:	40da      	lsrs	r2, r3
    7fe6:	0013      	movs	r3, r2
    7fe8:	0762      	lsls	r2, r4, #29
    7fea:	d009      	beq.n	8000 <__aeabi_ddiv+0x4f4>
    7fec:	220f      	movs	r2, #15
    7fee:	4022      	ands	r2, r4
    7ff0:	2a04      	cmp	r2, #4
    7ff2:	d005      	beq.n	8000 <__aeabi_ddiv+0x4f4>
    7ff4:	0022      	movs	r2, r4
    7ff6:	1d14      	adds	r4, r2, #4
    7ff8:	4294      	cmp	r4, r2
    7ffa:	4189      	sbcs	r1, r1
    7ffc:	4249      	negs	r1, r1
    7ffe:	185b      	adds	r3, r3, r1
    8000:	021a      	lsls	r2, r3, #8
    8002:	d562      	bpl.n	80ca <__aeabi_ddiv+0x5be>
    8004:	2201      	movs	r2, #1
    8006:	2300      	movs	r3, #0
    8008:	2700      	movs	r7, #0
    800a:	e60d      	b.n	7c28 <__aeabi_ddiv+0x11c>
    800c:	428a      	cmp	r2, r1
    800e:	d800      	bhi.n	8012 <__aeabi_ddiv+0x506>
    8010:	e70a      	b.n	7e28 <__aeabi_ddiv+0x31c>
    8012:	1e83      	subs	r3, r0, #2
    8014:	1989      	adds	r1, r1, r6
    8016:	e707      	b.n	7e28 <__aeabi_ddiv+0x31c>
    8018:	230f      	movs	r3, #15
    801a:	4013      	ands	r3, r2
    801c:	2b04      	cmp	r3, #4
    801e:	d100      	bne.n	8022 <__aeabi_ddiv+0x516>
    8020:	e5e6      	b.n	7bf0 <__aeabi_ddiv+0xe4>
    8022:	1d17      	adds	r7, r2, #4
    8024:	4297      	cmp	r7, r2
    8026:	4192      	sbcs	r2, r2
    8028:	4253      	negs	r3, r2
    802a:	449b      	add	fp, r3
    802c:	08fa      	lsrs	r2, r7, #3
    802e:	e5e0      	b.n	7bf2 <__aeabi_ddiv+0xe6>
    8030:	2800      	cmp	r0, #0
    8032:	d100      	bne.n	8036 <__aeabi_ddiv+0x52a>
    8034:	e5d7      	b.n	7be6 <__aeabi_ddiv+0xda>
    8036:	1871      	adds	r1, r6, r1
    8038:	1e53      	subs	r3, r2, #1
    803a:	42b1      	cmp	r1, r6
    803c:	d327      	bcc.n	808e <__aeabi_ddiv+0x582>
    803e:	42a9      	cmp	r1, r5
    8040:	d315      	bcc.n	806e <__aeabi_ddiv+0x562>
    8042:	d058      	beq.n	80f6 <__aeabi_ddiv+0x5ea>
    8044:	001a      	movs	r2, r3
    8046:	e773      	b.n	7f30 <__aeabi_ddiv+0x424>
    8048:	2b00      	cmp	r3, #0
    804a:	dc00      	bgt.n	804e <__aeabi_ddiv+0x542>
    804c:	e604      	b.n	7c58 <__aeabi_ddiv+0x14c>
    804e:	2301      	movs	r3, #1
    8050:	2200      	movs	r2, #0
    8052:	449b      	add	fp, r3
    8054:	e5cd      	b.n	7bf2 <__aeabi_ddiv+0xe6>
    8056:	2302      	movs	r3, #2
    8058:	4447      	add	r7, r8
    805a:	4547      	cmp	r7, r8
    805c:	4189      	sbcs	r1, r1
    805e:	425b      	negs	r3, r3
    8060:	469c      	mov	ip, r3
    8062:	4249      	negs	r1, r1
    8064:	1989      	adds	r1, r1, r6
    8066:	190c      	adds	r4, r1, r4
    8068:	44e3      	add	fp, ip
    806a:	1a24      	subs	r4, r4, r0
    806c:	e703      	b.n	7e76 <__aeabi_ddiv+0x36a>
    806e:	4643      	mov	r3, r8
    8070:	005f      	lsls	r7, r3, #1
    8072:	4547      	cmp	r7, r8
    8074:	419b      	sbcs	r3, r3
    8076:	46b8      	mov	r8, r7
    8078:	425b      	negs	r3, r3
    807a:	199e      	adds	r6, r3, r6
    807c:	3a02      	subs	r2, #2
    807e:	1989      	adds	r1, r1, r6
    8080:	42a9      	cmp	r1, r5
    8082:	d000      	beq.n	8086 <__aeabi_ddiv+0x57a>
    8084:	e754      	b.n	7f30 <__aeabi_ddiv+0x424>
    8086:	4540      	cmp	r0, r8
    8088:	d000      	beq.n	808c <__aeabi_ddiv+0x580>
    808a:	e751      	b.n	7f30 <__aeabi_ddiv+0x424>
    808c:	e5ab      	b.n	7be6 <__aeabi_ddiv+0xda>
    808e:	001a      	movs	r2, r3
    8090:	e7f6      	b.n	8080 <__aeabi_ddiv+0x574>
    8092:	211f      	movs	r1, #31
    8094:	465f      	mov	r7, fp
    8096:	4249      	negs	r1, r1
    8098:	1b0c      	subs	r4, r1, r4
    809a:	40e7      	lsrs	r7, r4
    809c:	2b20      	cmp	r3, #32
    809e:	d007      	beq.n	80b0 <__aeabi_ddiv+0x5a4>
    80a0:	491a      	ldr	r1, [pc, #104]	; (810c <__aeabi_ddiv+0x600>)
    80a2:	9b00      	ldr	r3, [sp, #0]
    80a4:	468c      	mov	ip, r1
    80a6:	4463      	add	r3, ip
    80a8:	0018      	movs	r0, r3
    80aa:	465b      	mov	r3, fp
    80ac:	4083      	lsls	r3, r0
    80ae:	431a      	orrs	r2, r3
    80b0:	1e50      	subs	r0, r2, #1
    80b2:	4182      	sbcs	r2, r0
    80b4:	433a      	orrs	r2, r7
    80b6:	2707      	movs	r7, #7
    80b8:	2300      	movs	r3, #0
    80ba:	4017      	ands	r7, r2
    80bc:	d009      	beq.n	80d2 <__aeabi_ddiv+0x5c6>
    80be:	210f      	movs	r1, #15
    80c0:	2300      	movs	r3, #0
    80c2:	4011      	ands	r1, r2
    80c4:	0014      	movs	r4, r2
    80c6:	2904      	cmp	r1, #4
    80c8:	d195      	bne.n	7ff6 <__aeabi_ddiv+0x4ea>
    80ca:	0022      	movs	r2, r4
    80cc:	075f      	lsls	r7, r3, #29
    80ce:	025b      	lsls	r3, r3, #9
    80d0:	0b1b      	lsrs	r3, r3, #12
    80d2:	08d2      	lsrs	r2, r2, #3
    80d4:	4317      	orrs	r7, r2
    80d6:	2200      	movs	r2, #0
    80d8:	e5a6      	b.n	7c28 <__aeabi_ddiv+0x11c>
    80da:	2380      	movs	r3, #128	; 0x80
    80dc:	4659      	mov	r1, fp
    80de:	031b      	lsls	r3, r3, #12
    80e0:	430b      	orrs	r3, r1
    80e2:	031b      	lsls	r3, r3, #12
    80e4:	0017      	movs	r7, r2
    80e6:	0b1b      	lsrs	r3, r3, #12
    80e8:	4a06      	ldr	r2, [pc, #24]	; (8104 <__aeabi_ddiv+0x5f8>)
    80ea:	e59d      	b.n	7c28 <__aeabi_ddiv+0x11c>
    80ec:	42bd      	cmp	r5, r7
    80ee:	d8b2      	bhi.n	8056 <__aeabi_ddiv+0x54a>
    80f0:	469b      	mov	fp, r3
    80f2:	2400      	movs	r4, #0
    80f4:	e6bf      	b.n	7e76 <__aeabi_ddiv+0x36a>
    80f6:	4580      	cmp	r8, r0
    80f8:	d3b9      	bcc.n	806e <__aeabi_ddiv+0x562>
    80fa:	001a      	movs	r2, r3
    80fc:	e7c3      	b.n	8086 <__aeabi_ddiv+0x57a>
    80fe:	46c0      	nop			; (mov r8, r8)
    8100:	000003ff 	.word	0x000003ff
    8104:	000007ff 	.word	0x000007ff
    8108:	0000041e 	.word	0x0000041e
    810c:	0000043e 	.word	0x0000043e

00008110 <__eqdf2>:
__nedf2():
    8110:	b5f0      	push	{r4, r5, r6, r7, lr}
    8112:	464f      	mov	r7, r9
    8114:	4646      	mov	r6, r8
    8116:	46d6      	mov	lr, sl
    8118:	4684      	mov	ip, r0
    811a:	b5c0      	push	{r6, r7, lr}
    811c:	4680      	mov	r8, r0
    811e:	4e19      	ldr	r6, [pc, #100]	; (8184 <__eqdf2+0x74>)
    8120:	0318      	lsls	r0, r3, #12
    8122:	030f      	lsls	r7, r1, #12
    8124:	004d      	lsls	r5, r1, #1
    8126:	0b00      	lsrs	r0, r0, #12
    8128:	005c      	lsls	r4, r3, #1
    812a:	4682      	mov	sl, r0
    812c:	0b3f      	lsrs	r7, r7, #12
    812e:	0d6d      	lsrs	r5, r5, #21
    8130:	0fc9      	lsrs	r1, r1, #31
    8132:	4691      	mov	r9, r2
    8134:	0d64      	lsrs	r4, r4, #21
    8136:	0fdb      	lsrs	r3, r3, #31
    8138:	2001      	movs	r0, #1
    813a:	42b5      	cmp	r5, r6
    813c:	d00a      	beq.n	8154 <__eqdf2+0x44>
    813e:	42b4      	cmp	r4, r6
    8140:	d003      	beq.n	814a <__eqdf2+0x3a>
    8142:	42a5      	cmp	r5, r4
    8144:	d101      	bne.n	814a <__eqdf2+0x3a>
    8146:	4557      	cmp	r7, sl
    8148:	d00c      	beq.n	8164 <__eqdf2+0x54>
    814a:	bc1c      	pop	{r2, r3, r4}
    814c:	4690      	mov	r8, r2
    814e:	4699      	mov	r9, r3
    8150:	46a2      	mov	sl, r4
    8152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8154:	4666      	mov	r6, ip
    8156:	433e      	orrs	r6, r7
    8158:	d1f7      	bne.n	814a <__eqdf2+0x3a>
    815a:	42ac      	cmp	r4, r5
    815c:	d1f5      	bne.n	814a <__eqdf2+0x3a>
    815e:	4654      	mov	r4, sl
    8160:	4314      	orrs	r4, r2
    8162:	d1f2      	bne.n	814a <__eqdf2+0x3a>
    8164:	2001      	movs	r0, #1
    8166:	45c8      	cmp	r8, r9
    8168:	d1ef      	bne.n	814a <__eqdf2+0x3a>
    816a:	4299      	cmp	r1, r3
    816c:	d007      	beq.n	817e <__eqdf2+0x6e>
    816e:	2d00      	cmp	r5, #0
    8170:	d1eb      	bne.n	814a <__eqdf2+0x3a>
    8172:	4663      	mov	r3, ip
    8174:	431f      	orrs	r7, r3
    8176:	0038      	movs	r0, r7
    8178:	1e47      	subs	r7, r0, #1
    817a:	41b8      	sbcs	r0, r7
    817c:	e7e5      	b.n	814a <__eqdf2+0x3a>
    817e:	2000      	movs	r0, #0
    8180:	e7e3      	b.n	814a <__eqdf2+0x3a>
    8182:	46c0      	nop			; (mov r8, r8)
    8184:	000007ff 	.word	0x000007ff

00008188 <__gedf2>:
__gedf2():
    8188:	b5f0      	push	{r4, r5, r6, r7, lr}
    818a:	464f      	mov	r7, r9
    818c:	4646      	mov	r6, r8
    818e:	46d6      	mov	lr, sl
    8190:	004d      	lsls	r5, r1, #1
    8192:	b5c0      	push	{r6, r7, lr}
    8194:	030e      	lsls	r6, r1, #12
    8196:	0fc9      	lsrs	r1, r1, #31
    8198:	468a      	mov	sl, r1
    819a:	492c      	ldr	r1, [pc, #176]	; (824c <__gedf2+0xc4>)
    819c:	031f      	lsls	r7, r3, #12
    819e:	005c      	lsls	r4, r3, #1
    81a0:	4680      	mov	r8, r0
    81a2:	0b36      	lsrs	r6, r6, #12
    81a4:	0d6d      	lsrs	r5, r5, #21
    81a6:	4691      	mov	r9, r2
    81a8:	0b3f      	lsrs	r7, r7, #12
    81aa:	0d64      	lsrs	r4, r4, #21
    81ac:	0fdb      	lsrs	r3, r3, #31
    81ae:	428d      	cmp	r5, r1
    81b0:	d01e      	beq.n	81f0 <__gedf2+0x68>
    81b2:	428c      	cmp	r4, r1
    81b4:	d016      	beq.n	81e4 <__gedf2+0x5c>
    81b6:	2d00      	cmp	r5, #0
    81b8:	d11e      	bne.n	81f8 <__gedf2+0x70>
    81ba:	4330      	orrs	r0, r6
    81bc:	4684      	mov	ip, r0
    81be:	2c00      	cmp	r4, #0
    81c0:	d101      	bne.n	81c6 <__gedf2+0x3e>
    81c2:	433a      	orrs	r2, r7
    81c4:	d023      	beq.n	820e <__gedf2+0x86>
    81c6:	4662      	mov	r2, ip
    81c8:	2a00      	cmp	r2, #0
    81ca:	d01a      	beq.n	8202 <__gedf2+0x7a>
    81cc:	459a      	cmp	sl, r3
    81ce:	d029      	beq.n	8224 <__gedf2+0x9c>
    81d0:	4651      	mov	r1, sl
    81d2:	2002      	movs	r0, #2
    81d4:	3901      	subs	r1, #1
    81d6:	4008      	ands	r0, r1
    81d8:	3801      	subs	r0, #1
    81da:	bc1c      	pop	{r2, r3, r4}
    81dc:	4690      	mov	r8, r2
    81de:	4699      	mov	r9, r3
    81e0:	46a2      	mov	sl, r4
    81e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    81e4:	0039      	movs	r1, r7
    81e6:	4311      	orrs	r1, r2
    81e8:	d0e5      	beq.n	81b6 <__gedf2+0x2e>
    81ea:	2002      	movs	r0, #2
    81ec:	4240      	negs	r0, r0
    81ee:	e7f4      	b.n	81da <__gedf2+0x52>
    81f0:	4330      	orrs	r0, r6
    81f2:	d1fa      	bne.n	81ea <__gedf2+0x62>
    81f4:	42ac      	cmp	r4, r5
    81f6:	d00f      	beq.n	8218 <__gedf2+0x90>
    81f8:	2c00      	cmp	r4, #0
    81fa:	d10f      	bne.n	821c <__gedf2+0x94>
    81fc:	433a      	orrs	r2, r7
    81fe:	d0e7      	beq.n	81d0 <__gedf2+0x48>
    8200:	e00c      	b.n	821c <__gedf2+0x94>
    8202:	2201      	movs	r2, #1
    8204:	3b01      	subs	r3, #1
    8206:	4393      	bics	r3, r2
    8208:	0018      	movs	r0, r3
    820a:	3001      	adds	r0, #1
    820c:	e7e5      	b.n	81da <__gedf2+0x52>
    820e:	4663      	mov	r3, ip
    8210:	2000      	movs	r0, #0
    8212:	2b00      	cmp	r3, #0
    8214:	d0e1      	beq.n	81da <__gedf2+0x52>
    8216:	e7db      	b.n	81d0 <__gedf2+0x48>
    8218:	433a      	orrs	r2, r7
    821a:	d1e6      	bne.n	81ea <__gedf2+0x62>
    821c:	459a      	cmp	sl, r3
    821e:	d1d7      	bne.n	81d0 <__gedf2+0x48>
    8220:	42a5      	cmp	r5, r4
    8222:	dcd5      	bgt.n	81d0 <__gedf2+0x48>
    8224:	42a5      	cmp	r5, r4
    8226:	db05      	blt.n	8234 <__gedf2+0xac>
    8228:	42be      	cmp	r6, r7
    822a:	d8d1      	bhi.n	81d0 <__gedf2+0x48>
    822c:	d008      	beq.n	8240 <__gedf2+0xb8>
    822e:	2000      	movs	r0, #0
    8230:	42be      	cmp	r6, r7
    8232:	d2d2      	bcs.n	81da <__gedf2+0x52>
    8234:	4650      	mov	r0, sl
    8236:	2301      	movs	r3, #1
    8238:	3801      	subs	r0, #1
    823a:	4398      	bics	r0, r3
    823c:	3001      	adds	r0, #1
    823e:	e7cc      	b.n	81da <__gedf2+0x52>
    8240:	45c8      	cmp	r8, r9
    8242:	d8c5      	bhi.n	81d0 <__gedf2+0x48>
    8244:	2000      	movs	r0, #0
    8246:	45c8      	cmp	r8, r9
    8248:	d3f4      	bcc.n	8234 <__gedf2+0xac>
    824a:	e7c6      	b.n	81da <__gedf2+0x52>
    824c:	000007ff 	.word	0x000007ff

00008250 <__ledf2>:
__ledf2():
    8250:	b5f0      	push	{r4, r5, r6, r7, lr}
    8252:	464f      	mov	r7, r9
    8254:	4646      	mov	r6, r8
    8256:	46d6      	mov	lr, sl
    8258:	004d      	lsls	r5, r1, #1
    825a:	b5c0      	push	{r6, r7, lr}
    825c:	030e      	lsls	r6, r1, #12
    825e:	0fc9      	lsrs	r1, r1, #31
    8260:	468a      	mov	sl, r1
    8262:	492e      	ldr	r1, [pc, #184]	; (831c <__ledf2+0xcc>)
    8264:	031f      	lsls	r7, r3, #12
    8266:	005c      	lsls	r4, r3, #1
    8268:	4680      	mov	r8, r0
    826a:	0b36      	lsrs	r6, r6, #12
    826c:	0d6d      	lsrs	r5, r5, #21
    826e:	4691      	mov	r9, r2
    8270:	0b3f      	lsrs	r7, r7, #12
    8272:	0d64      	lsrs	r4, r4, #21
    8274:	0fdb      	lsrs	r3, r3, #31
    8276:	428d      	cmp	r5, r1
    8278:	d018      	beq.n	82ac <__ledf2+0x5c>
    827a:	428c      	cmp	r4, r1
    827c:	d011      	beq.n	82a2 <__ledf2+0x52>
    827e:	2d00      	cmp	r5, #0
    8280:	d118      	bne.n	82b4 <__ledf2+0x64>
    8282:	4330      	orrs	r0, r6
    8284:	4684      	mov	ip, r0
    8286:	2c00      	cmp	r4, #0
    8288:	d11e      	bne.n	82c8 <__ledf2+0x78>
    828a:	433a      	orrs	r2, r7
    828c:	d11c      	bne.n	82c8 <__ledf2+0x78>
    828e:	4663      	mov	r3, ip
    8290:	2000      	movs	r0, #0
    8292:	2b00      	cmp	r3, #0
    8294:	d030      	beq.n	82f8 <__ledf2+0xa8>
    8296:	4651      	mov	r1, sl
    8298:	2002      	movs	r0, #2
    829a:	3901      	subs	r1, #1
    829c:	4008      	ands	r0, r1
    829e:	3801      	subs	r0, #1
    82a0:	e02a      	b.n	82f8 <__ledf2+0xa8>
    82a2:	0039      	movs	r1, r7
    82a4:	4311      	orrs	r1, r2
    82a6:	d0ea      	beq.n	827e <__ledf2+0x2e>
    82a8:	2002      	movs	r0, #2
    82aa:	e025      	b.n	82f8 <__ledf2+0xa8>
    82ac:	4330      	orrs	r0, r6
    82ae:	d1fb      	bne.n	82a8 <__ledf2+0x58>
    82b0:	42ac      	cmp	r4, r5
    82b2:	d026      	beq.n	8302 <__ledf2+0xb2>
    82b4:	2c00      	cmp	r4, #0
    82b6:	d126      	bne.n	8306 <__ledf2+0xb6>
    82b8:	433a      	orrs	r2, r7
    82ba:	d124      	bne.n	8306 <__ledf2+0xb6>
    82bc:	4651      	mov	r1, sl
    82be:	2002      	movs	r0, #2
    82c0:	3901      	subs	r1, #1
    82c2:	4008      	ands	r0, r1
    82c4:	3801      	subs	r0, #1
    82c6:	e017      	b.n	82f8 <__ledf2+0xa8>
    82c8:	4662      	mov	r2, ip
    82ca:	2a00      	cmp	r2, #0
    82cc:	d00f      	beq.n	82ee <__ledf2+0x9e>
    82ce:	459a      	cmp	sl, r3
    82d0:	d1e1      	bne.n	8296 <__ledf2+0x46>
    82d2:	42a5      	cmp	r5, r4
    82d4:	db05      	blt.n	82e2 <__ledf2+0x92>
    82d6:	42be      	cmp	r6, r7
    82d8:	d8dd      	bhi.n	8296 <__ledf2+0x46>
    82da:	d019      	beq.n	8310 <__ledf2+0xc0>
    82dc:	2000      	movs	r0, #0
    82de:	42be      	cmp	r6, r7
    82e0:	d20a      	bcs.n	82f8 <__ledf2+0xa8>
    82e2:	4650      	mov	r0, sl
    82e4:	2301      	movs	r3, #1
    82e6:	3801      	subs	r0, #1
    82e8:	4398      	bics	r0, r3
    82ea:	3001      	adds	r0, #1
    82ec:	e004      	b.n	82f8 <__ledf2+0xa8>
    82ee:	2201      	movs	r2, #1
    82f0:	3b01      	subs	r3, #1
    82f2:	4393      	bics	r3, r2
    82f4:	0018      	movs	r0, r3
    82f6:	3001      	adds	r0, #1
    82f8:	bc1c      	pop	{r2, r3, r4}
    82fa:	4690      	mov	r8, r2
    82fc:	4699      	mov	r9, r3
    82fe:	46a2      	mov	sl, r4
    8300:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8302:	433a      	orrs	r2, r7
    8304:	d1d0      	bne.n	82a8 <__ledf2+0x58>
    8306:	459a      	cmp	sl, r3
    8308:	d1c5      	bne.n	8296 <__ledf2+0x46>
    830a:	42a5      	cmp	r5, r4
    830c:	dcc3      	bgt.n	8296 <__ledf2+0x46>
    830e:	e7e0      	b.n	82d2 <__ledf2+0x82>
    8310:	45c8      	cmp	r8, r9
    8312:	d8c0      	bhi.n	8296 <__ledf2+0x46>
    8314:	2000      	movs	r0, #0
    8316:	45c8      	cmp	r8, r9
    8318:	d3e3      	bcc.n	82e2 <__ledf2+0x92>
    831a:	e7ed      	b.n	82f8 <__ledf2+0xa8>
    831c:	000007ff 	.word	0x000007ff

00008320 <__aeabi_dmul>:
__aeabi_dmul():
    8320:	b5f0      	push	{r4, r5, r6, r7, lr}
    8322:	4657      	mov	r7, sl
    8324:	46de      	mov	lr, fp
    8326:	464e      	mov	r6, r9
    8328:	4645      	mov	r5, r8
    832a:	b5e0      	push	{r5, r6, r7, lr}
    832c:	4683      	mov	fp, r0
    832e:	0006      	movs	r6, r0
    8330:	030f      	lsls	r7, r1, #12
    8332:	0048      	lsls	r0, r1, #1
    8334:	b087      	sub	sp, #28
    8336:	4692      	mov	sl, r2
    8338:	001d      	movs	r5, r3
    833a:	0b3f      	lsrs	r7, r7, #12
    833c:	0d40      	lsrs	r0, r0, #21
    833e:	0fcc      	lsrs	r4, r1, #31
    8340:	2800      	cmp	r0, #0
    8342:	d100      	bne.n	8346 <__aeabi_dmul+0x26>
    8344:	e06f      	b.n	8426 <__aeabi_dmul+0x106>
    8346:	4bde      	ldr	r3, [pc, #888]	; (86c0 <__aeabi_dmul+0x3a0>)
    8348:	4298      	cmp	r0, r3
    834a:	d038      	beq.n	83be <__aeabi_dmul+0x9e>
    834c:	2380      	movs	r3, #128	; 0x80
    834e:	00ff      	lsls	r7, r7, #3
    8350:	041b      	lsls	r3, r3, #16
    8352:	431f      	orrs	r7, r3
    8354:	0f73      	lsrs	r3, r6, #29
    8356:	433b      	orrs	r3, r7
    8358:	9301      	str	r3, [sp, #4]
    835a:	4bda      	ldr	r3, [pc, #872]	; (86c4 <__aeabi_dmul+0x3a4>)
    835c:	2700      	movs	r7, #0
    835e:	4699      	mov	r9, r3
    8360:	2300      	movs	r3, #0
    8362:	469b      	mov	fp, r3
    8364:	00f6      	lsls	r6, r6, #3
    8366:	4481      	add	r9, r0
    8368:	032b      	lsls	r3, r5, #12
    836a:	0069      	lsls	r1, r5, #1
    836c:	0b1b      	lsrs	r3, r3, #12
    836e:	4652      	mov	r2, sl
    8370:	4698      	mov	r8, r3
    8372:	0d49      	lsrs	r1, r1, #21
    8374:	0fed      	lsrs	r5, r5, #31
    8376:	2900      	cmp	r1, #0
    8378:	d100      	bne.n	837c <__aeabi_dmul+0x5c>
    837a:	e085      	b.n	8488 <__aeabi_dmul+0x168>
    837c:	4bd0      	ldr	r3, [pc, #832]	; (86c0 <__aeabi_dmul+0x3a0>)
    837e:	4299      	cmp	r1, r3
    8380:	d100      	bne.n	8384 <__aeabi_dmul+0x64>
    8382:	e073      	b.n	846c <__aeabi_dmul+0x14c>
    8384:	4643      	mov	r3, r8
    8386:	00da      	lsls	r2, r3, #3
    8388:	2380      	movs	r3, #128	; 0x80
    838a:	041b      	lsls	r3, r3, #16
    838c:	4313      	orrs	r3, r2
    838e:	4652      	mov	r2, sl
    8390:	48cc      	ldr	r0, [pc, #816]	; (86c4 <__aeabi_dmul+0x3a4>)
    8392:	0f52      	lsrs	r2, r2, #29
    8394:	4684      	mov	ip, r0
    8396:	4313      	orrs	r3, r2
    8398:	4652      	mov	r2, sl
    839a:	2000      	movs	r0, #0
    839c:	4461      	add	r1, ip
    839e:	00d2      	lsls	r2, r2, #3
    83a0:	4489      	add	r9, r1
    83a2:	0021      	movs	r1, r4
    83a4:	4069      	eors	r1, r5
    83a6:	9100      	str	r1, [sp, #0]
    83a8:	468c      	mov	ip, r1
    83aa:	2101      	movs	r1, #1
    83ac:	4449      	add	r1, r9
    83ae:	468a      	mov	sl, r1
    83b0:	2f0f      	cmp	r7, #15
    83b2:	d900      	bls.n	83b6 <__aeabi_dmul+0x96>
    83b4:	e090      	b.n	84d8 <__aeabi_dmul+0x1b8>
    83b6:	49c4      	ldr	r1, [pc, #784]	; (86c8 <__aeabi_dmul+0x3a8>)
    83b8:	00bf      	lsls	r7, r7, #2
    83ba:	59cf      	ldr	r7, [r1, r7]
    83bc:	46bf      	mov	pc, r7
    83be:	465b      	mov	r3, fp
    83c0:	433b      	orrs	r3, r7
    83c2:	9301      	str	r3, [sp, #4]
    83c4:	d000      	beq.n	83c8 <__aeabi_dmul+0xa8>
    83c6:	e16a      	b.n	869e <__aeabi_dmul+0x37e>
    83c8:	2302      	movs	r3, #2
    83ca:	2708      	movs	r7, #8
    83cc:	2600      	movs	r6, #0
    83ce:	4681      	mov	r9, r0
    83d0:	469b      	mov	fp, r3
    83d2:	e7c9      	b.n	8368 <__aeabi_dmul+0x48>
    83d4:	0032      	movs	r2, r6
    83d6:	4658      	mov	r0, fp
    83d8:	9b01      	ldr	r3, [sp, #4]
    83da:	4661      	mov	r1, ip
    83dc:	9100      	str	r1, [sp, #0]
    83de:	2802      	cmp	r0, #2
    83e0:	d100      	bne.n	83e4 <__aeabi_dmul+0xc4>
    83e2:	e075      	b.n	84d0 <__aeabi_dmul+0x1b0>
    83e4:	2803      	cmp	r0, #3
    83e6:	d100      	bne.n	83ea <__aeabi_dmul+0xca>
    83e8:	e1fe      	b.n	87e8 <__aeabi_dmul+0x4c8>
    83ea:	2801      	cmp	r0, #1
    83ec:	d000      	beq.n	83f0 <__aeabi_dmul+0xd0>
    83ee:	e12c      	b.n	864a <__aeabi_dmul+0x32a>
    83f0:	2300      	movs	r3, #0
    83f2:	2700      	movs	r7, #0
    83f4:	2600      	movs	r6, #0
    83f6:	2500      	movs	r5, #0
    83f8:	033f      	lsls	r7, r7, #12
    83fa:	0d2a      	lsrs	r2, r5, #20
    83fc:	0b3f      	lsrs	r7, r7, #12
    83fe:	48b3      	ldr	r0, [pc, #716]	; (86cc <__aeabi_dmul+0x3ac>)
    8400:	0512      	lsls	r2, r2, #20
    8402:	433a      	orrs	r2, r7
    8404:	4002      	ands	r2, r0
    8406:	051b      	lsls	r3, r3, #20
    8408:	4313      	orrs	r3, r2
    840a:	9a00      	ldr	r2, [sp, #0]
    840c:	005b      	lsls	r3, r3, #1
    840e:	07d1      	lsls	r1, r2, #31
    8410:	085b      	lsrs	r3, r3, #1
    8412:	430b      	orrs	r3, r1
    8414:	0030      	movs	r0, r6
    8416:	0019      	movs	r1, r3
    8418:	b007      	add	sp, #28
    841a:	bc3c      	pop	{r2, r3, r4, r5}
    841c:	4690      	mov	r8, r2
    841e:	4699      	mov	r9, r3
    8420:	46a2      	mov	sl, r4
    8422:	46ab      	mov	fp, r5
    8424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8426:	465b      	mov	r3, fp
    8428:	433b      	orrs	r3, r7
    842a:	9301      	str	r3, [sp, #4]
    842c:	d100      	bne.n	8430 <__aeabi_dmul+0x110>
    842e:	e12f      	b.n	8690 <__aeabi_dmul+0x370>
    8430:	2f00      	cmp	r7, #0
    8432:	d100      	bne.n	8436 <__aeabi_dmul+0x116>
    8434:	e1a5      	b.n	8782 <__aeabi_dmul+0x462>
    8436:	0038      	movs	r0, r7
    8438:	f000 fea4 	bl	9184 <__clzsi2>
    843c:	0003      	movs	r3, r0
    843e:	3b0b      	subs	r3, #11
    8440:	2b1c      	cmp	r3, #28
    8442:	dd00      	ble.n	8446 <__aeabi_dmul+0x126>
    8444:	e196      	b.n	8774 <__aeabi_dmul+0x454>
    8446:	221d      	movs	r2, #29
    8448:	1ad3      	subs	r3, r2, r3
    844a:	465a      	mov	r2, fp
    844c:	0001      	movs	r1, r0
    844e:	40da      	lsrs	r2, r3
    8450:	465e      	mov	r6, fp
    8452:	3908      	subs	r1, #8
    8454:	408f      	lsls	r7, r1
    8456:	0013      	movs	r3, r2
    8458:	408e      	lsls	r6, r1
    845a:	433b      	orrs	r3, r7
    845c:	9301      	str	r3, [sp, #4]
    845e:	4b9c      	ldr	r3, [pc, #624]	; (86d0 <__aeabi_dmul+0x3b0>)
    8460:	2700      	movs	r7, #0
    8462:	1a1b      	subs	r3, r3, r0
    8464:	4699      	mov	r9, r3
    8466:	2300      	movs	r3, #0
    8468:	469b      	mov	fp, r3
    846a:	e77d      	b.n	8368 <__aeabi_dmul+0x48>
    846c:	4641      	mov	r1, r8
    846e:	4653      	mov	r3, sl
    8470:	430b      	orrs	r3, r1
    8472:	4993      	ldr	r1, [pc, #588]	; (86c0 <__aeabi_dmul+0x3a0>)
    8474:	468c      	mov	ip, r1
    8476:	44e1      	add	r9, ip
    8478:	2b00      	cmp	r3, #0
    847a:	d000      	beq.n	847e <__aeabi_dmul+0x15e>
    847c:	e11a      	b.n	86b4 <__aeabi_dmul+0x394>
    847e:	2202      	movs	r2, #2
    8480:	2002      	movs	r0, #2
    8482:	4317      	orrs	r7, r2
    8484:	2200      	movs	r2, #0
    8486:	e78c      	b.n	83a2 <__aeabi_dmul+0x82>
    8488:	4313      	orrs	r3, r2
    848a:	d100      	bne.n	848e <__aeabi_dmul+0x16e>
    848c:	e10d      	b.n	86aa <__aeabi_dmul+0x38a>
    848e:	4643      	mov	r3, r8
    8490:	2b00      	cmp	r3, #0
    8492:	d100      	bne.n	8496 <__aeabi_dmul+0x176>
    8494:	e181      	b.n	879a <__aeabi_dmul+0x47a>
    8496:	4640      	mov	r0, r8
    8498:	f000 fe74 	bl	9184 <__clzsi2>
    849c:	0002      	movs	r2, r0
    849e:	3a0b      	subs	r2, #11
    84a0:	2a1c      	cmp	r2, #28
    84a2:	dd00      	ble.n	84a6 <__aeabi_dmul+0x186>
    84a4:	e172      	b.n	878c <__aeabi_dmul+0x46c>
    84a6:	0001      	movs	r1, r0
    84a8:	4643      	mov	r3, r8
    84aa:	3908      	subs	r1, #8
    84ac:	408b      	lsls	r3, r1
    84ae:	4698      	mov	r8, r3
    84b0:	231d      	movs	r3, #29
    84b2:	1a9a      	subs	r2, r3, r2
    84b4:	4653      	mov	r3, sl
    84b6:	40d3      	lsrs	r3, r2
    84b8:	001a      	movs	r2, r3
    84ba:	4643      	mov	r3, r8
    84bc:	4313      	orrs	r3, r2
    84be:	4652      	mov	r2, sl
    84c0:	408a      	lsls	r2, r1
    84c2:	4649      	mov	r1, r9
    84c4:	1a08      	subs	r0, r1, r0
    84c6:	4982      	ldr	r1, [pc, #520]	; (86d0 <__aeabi_dmul+0x3b0>)
    84c8:	4689      	mov	r9, r1
    84ca:	4481      	add	r9, r0
    84cc:	2000      	movs	r0, #0
    84ce:	e768      	b.n	83a2 <__aeabi_dmul+0x82>
    84d0:	4b7b      	ldr	r3, [pc, #492]	; (86c0 <__aeabi_dmul+0x3a0>)
    84d2:	2700      	movs	r7, #0
    84d4:	2600      	movs	r6, #0
    84d6:	e78e      	b.n	83f6 <__aeabi_dmul+0xd6>
    84d8:	0c14      	lsrs	r4, r2, #16
    84da:	0412      	lsls	r2, r2, #16
    84dc:	0c12      	lsrs	r2, r2, #16
    84de:	0011      	movs	r1, r2
    84e0:	0c37      	lsrs	r7, r6, #16
    84e2:	0436      	lsls	r6, r6, #16
    84e4:	0c35      	lsrs	r5, r6, #16
    84e6:	4379      	muls	r1, r7
    84e8:	0028      	movs	r0, r5
    84ea:	468c      	mov	ip, r1
    84ec:	002e      	movs	r6, r5
    84ee:	4360      	muls	r0, r4
    84f0:	4460      	add	r0, ip
    84f2:	4683      	mov	fp, r0
    84f4:	4356      	muls	r6, r2
    84f6:	0021      	movs	r1, r4
    84f8:	0c30      	lsrs	r0, r6, #16
    84fa:	4680      	mov	r8, r0
    84fc:	4658      	mov	r0, fp
    84fe:	4379      	muls	r1, r7
    8500:	4440      	add	r0, r8
    8502:	9102      	str	r1, [sp, #8]
    8504:	4584      	cmp	ip, r0
    8506:	d906      	bls.n	8516 <__aeabi_dmul+0x1f6>
    8508:	4688      	mov	r8, r1
    850a:	2180      	movs	r1, #128	; 0x80
    850c:	0249      	lsls	r1, r1, #9
    850e:	468c      	mov	ip, r1
    8510:	44e0      	add	r8, ip
    8512:	4641      	mov	r1, r8
    8514:	9102      	str	r1, [sp, #8]
    8516:	0436      	lsls	r6, r6, #16
    8518:	0c01      	lsrs	r1, r0, #16
    851a:	0c36      	lsrs	r6, r6, #16
    851c:	0400      	lsls	r0, r0, #16
    851e:	468b      	mov	fp, r1
    8520:	1981      	adds	r1, r0, r6
    8522:	0c1e      	lsrs	r6, r3, #16
    8524:	041b      	lsls	r3, r3, #16
    8526:	0c1b      	lsrs	r3, r3, #16
    8528:	9103      	str	r1, [sp, #12]
    852a:	0019      	movs	r1, r3
    852c:	4379      	muls	r1, r7
    852e:	468c      	mov	ip, r1
    8530:	0028      	movs	r0, r5
    8532:	4375      	muls	r5, r6
    8534:	4465      	add	r5, ip
    8536:	46a8      	mov	r8, r5
    8538:	4358      	muls	r0, r3
    853a:	0c05      	lsrs	r5, r0, #16
    853c:	4445      	add	r5, r8
    853e:	4377      	muls	r7, r6
    8540:	42a9      	cmp	r1, r5
    8542:	d903      	bls.n	854c <__aeabi_dmul+0x22c>
    8544:	2180      	movs	r1, #128	; 0x80
    8546:	0249      	lsls	r1, r1, #9
    8548:	468c      	mov	ip, r1
    854a:	4467      	add	r7, ip
    854c:	0c29      	lsrs	r1, r5, #16
    854e:	468c      	mov	ip, r1
    8550:	0039      	movs	r1, r7
    8552:	0400      	lsls	r0, r0, #16
    8554:	0c00      	lsrs	r0, r0, #16
    8556:	042d      	lsls	r5, r5, #16
    8558:	182d      	adds	r5, r5, r0
    855a:	4461      	add	r1, ip
    855c:	44ab      	add	fp, r5
    855e:	9105      	str	r1, [sp, #20]
    8560:	4659      	mov	r1, fp
    8562:	9104      	str	r1, [sp, #16]
    8564:	9901      	ldr	r1, [sp, #4]
    8566:	040f      	lsls	r7, r1, #16
    8568:	0c3f      	lsrs	r7, r7, #16
    856a:	0c08      	lsrs	r0, r1, #16
    856c:	0039      	movs	r1, r7
    856e:	4351      	muls	r1, r2
    8570:	4342      	muls	r2, r0
    8572:	4690      	mov	r8, r2
    8574:	0002      	movs	r2, r0
    8576:	468c      	mov	ip, r1
    8578:	0c09      	lsrs	r1, r1, #16
    857a:	468b      	mov	fp, r1
    857c:	4362      	muls	r2, r4
    857e:	437c      	muls	r4, r7
    8580:	4444      	add	r4, r8
    8582:	445c      	add	r4, fp
    8584:	45a0      	cmp	r8, r4
    8586:	d903      	bls.n	8590 <__aeabi_dmul+0x270>
    8588:	2180      	movs	r1, #128	; 0x80
    858a:	0249      	lsls	r1, r1, #9
    858c:	4688      	mov	r8, r1
    858e:	4442      	add	r2, r8
    8590:	0c21      	lsrs	r1, r4, #16
    8592:	4688      	mov	r8, r1
    8594:	4661      	mov	r1, ip
    8596:	0409      	lsls	r1, r1, #16
    8598:	0c09      	lsrs	r1, r1, #16
    859a:	468c      	mov	ip, r1
    859c:	0039      	movs	r1, r7
    859e:	4359      	muls	r1, r3
    85a0:	4343      	muls	r3, r0
    85a2:	4370      	muls	r0, r6
    85a4:	437e      	muls	r6, r7
    85a6:	0c0f      	lsrs	r7, r1, #16
    85a8:	18f6      	adds	r6, r6, r3
    85aa:	0424      	lsls	r4, r4, #16
    85ac:	19be      	adds	r6, r7, r6
    85ae:	4464      	add	r4, ip
    85b0:	4442      	add	r2, r8
    85b2:	468c      	mov	ip, r1
    85b4:	42b3      	cmp	r3, r6
    85b6:	d903      	bls.n	85c0 <__aeabi_dmul+0x2a0>
    85b8:	2380      	movs	r3, #128	; 0x80
    85ba:	025b      	lsls	r3, r3, #9
    85bc:	4698      	mov	r8, r3
    85be:	4440      	add	r0, r8
    85c0:	9b02      	ldr	r3, [sp, #8]
    85c2:	4661      	mov	r1, ip
    85c4:	4698      	mov	r8, r3
    85c6:	9b04      	ldr	r3, [sp, #16]
    85c8:	0437      	lsls	r7, r6, #16
    85ca:	4443      	add	r3, r8
    85cc:	469b      	mov	fp, r3
    85ce:	45ab      	cmp	fp, r5
    85d0:	41ad      	sbcs	r5, r5
    85d2:	426b      	negs	r3, r5
    85d4:	040d      	lsls	r5, r1, #16
    85d6:	9905      	ldr	r1, [sp, #20]
    85d8:	0c2d      	lsrs	r5, r5, #16
    85da:	468c      	mov	ip, r1
    85dc:	197f      	adds	r7, r7, r5
    85de:	4467      	add	r7, ip
    85e0:	18fd      	adds	r5, r7, r3
    85e2:	46a8      	mov	r8, r5
    85e4:	465d      	mov	r5, fp
    85e6:	192d      	adds	r5, r5, r4
    85e8:	42a5      	cmp	r5, r4
    85ea:	41a4      	sbcs	r4, r4
    85ec:	4693      	mov	fp, r2
    85ee:	4264      	negs	r4, r4
    85f0:	46a4      	mov	ip, r4
    85f2:	44c3      	add	fp, r8
    85f4:	44dc      	add	ip, fp
    85f6:	428f      	cmp	r7, r1
    85f8:	41bf      	sbcs	r7, r7
    85fa:	4598      	cmp	r8, r3
    85fc:	419b      	sbcs	r3, r3
    85fe:	4593      	cmp	fp, r2
    8600:	4192      	sbcs	r2, r2
    8602:	45a4      	cmp	ip, r4
    8604:	41a4      	sbcs	r4, r4
    8606:	425b      	negs	r3, r3
    8608:	427f      	negs	r7, r7
    860a:	431f      	orrs	r7, r3
    860c:	0c36      	lsrs	r6, r6, #16
    860e:	4252      	negs	r2, r2
    8610:	4264      	negs	r4, r4
    8612:	19bf      	adds	r7, r7, r6
    8614:	4322      	orrs	r2, r4
    8616:	18bf      	adds	r7, r7, r2
    8618:	4662      	mov	r2, ip
    861a:	1838      	adds	r0, r7, r0
    861c:	0243      	lsls	r3, r0, #9
    861e:	0dd2      	lsrs	r2, r2, #23
    8620:	9903      	ldr	r1, [sp, #12]
    8622:	4313      	orrs	r3, r2
    8624:	026a      	lsls	r2, r5, #9
    8626:	430a      	orrs	r2, r1
    8628:	1e50      	subs	r0, r2, #1
    862a:	4182      	sbcs	r2, r0
    862c:	4661      	mov	r1, ip
    862e:	0ded      	lsrs	r5, r5, #23
    8630:	432a      	orrs	r2, r5
    8632:	024e      	lsls	r6, r1, #9
    8634:	4332      	orrs	r2, r6
    8636:	01d9      	lsls	r1, r3, #7
    8638:	d400      	bmi.n	863c <__aeabi_dmul+0x31c>
    863a:	e0b3      	b.n	87a4 <__aeabi_dmul+0x484>
    863c:	2601      	movs	r6, #1
    863e:	0850      	lsrs	r0, r2, #1
    8640:	4032      	ands	r2, r6
    8642:	4302      	orrs	r2, r0
    8644:	07de      	lsls	r6, r3, #31
    8646:	4332      	orrs	r2, r6
    8648:	085b      	lsrs	r3, r3, #1
    864a:	4c22      	ldr	r4, [pc, #136]	; (86d4 <__aeabi_dmul+0x3b4>)
    864c:	4454      	add	r4, sl
    864e:	2c00      	cmp	r4, #0
    8650:	dd62      	ble.n	8718 <__aeabi_dmul+0x3f8>
    8652:	0751      	lsls	r1, r2, #29
    8654:	d009      	beq.n	866a <__aeabi_dmul+0x34a>
    8656:	200f      	movs	r0, #15
    8658:	4010      	ands	r0, r2
    865a:	2804      	cmp	r0, #4
    865c:	d005      	beq.n	866a <__aeabi_dmul+0x34a>
    865e:	1d10      	adds	r0, r2, #4
    8660:	4290      	cmp	r0, r2
    8662:	4192      	sbcs	r2, r2
    8664:	4252      	negs	r2, r2
    8666:	189b      	adds	r3, r3, r2
    8668:	0002      	movs	r2, r0
    866a:	01d9      	lsls	r1, r3, #7
    866c:	d504      	bpl.n	8678 <__aeabi_dmul+0x358>
    866e:	2480      	movs	r4, #128	; 0x80
    8670:	4819      	ldr	r0, [pc, #100]	; (86d8 <__aeabi_dmul+0x3b8>)
    8672:	00e4      	lsls	r4, r4, #3
    8674:	4003      	ands	r3, r0
    8676:	4454      	add	r4, sl
    8678:	4818      	ldr	r0, [pc, #96]	; (86dc <__aeabi_dmul+0x3bc>)
    867a:	4284      	cmp	r4, r0
    867c:	dd00      	ble.n	8680 <__aeabi_dmul+0x360>
    867e:	e727      	b.n	84d0 <__aeabi_dmul+0x1b0>
    8680:	075e      	lsls	r6, r3, #29
    8682:	025b      	lsls	r3, r3, #9
    8684:	08d2      	lsrs	r2, r2, #3
    8686:	0b1f      	lsrs	r7, r3, #12
    8688:	0563      	lsls	r3, r4, #21
    868a:	4316      	orrs	r6, r2
    868c:	0d5b      	lsrs	r3, r3, #21
    868e:	e6b2      	b.n	83f6 <__aeabi_dmul+0xd6>
    8690:	2300      	movs	r3, #0
    8692:	4699      	mov	r9, r3
    8694:	3301      	adds	r3, #1
    8696:	2704      	movs	r7, #4
    8698:	2600      	movs	r6, #0
    869a:	469b      	mov	fp, r3
    869c:	e664      	b.n	8368 <__aeabi_dmul+0x48>
    869e:	2303      	movs	r3, #3
    86a0:	9701      	str	r7, [sp, #4]
    86a2:	4681      	mov	r9, r0
    86a4:	270c      	movs	r7, #12
    86a6:	469b      	mov	fp, r3
    86a8:	e65e      	b.n	8368 <__aeabi_dmul+0x48>
    86aa:	2201      	movs	r2, #1
    86ac:	2001      	movs	r0, #1
    86ae:	4317      	orrs	r7, r2
    86b0:	2200      	movs	r2, #0
    86b2:	e676      	b.n	83a2 <__aeabi_dmul+0x82>
    86b4:	2303      	movs	r3, #3
    86b6:	2003      	movs	r0, #3
    86b8:	431f      	orrs	r7, r3
    86ba:	4643      	mov	r3, r8
    86bc:	e671      	b.n	83a2 <__aeabi_dmul+0x82>
    86be:	46c0      	nop			; (mov r8, r8)
    86c0:	000007ff 	.word	0x000007ff
    86c4:	fffffc01 	.word	0xfffffc01
    86c8:	0000ada0 	.word	0x0000ada0
    86cc:	800fffff 	.word	0x800fffff
    86d0:	fffffc0d 	.word	0xfffffc0d
    86d4:	000003ff 	.word	0x000003ff
    86d8:	feffffff 	.word	0xfeffffff
    86dc:	000007fe 	.word	0x000007fe
    86e0:	2300      	movs	r3, #0
    86e2:	2780      	movs	r7, #128	; 0x80
    86e4:	9300      	str	r3, [sp, #0]
    86e6:	033f      	lsls	r7, r7, #12
    86e8:	2600      	movs	r6, #0
    86ea:	4b43      	ldr	r3, [pc, #268]	; (87f8 <__aeabi_dmul+0x4d8>)
    86ec:	e683      	b.n	83f6 <__aeabi_dmul+0xd6>
    86ee:	9b01      	ldr	r3, [sp, #4]
    86f0:	0032      	movs	r2, r6
    86f2:	46a4      	mov	ip, r4
    86f4:	4658      	mov	r0, fp
    86f6:	e670      	b.n	83da <__aeabi_dmul+0xba>
    86f8:	46ac      	mov	ip, r5
    86fa:	e66e      	b.n	83da <__aeabi_dmul+0xba>
    86fc:	2780      	movs	r7, #128	; 0x80
    86fe:	9901      	ldr	r1, [sp, #4]
    8700:	033f      	lsls	r7, r7, #12
    8702:	4239      	tst	r1, r7
    8704:	d02d      	beq.n	8762 <__aeabi_dmul+0x442>
    8706:	423b      	tst	r3, r7
    8708:	d12b      	bne.n	8762 <__aeabi_dmul+0x442>
    870a:	431f      	orrs	r7, r3
    870c:	033f      	lsls	r7, r7, #12
    870e:	0b3f      	lsrs	r7, r7, #12
    8710:	9500      	str	r5, [sp, #0]
    8712:	0016      	movs	r6, r2
    8714:	4b38      	ldr	r3, [pc, #224]	; (87f8 <__aeabi_dmul+0x4d8>)
    8716:	e66e      	b.n	83f6 <__aeabi_dmul+0xd6>
    8718:	2501      	movs	r5, #1
    871a:	1b2d      	subs	r5, r5, r4
    871c:	2d38      	cmp	r5, #56	; 0x38
    871e:	dd00      	ble.n	8722 <__aeabi_dmul+0x402>
    8720:	e666      	b.n	83f0 <__aeabi_dmul+0xd0>
    8722:	2d1f      	cmp	r5, #31
    8724:	dc40      	bgt.n	87a8 <__aeabi_dmul+0x488>
    8726:	4835      	ldr	r0, [pc, #212]	; (87fc <__aeabi_dmul+0x4dc>)
    8728:	001c      	movs	r4, r3
    872a:	4450      	add	r0, sl
    872c:	0016      	movs	r6, r2
    872e:	4082      	lsls	r2, r0
    8730:	4084      	lsls	r4, r0
    8732:	40ee      	lsrs	r6, r5
    8734:	1e50      	subs	r0, r2, #1
    8736:	4182      	sbcs	r2, r0
    8738:	4334      	orrs	r4, r6
    873a:	4314      	orrs	r4, r2
    873c:	40eb      	lsrs	r3, r5
    873e:	0762      	lsls	r2, r4, #29
    8740:	d009      	beq.n	8756 <__aeabi_dmul+0x436>
    8742:	220f      	movs	r2, #15
    8744:	4022      	ands	r2, r4
    8746:	2a04      	cmp	r2, #4
    8748:	d005      	beq.n	8756 <__aeabi_dmul+0x436>
    874a:	0022      	movs	r2, r4
    874c:	1d14      	adds	r4, r2, #4
    874e:	4294      	cmp	r4, r2
    8750:	4180      	sbcs	r0, r0
    8752:	4240      	negs	r0, r0
    8754:	181b      	adds	r3, r3, r0
    8756:	021a      	lsls	r2, r3, #8
    8758:	d53e      	bpl.n	87d8 <__aeabi_dmul+0x4b8>
    875a:	2301      	movs	r3, #1
    875c:	2700      	movs	r7, #0
    875e:	2600      	movs	r6, #0
    8760:	e649      	b.n	83f6 <__aeabi_dmul+0xd6>
    8762:	2780      	movs	r7, #128	; 0x80
    8764:	9b01      	ldr	r3, [sp, #4]
    8766:	033f      	lsls	r7, r7, #12
    8768:	431f      	orrs	r7, r3
    876a:	033f      	lsls	r7, r7, #12
    876c:	0b3f      	lsrs	r7, r7, #12
    876e:	9400      	str	r4, [sp, #0]
    8770:	4b21      	ldr	r3, [pc, #132]	; (87f8 <__aeabi_dmul+0x4d8>)
    8772:	e640      	b.n	83f6 <__aeabi_dmul+0xd6>
    8774:	0003      	movs	r3, r0
    8776:	465a      	mov	r2, fp
    8778:	3b28      	subs	r3, #40	; 0x28
    877a:	409a      	lsls	r2, r3
    877c:	2600      	movs	r6, #0
    877e:	9201      	str	r2, [sp, #4]
    8780:	e66d      	b.n	845e <__aeabi_dmul+0x13e>
    8782:	4658      	mov	r0, fp
    8784:	f000 fcfe 	bl	9184 <__clzsi2>
    8788:	3020      	adds	r0, #32
    878a:	e657      	b.n	843c <__aeabi_dmul+0x11c>
    878c:	0003      	movs	r3, r0
    878e:	4652      	mov	r2, sl
    8790:	3b28      	subs	r3, #40	; 0x28
    8792:	409a      	lsls	r2, r3
    8794:	0013      	movs	r3, r2
    8796:	2200      	movs	r2, #0
    8798:	e693      	b.n	84c2 <__aeabi_dmul+0x1a2>
    879a:	4650      	mov	r0, sl
    879c:	f000 fcf2 	bl	9184 <__clzsi2>
    87a0:	3020      	adds	r0, #32
    87a2:	e67b      	b.n	849c <__aeabi_dmul+0x17c>
    87a4:	46ca      	mov	sl, r9
    87a6:	e750      	b.n	864a <__aeabi_dmul+0x32a>
    87a8:	201f      	movs	r0, #31
    87aa:	001e      	movs	r6, r3
    87ac:	4240      	negs	r0, r0
    87ae:	1b04      	subs	r4, r0, r4
    87b0:	40e6      	lsrs	r6, r4
    87b2:	2d20      	cmp	r5, #32
    87b4:	d003      	beq.n	87be <__aeabi_dmul+0x49e>
    87b6:	4c12      	ldr	r4, [pc, #72]	; (8800 <__aeabi_dmul+0x4e0>)
    87b8:	4454      	add	r4, sl
    87ba:	40a3      	lsls	r3, r4
    87bc:	431a      	orrs	r2, r3
    87be:	1e50      	subs	r0, r2, #1
    87c0:	4182      	sbcs	r2, r0
    87c2:	4332      	orrs	r2, r6
    87c4:	2607      	movs	r6, #7
    87c6:	2700      	movs	r7, #0
    87c8:	4016      	ands	r6, r2
    87ca:	d009      	beq.n	87e0 <__aeabi_dmul+0x4c0>
    87cc:	200f      	movs	r0, #15
    87ce:	2300      	movs	r3, #0
    87d0:	4010      	ands	r0, r2
    87d2:	0014      	movs	r4, r2
    87d4:	2804      	cmp	r0, #4
    87d6:	d1b9      	bne.n	874c <__aeabi_dmul+0x42c>
    87d8:	0022      	movs	r2, r4
    87da:	075e      	lsls	r6, r3, #29
    87dc:	025b      	lsls	r3, r3, #9
    87de:	0b1f      	lsrs	r7, r3, #12
    87e0:	08d2      	lsrs	r2, r2, #3
    87e2:	4316      	orrs	r6, r2
    87e4:	2300      	movs	r3, #0
    87e6:	e606      	b.n	83f6 <__aeabi_dmul+0xd6>
    87e8:	2780      	movs	r7, #128	; 0x80
    87ea:	033f      	lsls	r7, r7, #12
    87ec:	431f      	orrs	r7, r3
    87ee:	033f      	lsls	r7, r7, #12
    87f0:	0b3f      	lsrs	r7, r7, #12
    87f2:	0016      	movs	r6, r2
    87f4:	4b00      	ldr	r3, [pc, #0]	; (87f8 <__aeabi_dmul+0x4d8>)
    87f6:	e5fe      	b.n	83f6 <__aeabi_dmul+0xd6>
    87f8:	000007ff 	.word	0x000007ff
    87fc:	0000041e 	.word	0x0000041e
    8800:	0000043e 	.word	0x0000043e

00008804 <__aeabi_dsub>:
__aeabi_dsub():
    8804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8806:	4657      	mov	r7, sl
    8808:	464e      	mov	r6, r9
    880a:	4645      	mov	r5, r8
    880c:	46de      	mov	lr, fp
    880e:	000c      	movs	r4, r1
    8810:	0309      	lsls	r1, r1, #12
    8812:	b5e0      	push	{r5, r6, r7, lr}
    8814:	0a49      	lsrs	r1, r1, #9
    8816:	0f46      	lsrs	r6, r0, #29
    8818:	005f      	lsls	r7, r3, #1
    881a:	4331      	orrs	r1, r6
    881c:	031e      	lsls	r6, r3, #12
    881e:	0fdb      	lsrs	r3, r3, #31
    8820:	0a76      	lsrs	r6, r6, #9
    8822:	469b      	mov	fp, r3
    8824:	0f53      	lsrs	r3, r2, #29
    8826:	4333      	orrs	r3, r6
    8828:	4ec8      	ldr	r6, [pc, #800]	; (8b4c <__aeabi_dsub+0x348>)
    882a:	0065      	lsls	r5, r4, #1
    882c:	00c0      	lsls	r0, r0, #3
    882e:	0fe4      	lsrs	r4, r4, #31
    8830:	00d2      	lsls	r2, r2, #3
    8832:	0d6d      	lsrs	r5, r5, #21
    8834:	46a2      	mov	sl, r4
    8836:	4681      	mov	r9, r0
    8838:	0d7f      	lsrs	r7, r7, #21
    883a:	469c      	mov	ip, r3
    883c:	4690      	mov	r8, r2
    883e:	42b7      	cmp	r7, r6
    8840:	d100      	bne.n	8844 <__aeabi_dsub+0x40>
    8842:	e0b9      	b.n	89b8 <__aeabi_dsub+0x1b4>
    8844:	465b      	mov	r3, fp
    8846:	2601      	movs	r6, #1
    8848:	4073      	eors	r3, r6
    884a:	469b      	mov	fp, r3
    884c:	1bee      	subs	r6, r5, r7
    884e:	45a3      	cmp	fp, r4
    8850:	d100      	bne.n	8854 <__aeabi_dsub+0x50>
    8852:	e083      	b.n	895c <__aeabi_dsub+0x158>
    8854:	2e00      	cmp	r6, #0
    8856:	dd63      	ble.n	8920 <__aeabi_dsub+0x11c>
    8858:	2f00      	cmp	r7, #0
    885a:	d000      	beq.n	885e <__aeabi_dsub+0x5a>
    885c:	e0b1      	b.n	89c2 <__aeabi_dsub+0x1be>
    885e:	4663      	mov	r3, ip
    8860:	4313      	orrs	r3, r2
    8862:	d100      	bne.n	8866 <__aeabi_dsub+0x62>
    8864:	e123      	b.n	8aae <__aeabi_dsub+0x2aa>
    8866:	1e73      	subs	r3, r6, #1
    8868:	2b00      	cmp	r3, #0
    886a:	d000      	beq.n	886e <__aeabi_dsub+0x6a>
    886c:	e1ba      	b.n	8be4 <__aeabi_dsub+0x3e0>
    886e:	1a86      	subs	r6, r0, r2
    8870:	4663      	mov	r3, ip
    8872:	42b0      	cmp	r0, r6
    8874:	4180      	sbcs	r0, r0
    8876:	2501      	movs	r5, #1
    8878:	1ac9      	subs	r1, r1, r3
    887a:	4240      	negs	r0, r0
    887c:	1a09      	subs	r1, r1, r0
    887e:	020b      	lsls	r3, r1, #8
    8880:	d400      	bmi.n	8884 <__aeabi_dsub+0x80>
    8882:	e147      	b.n	8b14 <__aeabi_dsub+0x310>
    8884:	0249      	lsls	r1, r1, #9
    8886:	0a4b      	lsrs	r3, r1, #9
    8888:	4698      	mov	r8, r3
    888a:	4643      	mov	r3, r8
    888c:	2b00      	cmp	r3, #0
    888e:	d100      	bne.n	8892 <__aeabi_dsub+0x8e>
    8890:	e189      	b.n	8ba6 <__aeabi_dsub+0x3a2>
    8892:	4640      	mov	r0, r8
    8894:	f000 fc76 	bl	9184 <__clzsi2>
    8898:	0003      	movs	r3, r0
    889a:	3b08      	subs	r3, #8
    889c:	2b1f      	cmp	r3, #31
    889e:	dd00      	ble.n	88a2 <__aeabi_dsub+0x9e>
    88a0:	e17c      	b.n	8b9c <__aeabi_dsub+0x398>
    88a2:	2220      	movs	r2, #32
    88a4:	0030      	movs	r0, r6
    88a6:	1ad2      	subs	r2, r2, r3
    88a8:	4641      	mov	r1, r8
    88aa:	40d0      	lsrs	r0, r2
    88ac:	4099      	lsls	r1, r3
    88ae:	0002      	movs	r2, r0
    88b0:	409e      	lsls	r6, r3
    88b2:	430a      	orrs	r2, r1
    88b4:	429d      	cmp	r5, r3
    88b6:	dd00      	ble.n	88ba <__aeabi_dsub+0xb6>
    88b8:	e16a      	b.n	8b90 <__aeabi_dsub+0x38c>
    88ba:	1b5d      	subs	r5, r3, r5
    88bc:	1c6b      	adds	r3, r5, #1
    88be:	2b1f      	cmp	r3, #31
    88c0:	dd00      	ble.n	88c4 <__aeabi_dsub+0xc0>
    88c2:	e194      	b.n	8bee <__aeabi_dsub+0x3ea>
    88c4:	2120      	movs	r1, #32
    88c6:	0010      	movs	r0, r2
    88c8:	0035      	movs	r5, r6
    88ca:	1ac9      	subs	r1, r1, r3
    88cc:	408e      	lsls	r6, r1
    88ce:	40da      	lsrs	r2, r3
    88d0:	4088      	lsls	r0, r1
    88d2:	40dd      	lsrs	r5, r3
    88d4:	1e71      	subs	r1, r6, #1
    88d6:	418e      	sbcs	r6, r1
    88d8:	0011      	movs	r1, r2
    88da:	2207      	movs	r2, #7
    88dc:	4328      	orrs	r0, r5
    88de:	2500      	movs	r5, #0
    88e0:	4306      	orrs	r6, r0
    88e2:	4032      	ands	r2, r6
    88e4:	2a00      	cmp	r2, #0
    88e6:	d009      	beq.n	88fc <__aeabi_dsub+0xf8>
    88e8:	230f      	movs	r3, #15
    88ea:	4033      	ands	r3, r6
    88ec:	2b04      	cmp	r3, #4
    88ee:	d005      	beq.n	88fc <__aeabi_dsub+0xf8>
    88f0:	1d33      	adds	r3, r6, #4
    88f2:	42b3      	cmp	r3, r6
    88f4:	41b6      	sbcs	r6, r6
    88f6:	4276      	negs	r6, r6
    88f8:	1989      	adds	r1, r1, r6
    88fa:	001e      	movs	r6, r3
    88fc:	020b      	lsls	r3, r1, #8
    88fe:	d400      	bmi.n	8902 <__aeabi_dsub+0xfe>
    8900:	e23d      	b.n	8d7e <__aeabi_dsub+0x57a>
    8902:	1c6a      	adds	r2, r5, #1
    8904:	4b91      	ldr	r3, [pc, #580]	; (8b4c <__aeabi_dsub+0x348>)
    8906:	0555      	lsls	r5, r2, #21
    8908:	0d6d      	lsrs	r5, r5, #21
    890a:	429a      	cmp	r2, r3
    890c:	d100      	bne.n	8910 <__aeabi_dsub+0x10c>
    890e:	e119      	b.n	8b44 <__aeabi_dsub+0x340>
    8910:	4a8f      	ldr	r2, [pc, #572]	; (8b50 <__aeabi_dsub+0x34c>)
    8912:	08f6      	lsrs	r6, r6, #3
    8914:	400a      	ands	r2, r1
    8916:	0757      	lsls	r7, r2, #29
    8918:	0252      	lsls	r2, r2, #9
    891a:	4337      	orrs	r7, r6
    891c:	0b12      	lsrs	r2, r2, #12
    891e:	e09b      	b.n	8a58 <__aeabi_dsub+0x254>
    8920:	2e00      	cmp	r6, #0
    8922:	d000      	beq.n	8926 <__aeabi_dsub+0x122>
    8924:	e0c5      	b.n	8ab2 <__aeabi_dsub+0x2ae>
    8926:	1c6e      	adds	r6, r5, #1
    8928:	0576      	lsls	r6, r6, #21
    892a:	0d76      	lsrs	r6, r6, #21
    892c:	2e01      	cmp	r6, #1
    892e:	dc00      	bgt.n	8932 <__aeabi_dsub+0x12e>
    8930:	e148      	b.n	8bc4 <__aeabi_dsub+0x3c0>
    8932:	4667      	mov	r7, ip
    8934:	1a86      	subs	r6, r0, r2
    8936:	1bcb      	subs	r3, r1, r7
    8938:	42b0      	cmp	r0, r6
    893a:	41bf      	sbcs	r7, r7
    893c:	427f      	negs	r7, r7
    893e:	46b8      	mov	r8, r7
    8940:	001f      	movs	r7, r3
    8942:	4643      	mov	r3, r8
    8944:	1aff      	subs	r7, r7, r3
    8946:	003b      	movs	r3, r7
    8948:	46b8      	mov	r8, r7
    894a:	021b      	lsls	r3, r3, #8
    894c:	d500      	bpl.n	8950 <__aeabi_dsub+0x14c>
    894e:	e15f      	b.n	8c10 <__aeabi_dsub+0x40c>
    8950:	4337      	orrs	r7, r6
    8952:	d19a      	bne.n	888a <__aeabi_dsub+0x86>
    8954:	2200      	movs	r2, #0
    8956:	2400      	movs	r4, #0
    8958:	2500      	movs	r5, #0
    895a:	e079      	b.n	8a50 <__aeabi_dsub+0x24c>
    895c:	2e00      	cmp	r6, #0
    895e:	dc00      	bgt.n	8962 <__aeabi_dsub+0x15e>
    8960:	e0fa      	b.n	8b58 <__aeabi_dsub+0x354>
    8962:	2f00      	cmp	r7, #0
    8964:	d100      	bne.n	8968 <__aeabi_dsub+0x164>
    8966:	e08d      	b.n	8a84 <__aeabi_dsub+0x280>
    8968:	4b78      	ldr	r3, [pc, #480]	; (8b4c <__aeabi_dsub+0x348>)
    896a:	429d      	cmp	r5, r3
    896c:	d067      	beq.n	8a3e <__aeabi_dsub+0x23a>
    896e:	2380      	movs	r3, #128	; 0x80
    8970:	4667      	mov	r7, ip
    8972:	041b      	lsls	r3, r3, #16
    8974:	431f      	orrs	r7, r3
    8976:	46bc      	mov	ip, r7
    8978:	2e38      	cmp	r6, #56	; 0x38
    897a:	dc00      	bgt.n	897e <__aeabi_dsub+0x17a>
    897c:	e152      	b.n	8c24 <__aeabi_dsub+0x420>
    897e:	4663      	mov	r3, ip
    8980:	4313      	orrs	r3, r2
    8982:	1e5a      	subs	r2, r3, #1
    8984:	4193      	sbcs	r3, r2
    8986:	181e      	adds	r6, r3, r0
    8988:	4286      	cmp	r6, r0
    898a:	4180      	sbcs	r0, r0
    898c:	4240      	negs	r0, r0
    898e:	1809      	adds	r1, r1, r0
    8990:	020b      	lsls	r3, r1, #8
    8992:	d400      	bmi.n	8996 <__aeabi_dsub+0x192>
    8994:	e0be      	b.n	8b14 <__aeabi_dsub+0x310>
    8996:	4b6d      	ldr	r3, [pc, #436]	; (8b4c <__aeabi_dsub+0x348>)
    8998:	3501      	adds	r5, #1
    899a:	429d      	cmp	r5, r3
    899c:	d100      	bne.n	89a0 <__aeabi_dsub+0x19c>
    899e:	e0d2      	b.n	8b46 <__aeabi_dsub+0x342>
    89a0:	4a6b      	ldr	r2, [pc, #428]	; (8b50 <__aeabi_dsub+0x34c>)
    89a2:	0873      	lsrs	r3, r6, #1
    89a4:	400a      	ands	r2, r1
    89a6:	2101      	movs	r1, #1
    89a8:	400e      	ands	r6, r1
    89aa:	431e      	orrs	r6, r3
    89ac:	0851      	lsrs	r1, r2, #1
    89ae:	07d3      	lsls	r3, r2, #31
    89b0:	2207      	movs	r2, #7
    89b2:	431e      	orrs	r6, r3
    89b4:	4032      	ands	r2, r6
    89b6:	e795      	b.n	88e4 <__aeabi_dsub+0xe0>
    89b8:	001e      	movs	r6, r3
    89ba:	4316      	orrs	r6, r2
    89bc:	d000      	beq.n	89c0 <__aeabi_dsub+0x1bc>
    89be:	e745      	b.n	884c <__aeabi_dsub+0x48>
    89c0:	e740      	b.n	8844 <__aeabi_dsub+0x40>
    89c2:	4b62      	ldr	r3, [pc, #392]	; (8b4c <__aeabi_dsub+0x348>)
    89c4:	429d      	cmp	r5, r3
    89c6:	d03a      	beq.n	8a3e <__aeabi_dsub+0x23a>
    89c8:	2380      	movs	r3, #128	; 0x80
    89ca:	4667      	mov	r7, ip
    89cc:	041b      	lsls	r3, r3, #16
    89ce:	431f      	orrs	r7, r3
    89d0:	46bc      	mov	ip, r7
    89d2:	2e38      	cmp	r6, #56	; 0x38
    89d4:	dd00      	ble.n	89d8 <__aeabi_dsub+0x1d4>
    89d6:	e0eb      	b.n	8bb0 <__aeabi_dsub+0x3ac>
    89d8:	2e1f      	cmp	r6, #31
    89da:	dc00      	bgt.n	89de <__aeabi_dsub+0x1da>
    89dc:	e13a      	b.n	8c54 <__aeabi_dsub+0x450>
    89de:	0033      	movs	r3, r6
    89e0:	4667      	mov	r7, ip
    89e2:	3b20      	subs	r3, #32
    89e4:	40df      	lsrs	r7, r3
    89e6:	003b      	movs	r3, r7
    89e8:	2e20      	cmp	r6, #32
    89ea:	d005      	beq.n	89f8 <__aeabi_dsub+0x1f4>
    89ec:	2740      	movs	r7, #64	; 0x40
    89ee:	1bbf      	subs	r7, r7, r6
    89f0:	4666      	mov	r6, ip
    89f2:	40be      	lsls	r6, r7
    89f4:	4332      	orrs	r2, r6
    89f6:	4690      	mov	r8, r2
    89f8:	4646      	mov	r6, r8
    89fa:	1e72      	subs	r2, r6, #1
    89fc:	4196      	sbcs	r6, r2
    89fe:	4333      	orrs	r3, r6
    8a00:	e0da      	b.n	8bb8 <__aeabi_dsub+0x3b4>
    8a02:	2b00      	cmp	r3, #0
    8a04:	d100      	bne.n	8a08 <__aeabi_dsub+0x204>
    8a06:	e214      	b.n	8e32 <__aeabi_dsub+0x62e>
    8a08:	4663      	mov	r3, ip
    8a0a:	4313      	orrs	r3, r2
    8a0c:	d100      	bne.n	8a10 <__aeabi_dsub+0x20c>
    8a0e:	e168      	b.n	8ce2 <__aeabi_dsub+0x4de>
    8a10:	2380      	movs	r3, #128	; 0x80
    8a12:	074e      	lsls	r6, r1, #29
    8a14:	08c0      	lsrs	r0, r0, #3
    8a16:	08c9      	lsrs	r1, r1, #3
    8a18:	031b      	lsls	r3, r3, #12
    8a1a:	4306      	orrs	r6, r0
    8a1c:	4219      	tst	r1, r3
    8a1e:	d008      	beq.n	8a32 <__aeabi_dsub+0x22e>
    8a20:	4660      	mov	r0, ip
    8a22:	08c0      	lsrs	r0, r0, #3
    8a24:	4218      	tst	r0, r3
    8a26:	d104      	bne.n	8a32 <__aeabi_dsub+0x22e>
    8a28:	4663      	mov	r3, ip
    8a2a:	0001      	movs	r1, r0
    8a2c:	08d2      	lsrs	r2, r2, #3
    8a2e:	075e      	lsls	r6, r3, #29
    8a30:	4316      	orrs	r6, r2
    8a32:	00f3      	lsls	r3, r6, #3
    8a34:	4699      	mov	r9, r3
    8a36:	00c9      	lsls	r1, r1, #3
    8a38:	0f72      	lsrs	r2, r6, #29
    8a3a:	4d44      	ldr	r5, [pc, #272]	; (8b4c <__aeabi_dsub+0x348>)
    8a3c:	4311      	orrs	r1, r2
    8a3e:	464b      	mov	r3, r9
    8a40:	08de      	lsrs	r6, r3, #3
    8a42:	4b42      	ldr	r3, [pc, #264]	; (8b4c <__aeabi_dsub+0x348>)
    8a44:	074f      	lsls	r7, r1, #29
    8a46:	4337      	orrs	r7, r6
    8a48:	08ca      	lsrs	r2, r1, #3
    8a4a:	429d      	cmp	r5, r3
    8a4c:	d100      	bne.n	8a50 <__aeabi_dsub+0x24c>
    8a4e:	e06e      	b.n	8b2e <__aeabi_dsub+0x32a>
    8a50:	0312      	lsls	r2, r2, #12
    8a52:	056d      	lsls	r5, r5, #21
    8a54:	0b12      	lsrs	r2, r2, #12
    8a56:	0d6d      	lsrs	r5, r5, #21
    8a58:	2100      	movs	r1, #0
    8a5a:	0312      	lsls	r2, r2, #12
    8a5c:	0b13      	lsrs	r3, r2, #12
    8a5e:	0d0a      	lsrs	r2, r1, #20
    8a60:	0512      	lsls	r2, r2, #20
    8a62:	431a      	orrs	r2, r3
    8a64:	4b3b      	ldr	r3, [pc, #236]	; (8b54 <__aeabi_dsub+0x350>)
    8a66:	052d      	lsls	r5, r5, #20
    8a68:	4013      	ands	r3, r2
    8a6a:	432b      	orrs	r3, r5
    8a6c:	005b      	lsls	r3, r3, #1
    8a6e:	07e4      	lsls	r4, r4, #31
    8a70:	085b      	lsrs	r3, r3, #1
    8a72:	4323      	orrs	r3, r4
    8a74:	0038      	movs	r0, r7
    8a76:	0019      	movs	r1, r3
    8a78:	bc3c      	pop	{r2, r3, r4, r5}
    8a7a:	4690      	mov	r8, r2
    8a7c:	4699      	mov	r9, r3
    8a7e:	46a2      	mov	sl, r4
    8a80:	46ab      	mov	fp, r5
    8a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a84:	4663      	mov	r3, ip
    8a86:	4313      	orrs	r3, r2
    8a88:	d011      	beq.n	8aae <__aeabi_dsub+0x2aa>
    8a8a:	1e73      	subs	r3, r6, #1
    8a8c:	2b00      	cmp	r3, #0
    8a8e:	d000      	beq.n	8a92 <__aeabi_dsub+0x28e>
    8a90:	e107      	b.n	8ca2 <__aeabi_dsub+0x49e>
    8a92:	1886      	adds	r6, r0, r2
    8a94:	4286      	cmp	r6, r0
    8a96:	4180      	sbcs	r0, r0
    8a98:	4461      	add	r1, ip
    8a9a:	4240      	negs	r0, r0
    8a9c:	1809      	adds	r1, r1, r0
    8a9e:	2501      	movs	r5, #1
    8aa0:	020b      	lsls	r3, r1, #8
    8aa2:	d537      	bpl.n	8b14 <__aeabi_dsub+0x310>
    8aa4:	2502      	movs	r5, #2
    8aa6:	e77b      	b.n	89a0 <__aeabi_dsub+0x19c>
    8aa8:	003e      	movs	r6, r7
    8aaa:	4661      	mov	r1, ip
    8aac:	4691      	mov	r9, r2
    8aae:	0035      	movs	r5, r6
    8ab0:	e7c5      	b.n	8a3e <__aeabi_dsub+0x23a>
    8ab2:	465c      	mov	r4, fp
    8ab4:	2d00      	cmp	r5, #0
    8ab6:	d000      	beq.n	8aba <__aeabi_dsub+0x2b6>
    8ab8:	e0e1      	b.n	8c7e <__aeabi_dsub+0x47a>
    8aba:	000b      	movs	r3, r1
    8abc:	4303      	orrs	r3, r0
    8abe:	d0f3      	beq.n	8aa8 <__aeabi_dsub+0x2a4>
    8ac0:	1c73      	adds	r3, r6, #1
    8ac2:	d100      	bne.n	8ac6 <__aeabi_dsub+0x2c2>
    8ac4:	e1ac      	b.n	8e20 <__aeabi_dsub+0x61c>
    8ac6:	4b21      	ldr	r3, [pc, #132]	; (8b4c <__aeabi_dsub+0x348>)
    8ac8:	429f      	cmp	r7, r3
    8aca:	d100      	bne.n	8ace <__aeabi_dsub+0x2ca>
    8acc:	e13a      	b.n	8d44 <__aeabi_dsub+0x540>
    8ace:	43f3      	mvns	r3, r6
    8ad0:	2b38      	cmp	r3, #56	; 0x38
    8ad2:	dd00      	ble.n	8ad6 <__aeabi_dsub+0x2d2>
    8ad4:	e16f      	b.n	8db6 <__aeabi_dsub+0x5b2>
    8ad6:	2b1f      	cmp	r3, #31
    8ad8:	dd00      	ble.n	8adc <__aeabi_dsub+0x2d8>
    8ada:	e18c      	b.n	8df6 <__aeabi_dsub+0x5f2>
    8adc:	2520      	movs	r5, #32
    8ade:	000e      	movs	r6, r1
    8ae0:	1aed      	subs	r5, r5, r3
    8ae2:	40ae      	lsls	r6, r5
    8ae4:	46b0      	mov	r8, r6
    8ae6:	0006      	movs	r6, r0
    8ae8:	46aa      	mov	sl, r5
    8aea:	40de      	lsrs	r6, r3
    8aec:	4645      	mov	r5, r8
    8aee:	4335      	orrs	r5, r6
    8af0:	002e      	movs	r6, r5
    8af2:	4655      	mov	r5, sl
    8af4:	40d9      	lsrs	r1, r3
    8af6:	40a8      	lsls	r0, r5
    8af8:	4663      	mov	r3, ip
    8afa:	1e45      	subs	r5, r0, #1
    8afc:	41a8      	sbcs	r0, r5
    8afe:	1a5b      	subs	r3, r3, r1
    8b00:	469c      	mov	ip, r3
    8b02:	4330      	orrs	r0, r6
    8b04:	1a16      	subs	r6, r2, r0
    8b06:	42b2      	cmp	r2, r6
    8b08:	4192      	sbcs	r2, r2
    8b0a:	4663      	mov	r3, ip
    8b0c:	4252      	negs	r2, r2
    8b0e:	1a99      	subs	r1, r3, r2
    8b10:	003d      	movs	r5, r7
    8b12:	e6b4      	b.n	887e <__aeabi_dsub+0x7a>
    8b14:	2207      	movs	r2, #7
    8b16:	4032      	ands	r2, r6
    8b18:	2a00      	cmp	r2, #0
    8b1a:	d000      	beq.n	8b1e <__aeabi_dsub+0x31a>
    8b1c:	e6e4      	b.n	88e8 <__aeabi_dsub+0xe4>
    8b1e:	4b0b      	ldr	r3, [pc, #44]	; (8b4c <__aeabi_dsub+0x348>)
    8b20:	08f6      	lsrs	r6, r6, #3
    8b22:	074f      	lsls	r7, r1, #29
    8b24:	4337      	orrs	r7, r6
    8b26:	08ca      	lsrs	r2, r1, #3
    8b28:	429d      	cmp	r5, r3
    8b2a:	d000      	beq.n	8b2e <__aeabi_dsub+0x32a>
    8b2c:	e790      	b.n	8a50 <__aeabi_dsub+0x24c>
    8b2e:	003b      	movs	r3, r7
    8b30:	4313      	orrs	r3, r2
    8b32:	d100      	bne.n	8b36 <__aeabi_dsub+0x332>
    8b34:	e1a6      	b.n	8e84 <__aeabi_dsub+0x680>
    8b36:	2380      	movs	r3, #128	; 0x80
    8b38:	031b      	lsls	r3, r3, #12
    8b3a:	431a      	orrs	r2, r3
    8b3c:	0312      	lsls	r2, r2, #12
    8b3e:	0b12      	lsrs	r2, r2, #12
    8b40:	4d02      	ldr	r5, [pc, #8]	; (8b4c <__aeabi_dsub+0x348>)
    8b42:	e789      	b.n	8a58 <__aeabi_dsub+0x254>
    8b44:	0015      	movs	r5, r2
    8b46:	2200      	movs	r2, #0
    8b48:	2700      	movs	r7, #0
    8b4a:	e785      	b.n	8a58 <__aeabi_dsub+0x254>
    8b4c:	000007ff 	.word	0x000007ff
    8b50:	ff7fffff 	.word	0xff7fffff
    8b54:	800fffff 	.word	0x800fffff
    8b58:	2e00      	cmp	r6, #0
    8b5a:	d000      	beq.n	8b5e <__aeabi_dsub+0x35a>
    8b5c:	e0c7      	b.n	8cee <__aeabi_dsub+0x4ea>
    8b5e:	1c6b      	adds	r3, r5, #1
    8b60:	055e      	lsls	r6, r3, #21
    8b62:	0d76      	lsrs	r6, r6, #21
    8b64:	2e01      	cmp	r6, #1
    8b66:	dc00      	bgt.n	8b6a <__aeabi_dsub+0x366>
    8b68:	e0f0      	b.n	8d4c <__aeabi_dsub+0x548>
    8b6a:	4dc8      	ldr	r5, [pc, #800]	; (8e8c <__aeabi_dsub+0x688>)
    8b6c:	42ab      	cmp	r3, r5
    8b6e:	d100      	bne.n	8b72 <__aeabi_dsub+0x36e>
    8b70:	e0b9      	b.n	8ce6 <__aeabi_dsub+0x4e2>
    8b72:	1885      	adds	r5, r0, r2
    8b74:	000a      	movs	r2, r1
    8b76:	4285      	cmp	r5, r0
    8b78:	4189      	sbcs	r1, r1
    8b7a:	4462      	add	r2, ip
    8b7c:	4249      	negs	r1, r1
    8b7e:	1851      	adds	r1, r2, r1
    8b80:	2207      	movs	r2, #7
    8b82:	07ce      	lsls	r6, r1, #31
    8b84:	086d      	lsrs	r5, r5, #1
    8b86:	432e      	orrs	r6, r5
    8b88:	0849      	lsrs	r1, r1, #1
    8b8a:	4032      	ands	r2, r6
    8b8c:	001d      	movs	r5, r3
    8b8e:	e6a9      	b.n	88e4 <__aeabi_dsub+0xe0>
    8b90:	49bf      	ldr	r1, [pc, #764]	; (8e90 <__aeabi_dsub+0x68c>)
    8b92:	1aed      	subs	r5, r5, r3
    8b94:	4011      	ands	r1, r2
    8b96:	2207      	movs	r2, #7
    8b98:	4032      	ands	r2, r6
    8b9a:	e6a3      	b.n	88e4 <__aeabi_dsub+0xe0>
    8b9c:	0032      	movs	r2, r6
    8b9e:	3828      	subs	r0, #40	; 0x28
    8ba0:	4082      	lsls	r2, r0
    8ba2:	2600      	movs	r6, #0
    8ba4:	e686      	b.n	88b4 <__aeabi_dsub+0xb0>
    8ba6:	0030      	movs	r0, r6
    8ba8:	f000 faec 	bl	9184 <__clzsi2>
    8bac:	3020      	adds	r0, #32
    8bae:	e673      	b.n	8898 <__aeabi_dsub+0x94>
    8bb0:	4663      	mov	r3, ip
    8bb2:	4313      	orrs	r3, r2
    8bb4:	1e5a      	subs	r2, r3, #1
    8bb6:	4193      	sbcs	r3, r2
    8bb8:	1ac6      	subs	r6, r0, r3
    8bba:	42b0      	cmp	r0, r6
    8bbc:	4180      	sbcs	r0, r0
    8bbe:	4240      	negs	r0, r0
    8bc0:	1a09      	subs	r1, r1, r0
    8bc2:	e65c      	b.n	887e <__aeabi_dsub+0x7a>
    8bc4:	000e      	movs	r6, r1
    8bc6:	4667      	mov	r7, ip
    8bc8:	4306      	orrs	r6, r0
    8bca:	4317      	orrs	r7, r2
    8bcc:	2d00      	cmp	r5, #0
    8bce:	d15e      	bne.n	8c8e <__aeabi_dsub+0x48a>
    8bd0:	2e00      	cmp	r6, #0
    8bd2:	d000      	beq.n	8bd6 <__aeabi_dsub+0x3d2>
    8bd4:	e0f3      	b.n	8dbe <__aeabi_dsub+0x5ba>
    8bd6:	2f00      	cmp	r7, #0
    8bd8:	d100      	bne.n	8bdc <__aeabi_dsub+0x3d8>
    8bda:	e11e      	b.n	8e1a <__aeabi_dsub+0x616>
    8bdc:	465c      	mov	r4, fp
    8bde:	4661      	mov	r1, ip
    8be0:	4691      	mov	r9, r2
    8be2:	e72c      	b.n	8a3e <__aeabi_dsub+0x23a>
    8be4:	4fa9      	ldr	r7, [pc, #676]	; (8e8c <__aeabi_dsub+0x688>)
    8be6:	42be      	cmp	r6, r7
    8be8:	d07b      	beq.n	8ce2 <__aeabi_dsub+0x4de>
    8bea:	001e      	movs	r6, r3
    8bec:	e6f1      	b.n	89d2 <__aeabi_dsub+0x1ce>
    8bee:	0010      	movs	r0, r2
    8bf0:	3d1f      	subs	r5, #31
    8bf2:	40e8      	lsrs	r0, r5
    8bf4:	2b20      	cmp	r3, #32
    8bf6:	d003      	beq.n	8c00 <__aeabi_dsub+0x3fc>
    8bf8:	2140      	movs	r1, #64	; 0x40
    8bfa:	1acb      	subs	r3, r1, r3
    8bfc:	409a      	lsls	r2, r3
    8bfe:	4316      	orrs	r6, r2
    8c00:	1e73      	subs	r3, r6, #1
    8c02:	419e      	sbcs	r6, r3
    8c04:	2207      	movs	r2, #7
    8c06:	4306      	orrs	r6, r0
    8c08:	4032      	ands	r2, r6
    8c0a:	2100      	movs	r1, #0
    8c0c:	2500      	movs	r5, #0
    8c0e:	e783      	b.n	8b18 <__aeabi_dsub+0x314>
    8c10:	1a16      	subs	r6, r2, r0
    8c12:	4663      	mov	r3, ip
    8c14:	42b2      	cmp	r2, r6
    8c16:	4180      	sbcs	r0, r0
    8c18:	1a59      	subs	r1, r3, r1
    8c1a:	4240      	negs	r0, r0
    8c1c:	1a0b      	subs	r3, r1, r0
    8c1e:	4698      	mov	r8, r3
    8c20:	465c      	mov	r4, fp
    8c22:	e632      	b.n	888a <__aeabi_dsub+0x86>
    8c24:	2e1f      	cmp	r6, #31
    8c26:	dd00      	ble.n	8c2a <__aeabi_dsub+0x426>
    8c28:	e0ab      	b.n	8d82 <__aeabi_dsub+0x57e>
    8c2a:	2720      	movs	r7, #32
    8c2c:	1bbb      	subs	r3, r7, r6
    8c2e:	469a      	mov	sl, r3
    8c30:	4663      	mov	r3, ip
    8c32:	4657      	mov	r7, sl
    8c34:	40bb      	lsls	r3, r7
    8c36:	4699      	mov	r9, r3
    8c38:	0013      	movs	r3, r2
    8c3a:	464f      	mov	r7, r9
    8c3c:	40f3      	lsrs	r3, r6
    8c3e:	431f      	orrs	r7, r3
    8c40:	003b      	movs	r3, r7
    8c42:	4657      	mov	r7, sl
    8c44:	40ba      	lsls	r2, r7
    8c46:	1e57      	subs	r7, r2, #1
    8c48:	41ba      	sbcs	r2, r7
    8c4a:	4313      	orrs	r3, r2
    8c4c:	4662      	mov	r2, ip
    8c4e:	40f2      	lsrs	r2, r6
    8c50:	1889      	adds	r1, r1, r2
    8c52:	e698      	b.n	8986 <__aeabi_dsub+0x182>
    8c54:	2720      	movs	r7, #32
    8c56:	1bbb      	subs	r3, r7, r6
    8c58:	469a      	mov	sl, r3
    8c5a:	4663      	mov	r3, ip
    8c5c:	4657      	mov	r7, sl
    8c5e:	40bb      	lsls	r3, r7
    8c60:	4699      	mov	r9, r3
    8c62:	0013      	movs	r3, r2
    8c64:	464f      	mov	r7, r9
    8c66:	40f3      	lsrs	r3, r6
    8c68:	431f      	orrs	r7, r3
    8c6a:	003b      	movs	r3, r7
    8c6c:	4657      	mov	r7, sl
    8c6e:	40ba      	lsls	r2, r7
    8c70:	1e57      	subs	r7, r2, #1
    8c72:	41ba      	sbcs	r2, r7
    8c74:	4313      	orrs	r3, r2
    8c76:	4662      	mov	r2, ip
    8c78:	40f2      	lsrs	r2, r6
    8c7a:	1a89      	subs	r1, r1, r2
    8c7c:	e79c      	b.n	8bb8 <__aeabi_dsub+0x3b4>
    8c7e:	4b83      	ldr	r3, [pc, #524]	; (8e8c <__aeabi_dsub+0x688>)
    8c80:	429f      	cmp	r7, r3
    8c82:	d05f      	beq.n	8d44 <__aeabi_dsub+0x540>
    8c84:	2580      	movs	r5, #128	; 0x80
    8c86:	042d      	lsls	r5, r5, #16
    8c88:	4273      	negs	r3, r6
    8c8a:	4329      	orrs	r1, r5
    8c8c:	e720      	b.n	8ad0 <__aeabi_dsub+0x2cc>
    8c8e:	2e00      	cmp	r6, #0
    8c90:	d10c      	bne.n	8cac <__aeabi_dsub+0x4a8>
    8c92:	2f00      	cmp	r7, #0
    8c94:	d100      	bne.n	8c98 <__aeabi_dsub+0x494>
    8c96:	e0d0      	b.n	8e3a <__aeabi_dsub+0x636>
    8c98:	465c      	mov	r4, fp
    8c9a:	4661      	mov	r1, ip
    8c9c:	4691      	mov	r9, r2
    8c9e:	4d7b      	ldr	r5, [pc, #492]	; (8e8c <__aeabi_dsub+0x688>)
    8ca0:	e6cd      	b.n	8a3e <__aeabi_dsub+0x23a>
    8ca2:	4f7a      	ldr	r7, [pc, #488]	; (8e8c <__aeabi_dsub+0x688>)
    8ca4:	42be      	cmp	r6, r7
    8ca6:	d01c      	beq.n	8ce2 <__aeabi_dsub+0x4de>
    8ca8:	001e      	movs	r6, r3
    8caa:	e665      	b.n	8978 <__aeabi_dsub+0x174>
    8cac:	2f00      	cmp	r7, #0
    8cae:	d018      	beq.n	8ce2 <__aeabi_dsub+0x4de>
    8cb0:	08c0      	lsrs	r0, r0, #3
    8cb2:	074e      	lsls	r6, r1, #29
    8cb4:	4306      	orrs	r6, r0
    8cb6:	2080      	movs	r0, #128	; 0x80
    8cb8:	08c9      	lsrs	r1, r1, #3
    8cba:	0300      	lsls	r0, r0, #12
    8cbc:	4201      	tst	r1, r0
    8cbe:	d008      	beq.n	8cd2 <__aeabi_dsub+0x4ce>
    8cc0:	4663      	mov	r3, ip
    8cc2:	08dc      	lsrs	r4, r3, #3
    8cc4:	4204      	tst	r4, r0
    8cc6:	d104      	bne.n	8cd2 <__aeabi_dsub+0x4ce>
    8cc8:	0021      	movs	r1, r4
    8cca:	46da      	mov	sl, fp
    8ccc:	08d2      	lsrs	r2, r2, #3
    8cce:	075e      	lsls	r6, r3, #29
    8cd0:	4316      	orrs	r6, r2
    8cd2:	00f3      	lsls	r3, r6, #3
    8cd4:	4699      	mov	r9, r3
    8cd6:	2401      	movs	r4, #1
    8cd8:	4653      	mov	r3, sl
    8cda:	00c9      	lsls	r1, r1, #3
    8cdc:	0f72      	lsrs	r2, r6, #29
    8cde:	4311      	orrs	r1, r2
    8ce0:	401c      	ands	r4, r3
    8ce2:	4d6a      	ldr	r5, [pc, #424]	; (8e8c <__aeabi_dsub+0x688>)
    8ce4:	e6ab      	b.n	8a3e <__aeabi_dsub+0x23a>
    8ce6:	001d      	movs	r5, r3
    8ce8:	2200      	movs	r2, #0
    8cea:	2700      	movs	r7, #0
    8cec:	e6b4      	b.n	8a58 <__aeabi_dsub+0x254>
    8cee:	2d00      	cmp	r5, #0
    8cf0:	d159      	bne.n	8da6 <__aeabi_dsub+0x5a2>
    8cf2:	000b      	movs	r3, r1
    8cf4:	4303      	orrs	r3, r0
    8cf6:	d100      	bne.n	8cfa <__aeabi_dsub+0x4f6>
    8cf8:	e6d6      	b.n	8aa8 <__aeabi_dsub+0x2a4>
    8cfa:	1c73      	adds	r3, r6, #1
    8cfc:	d100      	bne.n	8d00 <__aeabi_dsub+0x4fc>
    8cfe:	e0b2      	b.n	8e66 <__aeabi_dsub+0x662>
    8d00:	4b62      	ldr	r3, [pc, #392]	; (8e8c <__aeabi_dsub+0x688>)
    8d02:	429f      	cmp	r7, r3
    8d04:	d01e      	beq.n	8d44 <__aeabi_dsub+0x540>
    8d06:	43f3      	mvns	r3, r6
    8d08:	2b38      	cmp	r3, #56	; 0x38
    8d0a:	dc6f      	bgt.n	8dec <__aeabi_dsub+0x5e8>
    8d0c:	2b1f      	cmp	r3, #31
    8d0e:	dd00      	ble.n	8d12 <__aeabi_dsub+0x50e>
    8d10:	e097      	b.n	8e42 <__aeabi_dsub+0x63e>
    8d12:	2520      	movs	r5, #32
    8d14:	000e      	movs	r6, r1
    8d16:	1aed      	subs	r5, r5, r3
    8d18:	40ae      	lsls	r6, r5
    8d1a:	46b0      	mov	r8, r6
    8d1c:	0006      	movs	r6, r0
    8d1e:	46aa      	mov	sl, r5
    8d20:	40de      	lsrs	r6, r3
    8d22:	4645      	mov	r5, r8
    8d24:	4335      	orrs	r5, r6
    8d26:	002e      	movs	r6, r5
    8d28:	4655      	mov	r5, sl
    8d2a:	40a8      	lsls	r0, r5
    8d2c:	40d9      	lsrs	r1, r3
    8d2e:	1e45      	subs	r5, r0, #1
    8d30:	41a8      	sbcs	r0, r5
    8d32:	448c      	add	ip, r1
    8d34:	4306      	orrs	r6, r0
    8d36:	18b6      	adds	r6, r6, r2
    8d38:	4296      	cmp	r6, r2
    8d3a:	4192      	sbcs	r2, r2
    8d3c:	4251      	negs	r1, r2
    8d3e:	4461      	add	r1, ip
    8d40:	003d      	movs	r5, r7
    8d42:	e625      	b.n	8990 <__aeabi_dsub+0x18c>
    8d44:	003d      	movs	r5, r7
    8d46:	4661      	mov	r1, ip
    8d48:	4691      	mov	r9, r2
    8d4a:	e678      	b.n	8a3e <__aeabi_dsub+0x23a>
    8d4c:	000b      	movs	r3, r1
    8d4e:	4303      	orrs	r3, r0
    8d50:	2d00      	cmp	r5, #0
    8d52:	d000      	beq.n	8d56 <__aeabi_dsub+0x552>
    8d54:	e655      	b.n	8a02 <__aeabi_dsub+0x1fe>
    8d56:	2b00      	cmp	r3, #0
    8d58:	d0f5      	beq.n	8d46 <__aeabi_dsub+0x542>
    8d5a:	4663      	mov	r3, ip
    8d5c:	4313      	orrs	r3, r2
    8d5e:	d100      	bne.n	8d62 <__aeabi_dsub+0x55e>
    8d60:	e66d      	b.n	8a3e <__aeabi_dsub+0x23a>
    8d62:	1886      	adds	r6, r0, r2
    8d64:	4286      	cmp	r6, r0
    8d66:	4180      	sbcs	r0, r0
    8d68:	4461      	add	r1, ip
    8d6a:	4240      	negs	r0, r0
    8d6c:	1809      	adds	r1, r1, r0
    8d6e:	2200      	movs	r2, #0
    8d70:	020b      	lsls	r3, r1, #8
    8d72:	d400      	bmi.n	8d76 <__aeabi_dsub+0x572>
    8d74:	e6d0      	b.n	8b18 <__aeabi_dsub+0x314>
    8d76:	4b46      	ldr	r3, [pc, #280]	; (8e90 <__aeabi_dsub+0x68c>)
    8d78:	3501      	adds	r5, #1
    8d7a:	4019      	ands	r1, r3
    8d7c:	e5b2      	b.n	88e4 <__aeabi_dsub+0xe0>
    8d7e:	46b1      	mov	r9, r6
    8d80:	e65d      	b.n	8a3e <__aeabi_dsub+0x23a>
    8d82:	0033      	movs	r3, r6
    8d84:	4667      	mov	r7, ip
    8d86:	3b20      	subs	r3, #32
    8d88:	40df      	lsrs	r7, r3
    8d8a:	003b      	movs	r3, r7
    8d8c:	2e20      	cmp	r6, #32
    8d8e:	d005      	beq.n	8d9c <__aeabi_dsub+0x598>
    8d90:	2740      	movs	r7, #64	; 0x40
    8d92:	1bbf      	subs	r7, r7, r6
    8d94:	4666      	mov	r6, ip
    8d96:	40be      	lsls	r6, r7
    8d98:	4332      	orrs	r2, r6
    8d9a:	4690      	mov	r8, r2
    8d9c:	4646      	mov	r6, r8
    8d9e:	1e72      	subs	r2, r6, #1
    8da0:	4196      	sbcs	r6, r2
    8da2:	4333      	orrs	r3, r6
    8da4:	e5ef      	b.n	8986 <__aeabi_dsub+0x182>
    8da6:	4b39      	ldr	r3, [pc, #228]	; (8e8c <__aeabi_dsub+0x688>)
    8da8:	429f      	cmp	r7, r3
    8daa:	d0cb      	beq.n	8d44 <__aeabi_dsub+0x540>
    8dac:	2580      	movs	r5, #128	; 0x80
    8dae:	042d      	lsls	r5, r5, #16
    8db0:	4273      	negs	r3, r6
    8db2:	4329      	orrs	r1, r5
    8db4:	e7a8      	b.n	8d08 <__aeabi_dsub+0x504>
    8db6:	4308      	orrs	r0, r1
    8db8:	1e41      	subs	r1, r0, #1
    8dba:	4188      	sbcs	r0, r1
    8dbc:	e6a2      	b.n	8b04 <__aeabi_dsub+0x300>
    8dbe:	2f00      	cmp	r7, #0
    8dc0:	d100      	bne.n	8dc4 <__aeabi_dsub+0x5c0>
    8dc2:	e63c      	b.n	8a3e <__aeabi_dsub+0x23a>
    8dc4:	4663      	mov	r3, ip
    8dc6:	1a86      	subs	r6, r0, r2
    8dc8:	1acf      	subs	r7, r1, r3
    8dca:	42b0      	cmp	r0, r6
    8dcc:	419b      	sbcs	r3, r3
    8dce:	425b      	negs	r3, r3
    8dd0:	1afb      	subs	r3, r7, r3
    8dd2:	4698      	mov	r8, r3
    8dd4:	021b      	lsls	r3, r3, #8
    8dd6:	d54e      	bpl.n	8e76 <__aeabi_dsub+0x672>
    8dd8:	1a16      	subs	r6, r2, r0
    8dda:	4663      	mov	r3, ip
    8ddc:	42b2      	cmp	r2, r6
    8dde:	4192      	sbcs	r2, r2
    8de0:	1a59      	subs	r1, r3, r1
    8de2:	4252      	negs	r2, r2
    8de4:	1a89      	subs	r1, r1, r2
    8de6:	465c      	mov	r4, fp
    8de8:	2200      	movs	r2, #0
    8dea:	e57b      	b.n	88e4 <__aeabi_dsub+0xe0>
    8dec:	4301      	orrs	r1, r0
    8dee:	000e      	movs	r6, r1
    8df0:	1e71      	subs	r1, r6, #1
    8df2:	418e      	sbcs	r6, r1
    8df4:	e79f      	b.n	8d36 <__aeabi_dsub+0x532>
    8df6:	001d      	movs	r5, r3
    8df8:	000e      	movs	r6, r1
    8dfa:	3d20      	subs	r5, #32
    8dfc:	40ee      	lsrs	r6, r5
    8dfe:	46b0      	mov	r8, r6
    8e00:	2b20      	cmp	r3, #32
    8e02:	d004      	beq.n	8e0e <__aeabi_dsub+0x60a>
    8e04:	2540      	movs	r5, #64	; 0x40
    8e06:	1aeb      	subs	r3, r5, r3
    8e08:	4099      	lsls	r1, r3
    8e0a:	4308      	orrs	r0, r1
    8e0c:	4681      	mov	r9, r0
    8e0e:	4648      	mov	r0, r9
    8e10:	4643      	mov	r3, r8
    8e12:	1e41      	subs	r1, r0, #1
    8e14:	4188      	sbcs	r0, r1
    8e16:	4318      	orrs	r0, r3
    8e18:	e674      	b.n	8b04 <__aeabi_dsub+0x300>
    8e1a:	2200      	movs	r2, #0
    8e1c:	2400      	movs	r4, #0
    8e1e:	e617      	b.n	8a50 <__aeabi_dsub+0x24c>
    8e20:	1a16      	subs	r6, r2, r0
    8e22:	4663      	mov	r3, ip
    8e24:	42b2      	cmp	r2, r6
    8e26:	4192      	sbcs	r2, r2
    8e28:	1a59      	subs	r1, r3, r1
    8e2a:	4252      	negs	r2, r2
    8e2c:	1a89      	subs	r1, r1, r2
    8e2e:	003d      	movs	r5, r7
    8e30:	e525      	b.n	887e <__aeabi_dsub+0x7a>
    8e32:	4661      	mov	r1, ip
    8e34:	4691      	mov	r9, r2
    8e36:	4d15      	ldr	r5, [pc, #84]	; (8e8c <__aeabi_dsub+0x688>)
    8e38:	e601      	b.n	8a3e <__aeabi_dsub+0x23a>
    8e3a:	2280      	movs	r2, #128	; 0x80
    8e3c:	2400      	movs	r4, #0
    8e3e:	0312      	lsls	r2, r2, #12
    8e40:	e679      	b.n	8b36 <__aeabi_dsub+0x332>
    8e42:	001d      	movs	r5, r3
    8e44:	000e      	movs	r6, r1
    8e46:	3d20      	subs	r5, #32
    8e48:	40ee      	lsrs	r6, r5
    8e4a:	46b0      	mov	r8, r6
    8e4c:	2b20      	cmp	r3, #32
    8e4e:	d004      	beq.n	8e5a <__aeabi_dsub+0x656>
    8e50:	2540      	movs	r5, #64	; 0x40
    8e52:	1aeb      	subs	r3, r5, r3
    8e54:	4099      	lsls	r1, r3
    8e56:	4308      	orrs	r0, r1
    8e58:	4681      	mov	r9, r0
    8e5a:	464e      	mov	r6, r9
    8e5c:	4643      	mov	r3, r8
    8e5e:	1e71      	subs	r1, r6, #1
    8e60:	418e      	sbcs	r6, r1
    8e62:	431e      	orrs	r6, r3
    8e64:	e767      	b.n	8d36 <__aeabi_dsub+0x532>
    8e66:	1886      	adds	r6, r0, r2
    8e68:	4296      	cmp	r6, r2
    8e6a:	419b      	sbcs	r3, r3
    8e6c:	4461      	add	r1, ip
    8e6e:	425b      	negs	r3, r3
    8e70:	18c9      	adds	r1, r1, r3
    8e72:	003d      	movs	r5, r7
    8e74:	e58c      	b.n	8990 <__aeabi_dsub+0x18c>
    8e76:	4647      	mov	r7, r8
    8e78:	4337      	orrs	r7, r6
    8e7a:	d0ce      	beq.n	8e1a <__aeabi_dsub+0x616>
    8e7c:	2207      	movs	r2, #7
    8e7e:	4641      	mov	r1, r8
    8e80:	4032      	ands	r2, r6
    8e82:	e649      	b.n	8b18 <__aeabi_dsub+0x314>
    8e84:	2700      	movs	r7, #0
    8e86:	003a      	movs	r2, r7
    8e88:	e5e6      	b.n	8a58 <__aeabi_dsub+0x254>
    8e8a:	46c0      	nop			; (mov r8, r8)
    8e8c:	000007ff 	.word	0x000007ff
    8e90:	ff7fffff 	.word	0xff7fffff

00008e94 <__aeabi_d2iz>:
__aeabi_d2iz():
    8e94:	b530      	push	{r4, r5, lr}
    8e96:	4d14      	ldr	r5, [pc, #80]	; (8ee8 <__aeabi_d2iz+0x54>)
    8e98:	030a      	lsls	r2, r1, #12
    8e9a:	004b      	lsls	r3, r1, #1
    8e9c:	0b12      	lsrs	r2, r2, #12
    8e9e:	0d5b      	lsrs	r3, r3, #21
    8ea0:	0fc9      	lsrs	r1, r1, #31
    8ea2:	2400      	movs	r4, #0
    8ea4:	42ab      	cmp	r3, r5
    8ea6:	dd11      	ble.n	8ecc <__aeabi_d2iz+0x38>
    8ea8:	4c10      	ldr	r4, [pc, #64]	; (8eec <__aeabi_d2iz+0x58>)
    8eaa:	42a3      	cmp	r3, r4
    8eac:	dc10      	bgt.n	8ed0 <__aeabi_d2iz+0x3c>
    8eae:	2480      	movs	r4, #128	; 0x80
    8eb0:	0364      	lsls	r4, r4, #13
    8eb2:	4322      	orrs	r2, r4
    8eb4:	4c0e      	ldr	r4, [pc, #56]	; (8ef0 <__aeabi_d2iz+0x5c>)
    8eb6:	1ae4      	subs	r4, r4, r3
    8eb8:	2c1f      	cmp	r4, #31
    8eba:	dd0c      	ble.n	8ed6 <__aeabi_d2iz+0x42>
    8ebc:	480d      	ldr	r0, [pc, #52]	; (8ef4 <__aeabi_d2iz+0x60>)
    8ebe:	1ac3      	subs	r3, r0, r3
    8ec0:	40da      	lsrs	r2, r3
    8ec2:	0013      	movs	r3, r2
    8ec4:	425c      	negs	r4, r3
    8ec6:	2900      	cmp	r1, #0
    8ec8:	d100      	bne.n	8ecc <__aeabi_d2iz+0x38>
    8eca:	001c      	movs	r4, r3
    8ecc:	0020      	movs	r0, r4
    8ece:	bd30      	pop	{r4, r5, pc}
    8ed0:	4b09      	ldr	r3, [pc, #36]	; (8ef8 <__aeabi_d2iz+0x64>)
    8ed2:	18cc      	adds	r4, r1, r3
    8ed4:	e7fa      	b.n	8ecc <__aeabi_d2iz+0x38>
    8ed6:	4d09      	ldr	r5, [pc, #36]	; (8efc <__aeabi_d2iz+0x68>)
    8ed8:	40e0      	lsrs	r0, r4
    8eda:	46ac      	mov	ip, r5
    8edc:	4463      	add	r3, ip
    8ede:	409a      	lsls	r2, r3
    8ee0:	0013      	movs	r3, r2
    8ee2:	4303      	orrs	r3, r0
    8ee4:	e7ee      	b.n	8ec4 <__aeabi_d2iz+0x30>
    8ee6:	46c0      	nop			; (mov r8, r8)
    8ee8:	000003fe 	.word	0x000003fe
    8eec:	0000041d 	.word	0x0000041d
    8ef0:	00000433 	.word	0x00000433
    8ef4:	00000413 	.word	0x00000413
    8ef8:	7fffffff 	.word	0x7fffffff
    8efc:	fffffbed 	.word	0xfffffbed

00008f00 <__aeabi_i2d>:
__aeabi_i2d():
    8f00:	b570      	push	{r4, r5, r6, lr}
    8f02:	2800      	cmp	r0, #0
    8f04:	d02d      	beq.n	8f62 <__aeabi_i2d+0x62>
    8f06:	17c3      	asrs	r3, r0, #31
    8f08:	18c5      	adds	r5, r0, r3
    8f0a:	405d      	eors	r5, r3
    8f0c:	0fc4      	lsrs	r4, r0, #31
    8f0e:	0028      	movs	r0, r5
    8f10:	f000 f938 	bl	9184 <__clzsi2>
    8f14:	4b15      	ldr	r3, [pc, #84]	; (8f6c <__aeabi_i2d+0x6c>)
    8f16:	1a1b      	subs	r3, r3, r0
    8f18:	055b      	lsls	r3, r3, #21
    8f1a:	0d5b      	lsrs	r3, r3, #21
    8f1c:	280a      	cmp	r0, #10
    8f1e:	dd15      	ble.n	8f4c <__aeabi_i2d+0x4c>
    8f20:	380b      	subs	r0, #11
    8f22:	4085      	lsls	r5, r0
    8f24:	2200      	movs	r2, #0
    8f26:	032d      	lsls	r5, r5, #12
    8f28:	0b2d      	lsrs	r5, r5, #12
    8f2a:	2100      	movs	r1, #0
    8f2c:	0010      	movs	r0, r2
    8f2e:	032d      	lsls	r5, r5, #12
    8f30:	0d0a      	lsrs	r2, r1, #20
    8f32:	0b2d      	lsrs	r5, r5, #12
    8f34:	0512      	lsls	r2, r2, #20
    8f36:	432a      	orrs	r2, r5
    8f38:	4d0d      	ldr	r5, [pc, #52]	; (8f70 <__aeabi_i2d+0x70>)
    8f3a:	051b      	lsls	r3, r3, #20
    8f3c:	402a      	ands	r2, r5
    8f3e:	4313      	orrs	r3, r2
    8f40:	005b      	lsls	r3, r3, #1
    8f42:	07e4      	lsls	r4, r4, #31
    8f44:	085b      	lsrs	r3, r3, #1
    8f46:	4323      	orrs	r3, r4
    8f48:	0019      	movs	r1, r3
    8f4a:	bd70      	pop	{r4, r5, r6, pc}
    8f4c:	0002      	movs	r2, r0
    8f4e:	0029      	movs	r1, r5
    8f50:	3215      	adds	r2, #21
    8f52:	4091      	lsls	r1, r2
    8f54:	000a      	movs	r2, r1
    8f56:	210b      	movs	r1, #11
    8f58:	1a08      	subs	r0, r1, r0
    8f5a:	40c5      	lsrs	r5, r0
    8f5c:	032d      	lsls	r5, r5, #12
    8f5e:	0b2d      	lsrs	r5, r5, #12
    8f60:	e7e3      	b.n	8f2a <__aeabi_i2d+0x2a>
    8f62:	2400      	movs	r4, #0
    8f64:	2300      	movs	r3, #0
    8f66:	2500      	movs	r5, #0
    8f68:	2200      	movs	r2, #0
    8f6a:	e7de      	b.n	8f2a <__aeabi_i2d+0x2a>
    8f6c:	0000041e 	.word	0x0000041e
    8f70:	800fffff 	.word	0x800fffff

00008f74 <__aeabi_ui2d>:
__aeabi_ui2d():
    8f74:	b510      	push	{r4, lr}
    8f76:	1e04      	subs	r4, r0, #0
    8f78:	d025      	beq.n	8fc6 <__aeabi_ui2d+0x52>
    8f7a:	f000 f903 	bl	9184 <__clzsi2>
    8f7e:	4b14      	ldr	r3, [pc, #80]	; (8fd0 <__aeabi_ui2d+0x5c>)
    8f80:	1a1b      	subs	r3, r3, r0
    8f82:	055b      	lsls	r3, r3, #21
    8f84:	0d5b      	lsrs	r3, r3, #21
    8f86:	280a      	cmp	r0, #10
    8f88:	dd12      	ble.n	8fb0 <__aeabi_ui2d+0x3c>
    8f8a:	380b      	subs	r0, #11
    8f8c:	4084      	lsls	r4, r0
    8f8e:	2200      	movs	r2, #0
    8f90:	0324      	lsls	r4, r4, #12
    8f92:	0b24      	lsrs	r4, r4, #12
    8f94:	2100      	movs	r1, #0
    8f96:	0010      	movs	r0, r2
    8f98:	0324      	lsls	r4, r4, #12
    8f9a:	0d0a      	lsrs	r2, r1, #20
    8f9c:	0b24      	lsrs	r4, r4, #12
    8f9e:	0512      	lsls	r2, r2, #20
    8fa0:	4322      	orrs	r2, r4
    8fa2:	4c0c      	ldr	r4, [pc, #48]	; (8fd4 <__aeabi_ui2d+0x60>)
    8fa4:	051b      	lsls	r3, r3, #20
    8fa6:	4022      	ands	r2, r4
    8fa8:	4313      	orrs	r3, r2
    8faa:	005b      	lsls	r3, r3, #1
    8fac:	0859      	lsrs	r1, r3, #1
    8fae:	bd10      	pop	{r4, pc}
    8fb0:	0002      	movs	r2, r0
    8fb2:	0021      	movs	r1, r4
    8fb4:	3215      	adds	r2, #21
    8fb6:	4091      	lsls	r1, r2
    8fb8:	000a      	movs	r2, r1
    8fba:	210b      	movs	r1, #11
    8fbc:	1a08      	subs	r0, r1, r0
    8fbe:	40c4      	lsrs	r4, r0
    8fc0:	0324      	lsls	r4, r4, #12
    8fc2:	0b24      	lsrs	r4, r4, #12
    8fc4:	e7e6      	b.n	8f94 <__aeabi_ui2d+0x20>
    8fc6:	2300      	movs	r3, #0
    8fc8:	2400      	movs	r4, #0
    8fca:	2200      	movs	r2, #0
    8fcc:	e7e2      	b.n	8f94 <__aeabi_ui2d+0x20>
    8fce:	46c0      	nop			; (mov r8, r8)
    8fd0:	0000041e 	.word	0x0000041e
    8fd4:	800fffff 	.word	0x800fffff

00008fd8 <__aeabi_f2d>:
__aeabi_f2d():
    8fd8:	0041      	lsls	r1, r0, #1
    8fda:	0e09      	lsrs	r1, r1, #24
    8fdc:	1c4b      	adds	r3, r1, #1
    8fde:	b570      	push	{r4, r5, r6, lr}
    8fe0:	b2db      	uxtb	r3, r3
    8fe2:	0246      	lsls	r6, r0, #9
    8fe4:	0a75      	lsrs	r5, r6, #9
    8fe6:	0fc4      	lsrs	r4, r0, #31
    8fe8:	2b01      	cmp	r3, #1
    8fea:	dd14      	ble.n	9016 <__aeabi_f2d+0x3e>
    8fec:	23e0      	movs	r3, #224	; 0xe0
    8fee:	009b      	lsls	r3, r3, #2
    8ff0:	076d      	lsls	r5, r5, #29
    8ff2:	0b36      	lsrs	r6, r6, #12
    8ff4:	18cb      	adds	r3, r1, r3
    8ff6:	2100      	movs	r1, #0
    8ff8:	0d0a      	lsrs	r2, r1, #20
    8ffa:	0028      	movs	r0, r5
    8ffc:	0512      	lsls	r2, r2, #20
    8ffe:	4d1c      	ldr	r5, [pc, #112]	; (9070 <__aeabi_f2d+0x98>)
    9000:	4332      	orrs	r2, r6
    9002:	055b      	lsls	r3, r3, #21
    9004:	402a      	ands	r2, r5
    9006:	085b      	lsrs	r3, r3, #1
    9008:	4313      	orrs	r3, r2
    900a:	005b      	lsls	r3, r3, #1
    900c:	07e4      	lsls	r4, r4, #31
    900e:	085b      	lsrs	r3, r3, #1
    9010:	4323      	orrs	r3, r4
    9012:	0019      	movs	r1, r3
    9014:	bd70      	pop	{r4, r5, r6, pc}
    9016:	2900      	cmp	r1, #0
    9018:	d114      	bne.n	9044 <__aeabi_f2d+0x6c>
    901a:	2d00      	cmp	r5, #0
    901c:	d01e      	beq.n	905c <__aeabi_f2d+0x84>
    901e:	0028      	movs	r0, r5
    9020:	f000 f8b0 	bl	9184 <__clzsi2>
    9024:	280a      	cmp	r0, #10
    9026:	dc1c      	bgt.n	9062 <__aeabi_f2d+0x8a>
    9028:	230b      	movs	r3, #11
    902a:	002a      	movs	r2, r5
    902c:	1a1b      	subs	r3, r3, r0
    902e:	40da      	lsrs	r2, r3
    9030:	0003      	movs	r3, r0
    9032:	3315      	adds	r3, #21
    9034:	409d      	lsls	r5, r3
    9036:	4b0f      	ldr	r3, [pc, #60]	; (9074 <__aeabi_f2d+0x9c>)
    9038:	0312      	lsls	r2, r2, #12
    903a:	1a1b      	subs	r3, r3, r0
    903c:	055b      	lsls	r3, r3, #21
    903e:	0b16      	lsrs	r6, r2, #12
    9040:	0d5b      	lsrs	r3, r3, #21
    9042:	e7d8      	b.n	8ff6 <__aeabi_f2d+0x1e>
    9044:	2d00      	cmp	r5, #0
    9046:	d006      	beq.n	9056 <__aeabi_f2d+0x7e>
    9048:	0b32      	lsrs	r2, r6, #12
    904a:	2680      	movs	r6, #128	; 0x80
    904c:	0336      	lsls	r6, r6, #12
    904e:	076d      	lsls	r5, r5, #29
    9050:	4316      	orrs	r6, r2
    9052:	4b09      	ldr	r3, [pc, #36]	; (9078 <__aeabi_f2d+0xa0>)
    9054:	e7cf      	b.n	8ff6 <__aeabi_f2d+0x1e>
    9056:	4b08      	ldr	r3, [pc, #32]	; (9078 <__aeabi_f2d+0xa0>)
    9058:	2600      	movs	r6, #0
    905a:	e7cc      	b.n	8ff6 <__aeabi_f2d+0x1e>
    905c:	2300      	movs	r3, #0
    905e:	2600      	movs	r6, #0
    9060:	e7c9      	b.n	8ff6 <__aeabi_f2d+0x1e>
    9062:	0003      	movs	r3, r0
    9064:	002a      	movs	r2, r5
    9066:	3b0b      	subs	r3, #11
    9068:	409a      	lsls	r2, r3
    906a:	2500      	movs	r5, #0
    906c:	e7e3      	b.n	9036 <__aeabi_f2d+0x5e>
    906e:	46c0      	nop			; (mov r8, r8)
    9070:	800fffff 	.word	0x800fffff
    9074:	00000389 	.word	0x00000389
    9078:	000007ff 	.word	0x000007ff

0000907c <__aeabi_d2f>:
__aeabi_d2f():
    907c:	b5f0      	push	{r4, r5, r6, r7, lr}
    907e:	004c      	lsls	r4, r1, #1
    9080:	0d64      	lsrs	r4, r4, #21
    9082:	030b      	lsls	r3, r1, #12
    9084:	1c62      	adds	r2, r4, #1
    9086:	0a5b      	lsrs	r3, r3, #9
    9088:	0f46      	lsrs	r6, r0, #29
    908a:	0552      	lsls	r2, r2, #21
    908c:	0fc9      	lsrs	r1, r1, #31
    908e:	431e      	orrs	r6, r3
    9090:	00c5      	lsls	r5, r0, #3
    9092:	0d52      	lsrs	r2, r2, #21
    9094:	2a01      	cmp	r2, #1
    9096:	dd29      	ble.n	90ec <__aeabi_d2f+0x70>
    9098:	4b37      	ldr	r3, [pc, #220]	; (9178 <__aeabi_d2f+0xfc>)
    909a:	18e7      	adds	r7, r4, r3
    909c:	2ffe      	cmp	r7, #254	; 0xfe
    909e:	dc1c      	bgt.n	90da <__aeabi_d2f+0x5e>
    90a0:	2f00      	cmp	r7, #0
    90a2:	dd3b      	ble.n	911c <__aeabi_d2f+0xa0>
    90a4:	0180      	lsls	r0, r0, #6
    90a6:	1e43      	subs	r3, r0, #1
    90a8:	4198      	sbcs	r0, r3
    90aa:	2207      	movs	r2, #7
    90ac:	00f3      	lsls	r3, r6, #3
    90ae:	0f6d      	lsrs	r5, r5, #29
    90b0:	4303      	orrs	r3, r0
    90b2:	432b      	orrs	r3, r5
    90b4:	401a      	ands	r2, r3
    90b6:	2a00      	cmp	r2, #0
    90b8:	d004      	beq.n	90c4 <__aeabi_d2f+0x48>
    90ba:	220f      	movs	r2, #15
    90bc:	401a      	ands	r2, r3
    90be:	2a04      	cmp	r2, #4
    90c0:	d000      	beq.n	90c4 <__aeabi_d2f+0x48>
    90c2:	3304      	adds	r3, #4
    90c4:	2280      	movs	r2, #128	; 0x80
    90c6:	04d2      	lsls	r2, r2, #19
    90c8:	401a      	ands	r2, r3
    90ca:	d024      	beq.n	9116 <__aeabi_d2f+0x9a>
    90cc:	3701      	adds	r7, #1
    90ce:	b2fa      	uxtb	r2, r7
    90d0:	2fff      	cmp	r7, #255	; 0xff
    90d2:	d002      	beq.n	90da <__aeabi_d2f+0x5e>
    90d4:	019b      	lsls	r3, r3, #6
    90d6:	0a58      	lsrs	r0, r3, #9
    90d8:	e001      	b.n	90de <__aeabi_d2f+0x62>
    90da:	22ff      	movs	r2, #255	; 0xff
    90dc:	2000      	movs	r0, #0
    90de:	0240      	lsls	r0, r0, #9
    90e0:	05d2      	lsls	r2, r2, #23
    90e2:	0a40      	lsrs	r0, r0, #9
    90e4:	07c9      	lsls	r1, r1, #31
    90e6:	4310      	orrs	r0, r2
    90e8:	4308      	orrs	r0, r1
    90ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    90ec:	4335      	orrs	r5, r6
    90ee:	2c00      	cmp	r4, #0
    90f0:	d104      	bne.n	90fc <__aeabi_d2f+0x80>
    90f2:	2d00      	cmp	r5, #0
    90f4:	d10a      	bne.n	910c <__aeabi_d2f+0x90>
    90f6:	2200      	movs	r2, #0
    90f8:	2000      	movs	r0, #0
    90fa:	e7f0      	b.n	90de <__aeabi_d2f+0x62>
    90fc:	2d00      	cmp	r5, #0
    90fe:	d0ec      	beq.n	90da <__aeabi_d2f+0x5e>
    9100:	2080      	movs	r0, #128	; 0x80
    9102:	03c0      	lsls	r0, r0, #15
    9104:	4330      	orrs	r0, r6
    9106:	22ff      	movs	r2, #255	; 0xff
    9108:	e7e9      	b.n	90de <__aeabi_d2f+0x62>
    910a:	2400      	movs	r4, #0
    910c:	2300      	movs	r3, #0
    910e:	025b      	lsls	r3, r3, #9
    9110:	0a58      	lsrs	r0, r3, #9
    9112:	b2e2      	uxtb	r2, r4
    9114:	e7e3      	b.n	90de <__aeabi_d2f+0x62>
    9116:	08db      	lsrs	r3, r3, #3
    9118:	003c      	movs	r4, r7
    911a:	e7f8      	b.n	910e <__aeabi_d2f+0x92>
    911c:	003b      	movs	r3, r7
    911e:	3317      	adds	r3, #23
    9120:	dbf3      	blt.n	910a <__aeabi_d2f+0x8e>
    9122:	2380      	movs	r3, #128	; 0x80
    9124:	041b      	lsls	r3, r3, #16
    9126:	4333      	orrs	r3, r6
    9128:	261e      	movs	r6, #30
    912a:	1bf6      	subs	r6, r6, r7
    912c:	2e1f      	cmp	r6, #31
    912e:	dd14      	ble.n	915a <__aeabi_d2f+0xde>
    9130:	2202      	movs	r2, #2
    9132:	4252      	negs	r2, r2
    9134:	1bd7      	subs	r7, r2, r7
    9136:	001a      	movs	r2, r3
    9138:	40fa      	lsrs	r2, r7
    913a:	0017      	movs	r7, r2
    913c:	2e20      	cmp	r6, #32
    913e:	d004      	beq.n	914a <__aeabi_d2f+0xce>
    9140:	4a0e      	ldr	r2, [pc, #56]	; (917c <__aeabi_d2f+0x100>)
    9142:	4694      	mov	ip, r2
    9144:	4464      	add	r4, ip
    9146:	40a3      	lsls	r3, r4
    9148:	431d      	orrs	r5, r3
    914a:	002b      	movs	r3, r5
    914c:	1e5d      	subs	r5, r3, #1
    914e:	41ab      	sbcs	r3, r5
    9150:	2207      	movs	r2, #7
    9152:	433b      	orrs	r3, r7
    9154:	401a      	ands	r2, r3
    9156:	2700      	movs	r7, #0
    9158:	e7ad      	b.n	90b6 <__aeabi_d2f+0x3a>
    915a:	4a09      	ldr	r2, [pc, #36]	; (9180 <__aeabi_d2f+0x104>)
    915c:	0028      	movs	r0, r5
    915e:	18a2      	adds	r2, r4, r2
    9160:	4095      	lsls	r5, r2
    9162:	4093      	lsls	r3, r2
    9164:	1e6c      	subs	r4, r5, #1
    9166:	41a5      	sbcs	r5, r4
    9168:	40f0      	lsrs	r0, r6
    916a:	2207      	movs	r2, #7
    916c:	432b      	orrs	r3, r5
    916e:	4303      	orrs	r3, r0
    9170:	401a      	ands	r2, r3
    9172:	2700      	movs	r7, #0
    9174:	e79f      	b.n	90b6 <__aeabi_d2f+0x3a>
    9176:	46c0      	nop			; (mov r8, r8)
    9178:	fffffc80 	.word	0xfffffc80
    917c:	fffffca2 	.word	0xfffffca2
    9180:	fffffc82 	.word	0xfffffc82

00009184 <__clzsi2>:
__clzsi2():
    9184:	211c      	movs	r1, #28
    9186:	2301      	movs	r3, #1
    9188:	041b      	lsls	r3, r3, #16
    918a:	4298      	cmp	r0, r3
    918c:	d301      	bcc.n	9192 <__clzsi2+0xe>
    918e:	0c00      	lsrs	r0, r0, #16
    9190:	3910      	subs	r1, #16
    9192:	0a1b      	lsrs	r3, r3, #8
    9194:	4298      	cmp	r0, r3
    9196:	d301      	bcc.n	919c <__clzsi2+0x18>
    9198:	0a00      	lsrs	r0, r0, #8
    919a:	3908      	subs	r1, #8
    919c:	091b      	lsrs	r3, r3, #4
    919e:	4298      	cmp	r0, r3
    91a0:	d301      	bcc.n	91a6 <__clzsi2+0x22>
    91a2:	0900      	lsrs	r0, r0, #4
    91a4:	3904      	subs	r1, #4
    91a6:	a202      	add	r2, pc, #8	; (adr r2, 91b0 <__clzsi2+0x2c>)
    91a8:	5c10      	ldrb	r0, [r2, r0]
    91aa:	1840      	adds	r0, r0, r1
    91ac:	4770      	bx	lr
    91ae:	46c0      	nop			; (mov r8, r8)
    91b0:	02020304 	.word	0x02020304
    91b4:	01010101 	.word	0x01010101
	...

000091c0 <__clzdi2>:
__clzdi2():
    91c0:	b510      	push	{r4, lr}
    91c2:	2900      	cmp	r1, #0
    91c4:	d103      	bne.n	91ce <__clzdi2+0xe>
    91c6:	f7ff ffdd 	bl	9184 <__clzsi2>
    91ca:	3020      	adds	r0, #32
    91cc:	e002      	b.n	91d4 <__clzdi2+0x14>
    91ce:	1c08      	adds	r0, r1, #0
    91d0:	f7ff ffd8 	bl	9184 <__clzsi2>
    91d4:	bd10      	pop	{r4, pc}
    91d6:	46c0      	nop			; (mov r8, r8)

000091d8 <strlen>:
strlen():
    91d8:	2300      	movs	r3, #0
    91da:	5cc2      	ldrb	r2, [r0, r3]
    91dc:	3301      	adds	r3, #1
    91de:	2a00      	cmp	r2, #0
    91e0:	d1fb      	bne.n	91da <strlen+0x2>
    91e2:	1e58      	subs	r0, r3, #1
    91e4:	4770      	bx	lr
	...

000091e8 <adc_read_inner>:
adc_read_inner():
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:113
//============================================================================
uint16_t adc_read_inner(uint8_t channel)
{
    uint16_t ADCResult = 0;
    //设置SC1A寄存器通道号
    ADC0_SC1A = ADC_SC1_ADCH(channel);        
    91e8:	231f      	movs	r3, #31
    91ea:	4018      	ands	r0, r3
    91ec:	4b06      	ldr	r3, [pc, #24]	; (9208 <adc_read_inner+0x20>)
    91ee:	6018      	str	r0, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:115 (discriminator 1)
    //等待转换完成
    while(!(ADC0_SC1A & ADC_SC1_COCO_MASK));
    91f0:	4b05      	ldr	r3, [pc, #20]	; (9208 <adc_read_inner+0x20>)
    91f2:	681b      	ldr	r3, [r3, #0]
    91f4:	061b      	lsls	r3, r3, #24
    91f6:	d5fb      	bpl.n	91f0 <adc_read_inner+0x8>
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:117
    //读取转换结果
    ADCResult = (uint16_t)ADC0_RA;
    91f8:	4b03      	ldr	r3, [pc, #12]	; (9208 <adc_read_inner+0x20>)
    91fa:	6918      	ldr	r0, [r3, #16]
    91fc:	b280      	uxth	r0, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:119
    //清ADC转换完成标志
    ADC0_SC1A &= ~ADC_SC1_COCO_MASK;
    91fe:	681a      	ldr	r2, [r3, #0]
    9200:	2180      	movs	r1, #128	; 0x80
    9202:	438a      	bics	r2, r1
    9204:	601a      	str	r2, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:122
    //返回读取结果
    return ADCResult;
}
    9206:	4770      	bx	lr
    9208:	4003b000 	.word	0x4003b000

0000920c <adc_read>:
adc_read():
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:36
{
    920c:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:38
	channel = (uint8_t)A_SENSOR_No;
    920e:	b2c0      	uxtb	r0, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:39
	return adc_read_inner(channel);
    9210:	f7ff ffea 	bl	91e8 <adc_read_inner>
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:40
}
    9214:	bd10      	pop	{r4, pc}
	...

00009218 <adc_cal>:
adc_cal():
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:135
//============================================================================
void adc_cal(void)
{
    uint8_t cal_var;

    ADC0_SC2 &=  ~ADC_SC2_ADTRG_MASK ; // 使能软件触发
    9218:	4b22      	ldr	r3, [pc, #136]	; (92a4 <adc_cal+0x8c>)
    921a:	6a1a      	ldr	r2, [r3, #32]
    921c:	2140      	movs	r1, #64	; 0x40
    921e:	438a      	bics	r2, r1
    9220:	621a      	str	r2, [r3, #32]
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:136
    ADC0_SC3 &= ( ~ADC_SC3_ADCO_MASK & ~ADC_SC3_AVGS_MASK ); //单次转换
    9222:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9224:	3935      	subs	r1, #53	; 0x35
    9226:	438a      	bics	r2, r1
    9228:	625a      	str	r2, [r3, #36]	; 0x24
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:137
    ADC0_SC3 |= ( ADC_SC3_AVGE_MASK | ADC_SC3_AVGS(3) );  //硬件平均滤波32次
    922a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    922c:	3904      	subs	r1, #4
    922e:	430a      	orrs	r2, r1
    9230:	625a      	str	r2, [r3, #36]	; 0x24
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:138
    ADC0_SC3 |= ADC_SC3_CAL_MASK ;      //开始校验
    9232:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    9234:	3179      	adds	r1, #121	; 0x79
    9236:	430a      	orrs	r2, r1
    9238:	625a      	str	r2, [r3, #36]	; 0x24
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:139 (discriminator 1)
    while (!(ADC0_SC1A & ADC_SC1_COCO_MASK)); // 等待转换完成
    923a:	4b1a      	ldr	r3, [pc, #104]	; (92a4 <adc_cal+0x8c>)
    923c:	681b      	ldr	r3, [r3, #0]
    923e:	061b      	lsls	r3, r3, #24
    9240:	d5fb      	bpl.n	923a <adc_cal+0x22>
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:141

    if (ADC0_SC3& ADC_SC3_CALF_MASK) goto adc_cal_exit; // 校正失败
    9242:	4b18      	ldr	r3, [pc, #96]	; (92a4 <adc_cal+0x8c>)
    9244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    9246:	065b      	lsls	r3, r3, #25
    9248:	d42a      	bmi.n	92a0 <adc_cal+0x88>
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:145
    // 校正正确，继续执行
    // 计算正向输入校正
    cal_var = 0x00;
    cal_var =  ADC0_CLP0;
    924a:	4a16      	ldr	r2, [pc, #88]	; (92a4 <adc_cal+0x8c>)
    924c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    924e:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:146
    cal_var += ADC0_CLP1;
    9250:	6c91      	ldr	r1, [r2, #72]	; 0x48
    9252:	185b      	adds	r3, r3, r1
    9254:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:147
    cal_var += ADC0_CLP2;
    9256:	6c51      	ldr	r1, [r2, #68]	; 0x44
    9258:	185b      	adds	r3, r3, r1
    925a:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:148
    cal_var += ADC0_CLP3;
    925c:	6c11      	ldr	r1, [r2, #64]	; 0x40
    925e:	185b      	adds	r3, r3, r1
    9260:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:149
    cal_var += ADC0_CLP4;
    9262:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    9264:	185b      	adds	r3, r3, r1
    9266:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:150
    cal_var += ADC0_CLPS;
    9268:	6b91      	ldr	r1, [r2, #56]	; 0x38
    926a:	185b      	adds	r3, r3, r1
    926c:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:152

    cal_var = cal_var/2;
    926e:	085b      	lsrs	r3, r3, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:154
    cal_var |= 0x8000;   //Set MSB
    ADC0_PG = ADC_PG_PG(cal_var);
    9270:	62d3      	str	r3, [r2, #44]	; 0x2c
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:158

    // 计算负向输入校正
    cal_var = 0x00;
    cal_var =  ADC0_CLM0;
    9272:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    9274:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:159
    cal_var += ADC0_CLM1;
    9276:	6e91      	ldr	r1, [r2, #104]	; 0x68
    9278:	185b      	adds	r3, r3, r1
    927a:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:160
    cal_var += ADC0_CLM2;
    927c:	6e51      	ldr	r1, [r2, #100]	; 0x64
    927e:	185b      	adds	r3, r3, r1
    9280:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:161
    cal_var += ADC0_CLM3;
    9282:	6e11      	ldr	r1, [r2, #96]	; 0x60
    9284:	185b      	adds	r3, r3, r1
    9286:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:162
    cal_var += ADC0_CLM4;
    9288:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    928a:	185b      	adds	r3, r3, r1
    928c:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:163
    cal_var += ADC0_CLMS;
    928e:	6d91      	ldr	r1, [r2, #88]	; 0x58
    9290:	185b      	adds	r3, r3, r1
    9292:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:165

    cal_var = cal_var/2;
    9294:	085b      	lsrs	r3, r3, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:167
    cal_var |= 0x8000; // Set MSB
    ADC0_MG = ADC_MG_MG(cal_var);
    9296:	6313      	str	r3, [r2, #48]	; 0x30
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:168
    ADC0_SC3 &= ~ADC_SC3_CAL_MASK ; //清CAL
    9298:	6a53      	ldr	r3, [r2, #36]	; 0x24
    929a:	2180      	movs	r1, #128	; 0x80
    929c:	438b      	bics	r3, r1
    929e:	6253      	str	r3, [r2, #36]	; 0x24
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:170
adc_cal_exit:
    __asm("NOP");
    92a0:	46c0      	nop			; (mov r8, r8)
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:171
}
    92a2:	4770      	bx	lr
    92a4:	4003b000 	.word	0x4003b000

000092a8 <adc_init_inner>:
adc_init_inner():
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:52
{
    92a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92aa:	001d      	movs	r5, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:56
    SIM_SCGC6 |= SIM_SCGC6_ADC0_MASK;
    92ac:	4e23      	ldr	r6, [pc, #140]	; (933c <adc_init_inner+0x94>)
    92ae:	4c24      	ldr	r4, [pc, #144]	; (9340 <adc_init_inner+0x98>)
    92b0:	5937      	ldr	r7, [r6, r4]
    92b2:	2380      	movs	r3, #128	; 0x80
    92b4:	051b      	lsls	r3, r3, #20
    92b6:	433b      	orrs	r3, r7
    92b8:	5133      	str	r3, [r6, r4]
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:59
    switch(accurary)
    92ba:	3a08      	subs	r2, #8
    92bc:	b2d3      	uxtb	r3, r2
    92be:	2b05      	cmp	r3, #5
    92c0:	d807      	bhi.n	92d2 <adc_init_inner+0x2a>
    92c2:	009a      	lsls	r2, r3, #2
    92c4:	4b1f      	ldr	r3, [pc, #124]	; (9344 <adc_init_inner+0x9c>)
    92c6:	589b      	ldr	r3, [r3, r2]
    92c8:	469f      	mov	pc, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:62
        ADCCfg1 = ADC_CFG1_MODE(0);
    92ca:	2200      	movs	r2, #0
    92cc:	e004      	b.n	92d8 <adc_init_inner+0x30>
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:68
        ADCCfg1 = ADC_CFG1_MODE(2);
    92ce:	2208      	movs	r2, #8
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:69
        break;
    92d0:	e002      	b.n	92d8 <adc_init_inner+0x30>
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:71
        ADCCfg1 = ADC_CFG1_MODE(3);
    92d2:	220c      	movs	r2, #12
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:72
        break;
    92d4:	e000      	b.n	92d8 <adc_init_inner+0x30>
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:65
        ADCCfg1 = ADC_CFG1_MODE(1);
    92d6:	2204      	movs	r2, #4
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:75
    ADCCfg1 |=  (ADC_CFG1_ADIV(2) | ADC_CFG1_ADICLK(1) | ADC_CFG1_ADLSMP_MASK);
    92d8:	2351      	movs	r3, #81	; 0x51
    92da:	431a      	orrs	r2, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:77
    ADC0_CFG1 = ADCCfg1;
    92dc:	4c1a      	ldr	r4, [pc, #104]	; (9348 <adc_init_inner+0xa0>)
    92de:	60a2      	str	r2, [r4, #8]
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:80
    ADC0_CFG2&=~(ADC_CFG2_ADACKEN_MASK     //异步时钟输出禁止
    92e0:	68e3      	ldr	r3, [r4, #12]
    92e2:	220f      	movs	r2, #15
    92e4:	4393      	bics	r3, r2
    92e6:	60e3      	str	r3, [r4, #12]
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:84
    (chnGroup==1)?(ADC0_CFG2 |=(ADC_CFG2_MUXSEL(1))):(ADC0_CFG2 &=~(ADC_CFG2_MUXSEL(1)));
    92e8:	2801      	cmp	r0, #1
    92ea:	d01b      	beq.n	9324 <adc_init_inner+0x7c>
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:84 (discriminator 2)
    92ec:	4a16      	ldr	r2, [pc, #88]	; (9348 <adc_init_inner+0xa0>)
    92ee:	68d3      	ldr	r3, [r2, #12]
    92f0:	2010      	movs	r0, #16
    92f2:	4383      	bics	r3, r0
    92f4:	60d3      	str	r3, [r2, #12]
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:86
    ADC0_SC2 = 0;
    92f6:	4814      	ldr	r0, [pc, #80]	; (9348 <adc_init_inner+0xa0>)
    92f8:	2300      	movs	r3, #0
    92fa:	6203      	str	r3, [r0, #32]
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:88
    ADC0_SC3 |= (ADC_SC3_ADCO_MASK | ADC_SC3_AVGE_MASK | ADC_SC3_AVGS((uint8_t)HDAve));
    92fc:	6a42      	ldr	r2, [r0, #36]	; 0x24
    92fe:	3303      	adds	r3, #3
    9300:	402b      	ands	r3, r5
    9302:	4313      	orrs	r3, r2
    9304:	220c      	movs	r2, #12
    9306:	4313      	orrs	r3, r2
    9308:	6243      	str	r3, [r0, #36]	; 0x24
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:91
    if (1 == diff)     //选择差分输入
    930a:	2901      	cmp	r1, #1
    930c:	d00f      	beq.n	932e <adc_init_inner+0x86>
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:98
        ADC0_SC1A &= ~(ADC_SC1_DIFF_MASK );
    930e:	4a0e      	ldr	r2, [pc, #56]	; (9348 <adc_init_inner+0xa0>)
    9310:	6813      	ldr	r3, [r2, #0]
    9312:	2120      	movs	r1, #32
    9314:	438b      	bics	r3, r1
    9316:	6013      	str	r3, [r2, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:101
    ADC0_SC1A &= ~(ADC_SC1_AIEN_MASK);
    9318:	4a0b      	ldr	r2, [pc, #44]	; (9348 <adc_init_inner+0xa0>)
    931a:	6813      	ldr	r3, [r2, #0]
    931c:	2140      	movs	r1, #64	; 0x40
    931e:	438b      	bics	r3, r1
    9320:	6013      	str	r3, [r2, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:102
}
    9322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:84 (discriminator 1)
    (chnGroup==1)?(ADC0_CFG2 |=(ADC_CFG2_MUXSEL(1))):(ADC0_CFG2 &=~(ADC_CFG2_MUXSEL(1)));
    9324:	68e3      	ldr	r3, [r4, #12]
    9326:	300f      	adds	r0, #15
    9328:	4303      	orrs	r3, r0
    932a:	60e3      	str	r3, [r4, #12]
    932c:	e7e3      	b.n	92f6 <adc_init_inner+0x4e>
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:93
        ADC0_SC1A |= (ADC_SC1_DIFF_MASK);
    932e:	6803      	ldr	r3, [r0, #0]
    9330:	311f      	adds	r1, #31
    9332:	430b      	orrs	r3, r1
    9334:	6003      	str	r3, [r0, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:94
        adc_cal();    //差分情况，需校验
    9336:	f7ff ff6f 	bl	9218 <adc_cal>
    933a:	e7ed      	b.n	9318 <adc_init_inner+0x70>
    933c:	40047000 	.word	0x40047000
    9340:	0000103c 	.word	0x0000103c
    9344:	0000ade0 	.word	0x0000ade0
    9348:	4003b000 	.word	0x4003b000

0000934c <adc_init>:
adc_init():
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:24
{
    934c:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:26
	chnGroup = (uint8_t)(A_SENSOR_No>>8);
    934e:	0a00      	lsrs	r0, r0, #8
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:27
	adc_init_inner(chnGroup,diff,16,SAMPLE32);
    9350:	2303      	movs	r3, #3
    9352:	2210      	movs	r2, #16
    9354:	f7ff ffa8 	bl	92a8 <adc_init_inner>
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:28
}
    9358:	bd10      	pop	{r4, pc}
	...

0000935c <TempTrans>:
TempTrans():
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:175


float TempTrans(uint16_t mcu_temp_AD)
{
    935c:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:177
	float mcu_temp_result;
	mcu_temp_result=(float)(25.0-(mcu_temp_AD*0.05-719)/1.715);
    935e:	f7ff fdcf 	bl	8f00 <__aeabi_i2d>
    9362:	4a0a      	ldr	r2, [pc, #40]	; (938c <TempTrans+0x30>)
    9364:	4b0a      	ldr	r3, [pc, #40]	; (9390 <TempTrans+0x34>)
    9366:	f7fe ffdb 	bl	8320 <__aeabi_dmul>
    936a:	2200      	movs	r2, #0
    936c:	4b09      	ldr	r3, [pc, #36]	; (9394 <TempTrans+0x38>)
    936e:	f7ff fa49 	bl	8804 <__aeabi_dsub>
    9372:	4a09      	ldr	r2, [pc, #36]	; (9398 <TempTrans+0x3c>)
    9374:	4b09      	ldr	r3, [pc, #36]	; (939c <TempTrans+0x40>)
    9376:	f7fe fbc9 	bl	7b0c <__aeabi_ddiv>
    937a:	0002      	movs	r2, r0
    937c:	000b      	movs	r3, r1
    937e:	2000      	movs	r0, #0
    9380:	4907      	ldr	r1, [pc, #28]	; (93a0 <TempTrans+0x44>)
    9382:	f7ff fa3f 	bl	8804 <__aeabi_dsub>
    9386:	f7ff fe79 	bl	907c <__aeabi_d2f>
D:\app_for_qianrushi\exam\16\Debug/srcc/adc.c:179
	return mcu_temp_result;
    938a:	bd10      	pop	{r4, pc}
    938c:	9999999a 	.word	0x9999999a
    9390:	3fa99999 	.word	0x3fa99999
    9394:	40867800 	.word	0x40867800
    9398:	d70a3d71 	.word	0xd70a3d71
    939c:	3ffb70a3 	.word	0x3ffb70a3
    93a0:	40390000 	.word	0x40390000

000093a4 <tpm_clear_int>:
tpm_clear_int():
D:\app_for_qianrushi\exam\16\Debug/srcc/timer.c:293
//函数返回：清除TPM模块中断标志位
//===================================================================
void tpm_clear_int(uint8_t TPM_i)
{
    //清除TPM_i模块中断标志位
    BSET(TPM_SC_TOF_SHIFT,TPM_SC_REG(TPM_ARR[TPM_i]));
    93a4:	0080      	lsls	r0, r0, #2
    93a6:	4b03      	ldr	r3, [pc, #12]	; (93b4 <tpm_clear_int+0x10>)
    93a8:	58c2      	ldr	r2, [r0, r3]
    93aa:	6813      	ldr	r3, [r2, #0]
    93ac:	2180      	movs	r1, #128	; 0x80
    93ae:	430b      	orrs	r3, r1
    93b0:	6013      	str	r3, [r2, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/timer.c:294
}
    93b2:	4770      	bx	lr
    93b4:	20000400 	.word	0x20000400

000093b8 <timer_clear_int>:
timer_clear_int():
D:\app_for_qianrushi\exam\16\Debug/srcc/timer.c:126
{
    93b8:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\16\Debug/srcc/timer.c:127
    if(timer_No==0)
    93ba:	2800      	cmp	r0, #0
    93bc:	d006      	beq.n	93cc <timer_clear_int+0x14>
D:\app_for_qianrushi\exam\16\Debug/srcc/timer.c:131
    else if(timer_No==1||timer_No==2)
    93be:	1e43      	subs	r3, r0, #1
    93c0:	b2db      	uxtb	r3, r3
    93c2:	2b01      	cmp	r3, #1
    93c4:	d807      	bhi.n	93d6 <timer_clear_int+0x1e>
D:\app_for_qianrushi\exam\16\Debug/srcc/timer.c:133
        tpm_clear_int(timer_No);
    93c6:	f7ff ffed 	bl	93a4 <tpm_clear_int>
    93ca:	e004      	b.n	93d6 <timer_clear_int+0x1e>
D:\app_for_qianrushi\exam\16\Debug/srcc/timer.c:129
        CLEAR_LPTMR_FLAG;
    93cc:	4a02      	ldr	r2, [pc, #8]	; (93d8 <timer_clear_int+0x20>)
    93ce:	6813      	ldr	r3, [r2, #0]
    93d0:	2180      	movs	r1, #128	; 0x80
    93d2:	430b      	orrs	r3, r1
    93d4:	6013      	str	r3, [r2, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/timer.c:137
}
    93d6:	bd10      	pop	{r4, pc}
    93d8:	40040000 	.word	0x40040000

000093dc <SystemInit>:
SystemInit():
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:112
    //看门狗默认为开启，而且复位之后只能开启或关闭看门狗一次
    //SIM_COPC &= ~SIM_COPC_COPT_MASK;    //DISABLE_WDOG 

    /* System clock initialization */
    /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=3,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
    SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x03)); /* Set the system prescalers to safe value */
    93dc:	4b26      	ldr	r3, [pc, #152]	; (9478 <SystemInit+0x9c>)
    93de:	4a27      	ldr	r2, [pc, #156]	; (947c <SystemInit+0xa0>)
    93e0:	21c0      	movs	r1, #192	; 0xc0
    93e2:	0289      	lsls	r1, r1, #10
    93e4:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:114
    /* SIM_SCGC5: PORTA=1 */
    SIM_SCGC5 |= SIM_SCGC5_PORTA_MASK;   /* Enable clock gate for ports to enable pin routing */
    93e6:	4926      	ldr	r1, [pc, #152]	; (9480 <SystemInit+0xa4>)
    93e8:	5858      	ldr	r0, [r3, r1]
    93ea:	2280      	movs	r2, #128	; 0x80
    93ec:	0092      	lsls	r2, r2, #2
    93ee:	4302      	orrs	r2, r0
    93f0:	505a      	str	r2, [r3, r1]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:115
    if ((PMC_REGSC & PMC_REGSC_ACKISO_MASK) != 0x0U) {
    93f2:	4b24      	ldr	r3, [pc, #144]	; (9484 <SystemInit+0xa8>)
    93f4:	789b      	ldrb	r3, [r3, #2]
    93f6:	071b      	lsls	r3, r3, #28
    93f8:	d504      	bpl.n	9404 <SystemInit+0x28>
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:117
        /* PMC_REGSC: ACKISO=1 */
        PMC_REGSC |= PMC_REGSC_ACKISO_MASK; /* Release IO pads after wakeup from VLLS mode. */
    93fa:	4a22      	ldr	r2, [pc, #136]	; (9484 <SystemInit+0xa8>)
    93fc:	7893      	ldrb	r3, [r2, #2]
    93fe:	2108      	movs	r1, #8
    9400:	430b      	orrs	r3, r1
    9402:	7093      	strb	r3, [r2, #2]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:120
    }
    /* SIM_CLKDIV1: OUTDIV1=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,OUTDIV4=1,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0,??=0 */
    SIM_CLKDIV1 = (SIM_CLKDIV1_OUTDIV1(0x00) | SIM_CLKDIV1_OUTDIV4(0x01)); /* Update system prescalers */
    9404:	4b1c      	ldr	r3, [pc, #112]	; (9478 <SystemInit+0x9c>)
    9406:	4a1d      	ldr	r2, [pc, #116]	; (947c <SystemInit+0xa0>)
    9408:	2180      	movs	r1, #128	; 0x80
    940a:	0249      	lsls	r1, r1, #9
    940c:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:122
    /* SIM_SOPT2: ??=0,PLLFLLSEL=0 */
    SIM_SOPT2 &= (uint32_t)~(uint32_t)((SIM_SOPT2_PLLFLLSEL_MASK | 0x00020000U)); /* Select FLL as a clock source for various peripherals */
    940e:	4a1e      	ldr	r2, [pc, #120]	; (9488 <SystemInit+0xac>)
    9410:	5899      	ldr	r1, [r3, r2]
    9412:	481e      	ldr	r0, [pc, #120]	; (948c <SystemInit+0xb0>)
    9414:	4001      	ands	r1, r0
    9416:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:124
    /* SIM_SOPT1: OSC32KSEL=0 */
    SIM_SOPT1 &= (uint32_t)~(uint32_t)(SIM_SOPT1_OSC32KSEL(0x03)); /* System oscillator drives 32 kHz clock for various peripherals */
    9418:	6819      	ldr	r1, [r3, #0]
    941a:	481d      	ldr	r0, [pc, #116]	; (9490 <SystemInit+0xb4>)
    941c:	4001      	ands	r1, r0
    941e:	6019      	str	r1, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:126
    /* SIM_SOPT2: TPMSRC=1 */
    SIM_SOPT2 = (uint32_t)((SIM_SOPT2 & (uint32_t)~(uint32_t)(
    9420:	5899      	ldr	r1, [r3, r2]
    9422:	481c      	ldr	r0, [pc, #112]	; (9494 <SystemInit+0xb8>)
    9424:	4008      	ands	r0, r1
    9426:	2180      	movs	r1, #128	; 0x80
    9428:	0449      	lsls	r1, r1, #17
    942a:	4301      	orrs	r1, r0
    942c:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:133
    )) | (uint32_t)(
            SIM_SOPT2_TPMSRC(0x01)
    ));                      /* Set the TPM clock */
    /* Switch to FEI Mode */
    /* MCG_C1: CLKS=0,FRDIV=0,IREFS=1,IRCLKEN=1,IREFSTEN=0 */
    MCG_C1 = MCG_C1_CLKS(0x00) |
    942e:	4b1a      	ldr	r3, [pc, #104]	; (9498 <SystemInit+0xbc>)
    9430:	2206      	movs	r2, #6
    9432:	701a      	strb	r2, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:138
            MCG_C1_FRDIV(0x00) |
            MCG_C1_IREFS_MASK |
            MCG_C1_IRCLKEN_MASK;
    /* MCG_C2: LOCRE0=0,RANGE0=0,HGO0=0,EREFS0=0,LP=0,IRCS=0 */
    MCG_C2 &= (uint8_t)~(uint8_t)(
    9434:	785a      	ldrb	r2, [r3, #1]
    9436:	2140      	movs	r1, #64	; 0x40
    9438:	400a      	ands	r2, r1
    943a:	705a      	strb	r2, [r3, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:147
            MCG_C2_EREFS0_MASK |
            MCG_C2_LP_MASK |
            MCG_C2_IRCS_MASK
    );
    /* MCG_C4: DMX32=1,DRST_DRS=1 */
    MCG_C4 = (uint8_t)((MCG_C4 & (uint8_t)~(uint8_t)(
    943c:	78d9      	ldrb	r1, [r3, #3]
    943e:	b249      	sxtb	r1, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:149
            MCG_C4_DRST_DRS(0x02)
    )) | (uint8_t)(
    9440:	221f      	movs	r2, #31
    9442:	4011      	ands	r1, r2
    9444:	3a7f      	subs	r2, #127	; 0x7f
    9446:	430a      	orrs	r2, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:147
    MCG_C4 = (uint8_t)((MCG_C4 & (uint8_t)~(uint8_t)(
    9448:	b2d2      	uxtb	r2, r2
    944a:	70da      	strb	r2, [r3, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:154
            MCG_C4_DMX32_MASK |
            MCG_C4_DRST_DRS(0x01)
    ));
    /* OSC0_CR: ERCLKEN=0,??=0,EREFSTEN=0,??=0,SC2P=0,SC4P=0,SC8P=0,SC16P=0 */
    OSC0_CR = 0x00U;
    944c:	2200      	movs	r2, #0
    944e:	4913      	ldr	r1, [pc, #76]	; (949c <SystemInit+0xc0>)
    9450:	700a      	strb	r2, [r1, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:156
    /* MCG_C5: ??=0,PLLCLKEN0=0,PLLSTEN0=0,PRDIV0=0 */
    MCG_C5 = MCG_C5_PRDIV0(0x00);
    9452:	711a      	strb	r2, [r3, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:158
    /* MCG_C6: LOLIE0=0,PLLS=0,CME0=0,VDIV0=0 */
    MCG_C6 = MCG_C6_VDIV0(0x00);
    9454:	715a      	strb	r2, [r3, #5]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:159 (discriminator 1)
    while((MCG_S & MCG_S_IREFST_MASK) == 0x00U) { /* Check that the source of the FLL reference clock is the internal reference clock. */
    9456:	4b10      	ldr	r3, [pc, #64]	; (9498 <SystemInit+0xbc>)
    9458:	799b      	ldrb	r3, [r3, #6]
    945a:	06db      	lsls	r3, r3, #27
    945c:	d5fb      	bpl.n	9456 <SystemInit+0x7a>
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:161 (discriminator 1)
    }
    while((MCG_S & 0x0CU) != 0x00U) {    /* Wait until output of the FLL is selected */
    945e:	4b0e      	ldr	r3, [pc, #56]	; (9498 <SystemInit+0xbc>)
    9460:	799a      	ldrb	r2, [r3, #6]
    9462:	230c      	movs	r3, #12
    9464:	421a      	tst	r2, r3
    9466:	d1fa      	bne.n	945e <SystemInit+0x82>
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:234
    //        if (((MCG_S & MCG_S_CLKST_MASK) >> MCG_S_CLKST_SHIFT) == 0x3) break;
    //    }
    //    //4.现在处于PEE模式

    //开启PORT模块时钟
    SIM->SCGC5 |= SIM_SCGC5_PORTA_MASK
    9468:	4903      	ldr	r1, [pc, #12]	; (9478 <SystemInit+0x9c>)
    946a:	4a05      	ldr	r2, [pc, #20]	; (9480 <SystemInit+0xa4>)
    946c:	5888      	ldr	r0, [r1, r2]
    946e:	23f8      	movs	r3, #248	; 0xf8
    9470:	019b      	lsls	r3, r3, #6
    9472:	4303      	orrs	r3, r0
    9474:	508b      	str	r3, [r1, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/system_MKL36Z4.c:239
            | SIM_SCGC5_PORTB_MASK
            | SIM_SCGC5_PORTC_MASK
            | SIM_SCGC5_PORTD_MASK
            | SIM_SCGC5_PORTE_MASK;
}
    9476:	4770      	bx	lr
    9478:	40047000 	.word	0x40047000
    947c:	00001044 	.word	0x00001044
    9480:	00001038 	.word	0x00001038
    9484:	4007d000 	.word	0x4007d000
    9488:	00001004 	.word	0x00001004
    948c:	fffcffff 	.word	0xfffcffff
    9490:	fff3ffff 	.word	0xfff3ffff
    9494:	fcffffff 	.word	0xfcffffff
    9498:	40064000 	.word	0x40064000
    949c:	40065000 	.word	0x40065000

000094a0 <main>:
main():
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:17
//main.c使用的内部函数声明处
float TempRegression(uint16_t AD);
//----------------------------------------------------------------------
//主函数，一般情况下可以认为程序从此开始运行（实际上有启动过程，参见书稿）
int main(void)
{
    94a0:	b570      	push	{r4, r5, r6, lr}
    94a2:	b086      	sub	sp, #24
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:34
    uint8_t mag;
    uint16_t AD_CAL1;
	uint16_t AD_CAL2;
    
    //（1.2）【不变】关总中断
    DISABLE_INTERRUPTS;
    94a4:	b672      	cpsid	i
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:35
    wdog_feed();
    94a6:	f000 f9df 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:36
    printf("进入User的main...\n");
    94aa:	4858      	ldr	r0, [pc, #352]	; (960c <main+0x16c>)
    94ac:	f001 fc14 	bl	acd8 <myprintf>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:44
    mMainLoopCount=0;    //主循环次数变量
    mFlag='R';           //灯的状态标志
    //（1.4）给全局变量赋初值
    
    //（1.5）用户外设模块初始化
    wdog_start(3);	  //启动看门狗
    94b0:	2003      	movs	r0, #3
    94b2:	f000 f9bb 	bl	982c <wdog_start>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:46

    gpio_init(PIN_MAG,GPIO_INPUT,1);     
    94b6:	2201      	movs	r2, #1
    94b8:	2100      	movs	r1, #0
    94ba:	4855      	ldr	r0, [pc, #340]	; (9610 <main+0x170>)
    94bc:	f000 f97a 	bl	97b4 <gpio_init>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:47
    wdog_feed();
    94c0:	f000 f9d2 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:48
    printf("LCD初始化...");
    94c4:	4853      	ldr	r0, [pc, #332]	; (9614 <main+0x174>)
    94c6:	f001 fc07 	bl	acd8 <myprintf>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:49
    LCD_Init();
    94ca:	f000 ff71 	bl	a3b0 <LCD_Init>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:50
    printf("成功\n");
    94ce:	4852      	ldr	r0, [pc, #328]	; (9618 <main+0x178>)
    94d0:	f001 fc02 	bl	acd8 <myprintf>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:51
    uart_init(UART_User,115200);
    94d4:	21e1      	movs	r1, #225	; 0xe1
    94d6:	0249      	lsls	r1, r1, #9
    94d8:	2000      	movs	r0, #0
    94da:	f000 fbcb 	bl	9c74 <uart_init>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:53

    adc_init(AD_TEMP,0);
    94de:	2100      	movs	r1, #0
    94e0:	2002      	movs	r0, #2
    94e2:	f7ff ff33 	bl	934c <adc_init>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:54
    adc_init(AD_MCU_TEMP,0);
    94e6:	2100      	movs	r1, #0
    94e8:	201a      	movs	r0, #26
    94ea:	f7ff ff2f 	bl	934c <adc_init>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:55
    wdog_feed();
    94ee:	f000 f9bb 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:59
//    adc_init(AD_BAT,0);

    //（1.6）使能模块中断
    uart_enable_re_int(UART_User);
    94f2:	2000      	movs	r0, #0
    94f4:	f000 fcda 	bl	9eac <uart_enable_re_int>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:61
    //（1.7）【不变】开总中断
    ENABLE_INTERRUPTS;
    94f8:	b662      	cpsie	i
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:64
    
    
    printf("金葫芦提示：LCD屏幕版面...");
    94fa:	4848      	ldr	r0, [pc, #288]	; (961c <main+0x17c>)
    94fc:	f001 fbec 	bl	acd8 <myprintf>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:65
    LCD_aotu(2,2,238,318,0);
    9500:	239f      	movs	r3, #159	; 0x9f
    9502:	2200      	movs	r2, #0
    9504:	9200      	str	r2, [sp, #0]
    9506:	005b      	lsls	r3, r3, #1
    9508:	32ee      	adds	r2, #238	; 0xee
    950a:	2102      	movs	r1, #2
    950c:	2002      	movs	r0, #2
    950e:	f000 febf 	bl	a290 <LCD_aotu>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:66
    LCD_aotu(4,40,236,80,1);
    9512:	2301      	movs	r3, #1
    9514:	9300      	str	r3, [sp, #0]
    9516:	334f      	adds	r3, #79	; 0x4f
    9518:	22ec      	movs	r2, #236	; 0xec
    951a:	2128      	movs	r1, #40	; 0x28
    951c:	2004      	movs	r0, #4
    951e:	f000 feb7 	bl	a290 <LCD_aotu>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:67
    LCD_ShowString(72,20,RED,GRAY,(char *)"AHL-MCU-KL36");
    9522:	4c3f      	ldr	r4, [pc, #252]	; (9620 <main+0x180>)
    9524:	25f8      	movs	r5, #248	; 0xf8
    9526:	022d      	lsls	r5, r5, #8
    9528:	4b3e      	ldr	r3, [pc, #248]	; (9624 <main+0x184>)
    952a:	9300      	str	r3, [sp, #0]
    952c:	0023      	movs	r3, r4
    952e:	002a      	movs	r2, r5
    9530:	2114      	movs	r1, #20
    9532:	2048      	movs	r0, #72	; 0x48
    9534:	f000 fe08 	bl	a148 <LCD_ShowString>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:68
    LCD_ShowString(68,52,RED,GRAY,(char *)"Hardware-Test");
    9538:	4b3b      	ldr	r3, [pc, #236]	; (9628 <main+0x188>)
    953a:	9300      	str	r3, [sp, #0]
    953c:	0023      	movs	r3, r4
    953e:	002a      	movs	r2, r5
    9540:	2134      	movs	r1, #52	; 0x34
    9542:	2044      	movs	r0, #68	; 0x44
    9544:	f000 fe00 	bl	a148 <LCD_ShowString>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:69
  	wdog_feed();
    9548:	f000 f98e 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:70
    LCD_ShowString(8,88,BLACK,GRAY,(char *)"MCU_Tmp:");
    954c:	4b37      	ldr	r3, [pc, #220]	; (962c <main+0x18c>)
    954e:	9300      	str	r3, [sp, #0]
    9550:	0023      	movs	r3, r4
    9552:	2200      	movs	r2, #0
    9554:	2158      	movs	r1, #88	; 0x58
    9556:	2008      	movs	r0, #8
    9558:	f000 fdf6 	bl	a148 <LCD_ShowString>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:71
    wdog_feed();                                         
    955c:	f000 f984 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:39
    mMainLoopCount=0;    //主循环次数变量
    9560:	2400      	movs	r4, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:77

	uint8_t temp[3];

    for(;;)
    {
    	wdog_feed();
    9562:	f000 f981 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:78
        mMainLoopCount++;
    9566:	3401      	adds	r4, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:79
        if (mMainLoopCount<=0x1fffff)  continue;
    9568:	4b31      	ldr	r3, [pc, #196]	; (9630 <main+0x190>)
    956a:	429c      	cmp	r4, r3
    956c:	d9f9      	bls.n	9562 <main+0xc2>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:81
        mMainLoopCount=0; 
        wdog_feed();
    956e:	f000 f97b 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:83
		
		mcu_temp_AD = adc_read(AD_MCU_TEMP);
    9572:	201a      	movs	r0, #26
    9574:	f7ff fe4a 	bl	920c <adc_read>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:84
        mcu_temp=TempTrans(mcu_temp_AD);
    9578:	f7ff fef0 	bl	935c <TempTrans>
    957c:	1c05      	adds	r5, r0, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:85
        LCD_ShowString(84,88,BLACK,GRAY,"     ");
    957e:	4e28      	ldr	r6, [pc, #160]	; (9620 <main+0x180>)
    9580:	4b2c      	ldr	r3, [pc, #176]	; (9634 <main+0x194>)
    9582:	9300      	str	r3, [sp, #0]
    9584:	0033      	movs	r3, r6
    9586:	2200      	movs	r2, #0
    9588:	2158      	movs	r1, #88	; 0x58
    958a:	2054      	movs	r0, #84	; 0x54
    958c:	f000 fddc 	bl	a148 <LCD_ShowString>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:86
        LCD_ShowString(84,88,GREEN,GRAY,(char *)NumToStr_float(mcu_temp,2,temp));
    9590:	ac05      	add	r4, sp, #20
    9592:	0022      	movs	r2, r4
    9594:	2102      	movs	r1, #2
    9596:	1c28      	adds	r0, r5, #0
    9598:	f000 fa96 	bl	9ac8 <NumToStr_float>
    959c:	22fc      	movs	r2, #252	; 0xfc
    959e:	9000      	str	r0, [sp, #0]
    95a0:	0033      	movs	r3, r6
    95a2:	00d2      	lsls	r2, r2, #3
    95a4:	2158      	movs	r1, #88	; 0x58
    95a6:	2054      	movs	r0, #84	; 0x54
    95a8:	f000 fdce 	bl	a148 <LCD_ShowString>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:87
        wdog_feed();
    95ac:	f000 f95c 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:91


			
          uint8_t friction=(((int)(mcu_temp*10.0))%10)*10+((int)(mcu_temp*100.0))%10;
    95b0:	1c28      	adds	r0, r5, #0
    95b2:	f7ff fd11 	bl	8fd8 <__aeabi_f2d>
    95b6:	2200      	movs	r2, #0
    95b8:	4b1f      	ldr	r3, [pc, #124]	; (9638 <main+0x198>)
    95ba:	9002      	str	r0, [sp, #8]
    95bc:	9103      	str	r1, [sp, #12]
    95be:	f7fe feaf 	bl	8320 <__aeabi_dmul>
    95c2:	f7ff fc67 	bl	8e94 <__aeabi_d2iz>
    95c6:	210a      	movs	r1, #10
    95c8:	f7fd fcde 	bl	6f88 <__aeabi_idivmod>
    95cc:	008b      	lsls	r3, r1, #2
    95ce:	18c9      	adds	r1, r1, r3
    95d0:	004b      	lsls	r3, r1, #1
    95d2:	b2de      	uxtb	r6, r3
    95d4:	2200      	movs	r2, #0
    95d6:	4b19      	ldr	r3, [pc, #100]	; (963c <main+0x19c>)
    95d8:	9802      	ldr	r0, [sp, #8]
    95da:	9903      	ldr	r1, [sp, #12]
    95dc:	f7fe fea0 	bl	8320 <__aeabi_dmul>
    95e0:	f7ff fc58 	bl	8e94 <__aeabi_d2iz>
    95e4:	210a      	movs	r1, #10
    95e6:	f7fd fccf 	bl	6f88 <__aeabi_idivmod>
    95ea:	b2c9      	uxtb	r1, r1
    95ec:	1871      	adds	r1, r6, r1
    95ee:	b2ce      	uxtb	r6, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:92
          temp[0] = (char)mcu_temp;
    95f0:	1c28      	adds	r0, r5, #0
    95f2:	f7fe fa21 	bl	7a38 <__aeabi_f2iz>
    95f6:	7020      	strb	r0, [r4, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:93
          temp[1] = (char)friction;//MCU的温度
    95f8:	7066      	strb	r6, [r4, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:94
          temp[2] = '\0';
    95fa:	2300      	movs	r3, #0
    95fc:	70a3      	strb	r3, [r4, #2]
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:95
         uart_send_string(UART_User,temp);
    95fe:	0021      	movs	r1, r4
    9600:	2000      	movs	r0, #0
    9602:	f000 fc09 	bl	9e18 <uart_send_string>
D:\app_for_qianrushi\exam\16\Debug/srcc/main.c:80
        mMainLoopCount=0; 
    9606:	2400      	movs	r4, #0
    9608:	e7ab      	b.n	9562 <main+0xc2>
    960a:	46c0      	nop			; (mov r8, r8)
    960c:	0000adf8 	.word	0x0000adf8
    9610:	00000413 	.word	0x00000413
    9614:	0000ae0c 	.word	0x0000ae0c
    9618:	0000ae1c 	.word	0x0000ae1c
    961c:	0000ae24 	.word	0x0000ae24
    9620:	00008430 	.word	0x00008430
    9624:	0000ae40 	.word	0x0000ae40
    9628:	0000ae50 	.word	0x0000ae50
    962c:	0000ae60 	.word	0x0000ae60
    9630:	001fffff 	.word	0x001fffff
    9634:	0000ae6c 	.word	0x0000ae6c
    9638:	40240000 	.word	0x40240000
    963c:	40590000 	.word	0x40590000

00009640 <flash_read_physical>:
flash_read_physical():
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:203
//       addr：目标地址，要求为4的倍数（例如：0x00000004）
//       N：读字节数目（0~1020,要求为4，8,12,......）
//功能概要：读取flash指定地址的内容
//======================================================================
void flash_read_physical(uint8_t *dest,uint32_t addr,uint16_t N)
{
    9640:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:206
	uint8_t *src;
	src=(uint8_t *)addr;
	memcpy(dest,src,N);
    9642:	f001 fb5b 	bl	acfc <memcpy>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:207
}
    9646:	bd10      	pop	{r4, pc}

00009648 <flash_isempty>:
flash_isempty():
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:254
{
   uint16_t i,flag;
   uint8_t* buff;
   i = 0;
   flag = 1;
   for(i = 0; i<N; i++)   //遍历区域内字节
    9648:	2300      	movs	r3, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:254 (discriminator 1)
    964a:	428b      	cmp	r3, r1
    964c:	d206      	bcs.n	965c <flash_isempty+0x14>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:256
   {
	  buff=(uint8_t*)(sect*0x400);
    964e:	0282      	lsls	r2, r0, #10
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:257
      if(buff[i]!=0xff)   //非空
    9650:	5cd2      	ldrb	r2, [r2, r3]
    9652:	2aff      	cmp	r2, #255	; 0xff
    9654:	d105      	bne.n	9662 <flash_isempty+0x1a>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:254 (discriminator 2)
   for(i = 0; i<N; i++)   //遍历区域内字节
    9656:	3301      	adds	r3, #1
    9658:	b29b      	uxth	r3, r3
    965a:	e7f6      	b.n	964a <flash_isempty+0x2>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:253
   flag = 1;
    965c:	2001      	movs	r0, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:263
      {
      	  flag=0;
          break;
       }
   }
   return flag;
    965e:	b2c0      	uxtb	r0, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:264
}
    9660:	4770      	bx	lr
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:259
      	  flag=0;
    9662:	2000      	movs	r0, #0
    9664:	e7fb      	b.n	965e <flash_isempty+0x16>
	...

00009668 <flash_cmd_launch>:
flash_cmd_launch():
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:342
//======================================================================
uint32_t flash_cmd_launch(void)
{
	uint8_t irq_flag=0;
    // 清除访问错误标志位和非法访问标志位
    FTFA_FSTAT = ACCERR | FPVIOL;
    9668:	4b0f      	ldr	r3, [pc, #60]	; (96a8 <flash_cmd_launch+0x40>)
    966a:	2230      	movs	r2, #48	; 0x30
    966c:	701a      	strb	r2, [r3, #0]
__get_PRIMASK():
D:\app_for_qianrushi\exam\16\02_CPU/core_cmFunc.h:484
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    966e:	f3ef 8310 	mrs	r3, PRIMASK
flash_cmd_launch():
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:343
    if(__get_PRIMASK() == 0U)
    9672:	2b00      	cmp	r3, #0
    9674:	d112      	bne.n	969c <flash_cmd_launch+0x34>
__disable_irq():
D:\app_for_qianrushi\exam\16\02_CPU/core_cmFunc.h:344
  __ASM volatile ("cpsid i" : : : "memory");
    9676:	b672      	cpsid	i
flash_cmd_launch():
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:346
    {
    	__disable_irq();  //关总中断
    	irq_flag = 1;
    9678:	3a2f      	subs	r2, #47	; 0x2f
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:349
    }
    // 启动命令
    FTFA_FSTAT = CCIF;
    967a:	4b0b      	ldr	r3, [pc, #44]	; (96a8 <flash_cmd_launch+0x40>)
    967c:	2180      	movs	r1, #128	; 0x80
    967e:	7019      	strb	r1, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:351 (discriminator 1)
    // 等待命令结束
    while(!(FTFA_FSTAT & CCIF));
    9680:	4b09      	ldr	r3, [pc, #36]	; (96a8 <flash_cmd_launch+0x40>)
    9682:	781b      	ldrb	r3, [r3, #0]
    9684:	b25b      	sxtb	r3, r3
    9686:	2b00      	cmp	r3, #0
    9688:	dafa      	bge.n	9680 <flash_cmd_launch+0x18>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:352
    if(irq_flag == 1)
    968a:	2a01      	cmp	r2, #1
    968c:	d008      	beq.n	96a0 <flash_cmd_launch+0x38>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:357
    {
    	__enable_irq();  //开总中断
    }
    // 检查错误标志
    if(FTFA_FSTAT & (ACCERR | FPVIOL | MGSTAT0))
    968e:	4b06      	ldr	r3, [pc, #24]	; (96a8 <flash_cmd_launch+0x40>)
    9690:	781a      	ldrb	r2, [r3, #0]
    9692:	2331      	movs	r3, #49	; 0x31
    9694:	421a      	tst	r2, r3
    9696:	d105      	bne.n	96a4 <flash_cmd_launch+0x3c>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:359
        return 1 ; //执行命令出错
    return 0; //执行命令成功
    9698:	2000      	movs	r0, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:360
}
    969a:	4770      	bx	lr
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:340
	uint8_t irq_flag=0;
    969c:	2200      	movs	r2, #0
    969e:	e7ec      	b.n	967a <flash_cmd_launch+0x12>
__enable_irq():
D:\app_for_qianrushi\exam\16\02_CPU/core_cmFunc.h:333
  __ASM volatile ("cpsie i" : : : "memory");
    96a0:	b662      	cpsie	i
    96a2:	e7f4      	b.n	968e <flash_cmd_launch+0x26>
flash_cmd_launch():
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:358
        return 1 ; //执行命令出错
    96a4:	2001      	movs	r0, #1
    96a6:	e7f8      	b.n	969a <flash_cmd_launch+0x32>
    96a8:	40020000 	.word	0x40020000

000096ac <flash_erase>:
flash_erase():
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:50
{
    96ac:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:57
    dest.word    = (uint32_t)(sect*(1<<10));
    96ae:	0284      	lsls	r4, r0, #10
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:60
    FTFA_FCCOB0 = ERSSCR; // 擦除扇区命令
    96b0:	4b16      	ldr	r3, [pc, #88]	; (970c <flash_erase+0x60>)
    96b2:	2209      	movs	r2, #9
    96b4:	71da      	strb	r2, [r3, #7]
    96b6:	0482      	lsls	r2, r0, #18
    96b8:	0e12      	lsrs	r2, r2, #24
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:63
    FTFA_FCCOB1 = dest.byte[2];
    96ba:	719a      	strb	r2, [r3, #6]
    96bc:	0680      	lsls	r0, r0, #26
    96be:	0e00      	lsrs	r0, r0, #24
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:64
    FTFA_FCCOB2 = dest.byte[1];
    96c0:	7158      	strb	r0, [r3, #5]
    96c2:	b2e2      	uxtb	r2, r4
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:65
    FTFA_FCCOB3 = dest.byte[0];
    96c4:	711a      	strb	r2, [r3, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:68
    if(1 == flash_cmd_launch())    //若执行命令出现错误
    96c6:	f7ff ffcf 	bl	9668 <flash_cmd_launch>
    96ca:	2801      	cmp	r0, #1
    96cc:	d01b      	beq.n	9706 <flash_erase+0x5a>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:73
    if(dest.word < 0x400)
    96ce:	4b10      	ldr	r3, [pc, #64]	; (9710 <flash_erase+0x64>)
    96d0:	429c      	cmp	r4, r3
    96d2:	d901      	bls.n	96d8 <flash_erase+0x2c>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:91
    return 0;  //成功返回
    96d4:	2000      	movs	r0, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:92
}
    96d6:	bd10      	pop	{r4, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:76
        FTFA_FCCOB0 = PGM4; 
    96d8:	4b0c      	ldr	r3, [pc, #48]	; (970c <flash_erase+0x60>)
    96da:	2206      	movs	r2, #6
    96dc:	71da      	strb	r2, [r3, #7]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:78
        FTFA_FCCOB1 = 0x00;
    96de:	2200      	movs	r2, #0
    96e0:	719a      	strb	r2, [r3, #6]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:79
        FTFA_FCCOB2 = 0x04;
    96e2:	3204      	adds	r2, #4
    96e4:	715a      	strb	r2, [r3, #5]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:80
        FTFA_FCCOB3 = 0x0C;
    96e6:	3208      	adds	r2, #8
    96e8:	711a      	strb	r2, [r3, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:82
        FTFA_FCCOB4 = 0xFF;
    96ea:	32f3      	adds	r2, #243	; 0xf3
    96ec:	72da      	strb	r2, [r3, #11]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:83
        FTFA_FCCOB5 = 0xFF;
    96ee:	729a      	strb	r2, [r3, #10]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:84
        FTFA_FCCOB6 = 0xFF;
    96f0:	725a      	strb	r2, [r3, #9]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:85
        FTFA_FCCOB7 = 0xFE;
    96f2:	3a01      	subs	r2, #1
    96f4:	721a      	strb	r2, [r3, #8]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:87
        if(1 == flash_cmd_launch())  //若执行命令出现错误
    96f6:	f7ff ffb7 	bl	9668 <flash_cmd_launch>
    96fa:	2801      	cmp	r0, #1
    96fc:	d001      	beq.n	9702 <flash_erase+0x56>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:91
    return 0;  //成功返回
    96fe:	2000      	movs	r0, #0
    9700:	e7e9      	b.n	96d6 <flash_erase+0x2a>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:88
            return 2;   //解锁命令错误
    9702:	3001      	adds	r0, #1
    9704:	e7e7      	b.n	96d6 <flash_erase+0x2a>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:69
        return 1;     //擦除命令错误
    9706:	2001      	movs	r0, #1
    9708:	e7e5      	b.n	96d6 <flash_erase+0x2a>
    970a:	46c0      	nop			; (mov r8, r8)
    970c:	40020000 	.word	0x40020000
    9710:	000003ff 	.word	0x000003ff

00009714 <flash_write_physical>:
flash_write_physical():
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:147
{
    9714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9716:	000f      	movs	r7, r1
    9718:	0014      	movs	r4, r2
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:156
    FTFA_FCCOB0 = PGM4;
    971a:	4b12      	ldr	r3, [pc, #72]	; (9764 <flash_write_physical+0x50>)
    971c:	2206      	movs	r2, #6
    971e:	71da      	strb	r2, [r3, #7]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:157
    dest.word = destaddr;
    9720:	0005      	movs	r5, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:158
    for(size=0; size<N; size+=4, dest.word+=4, buf+=4)
    9722:	2600      	movs	r6, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:158 (discriminator 1)
    9724:	42b7      	cmp	r7, r6
    9726:	d918      	bls.n	975a <flash_write_physical+0x46>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:161
        FTFA_FCCOB1 = dest.byte[2];
    9728:	022a      	lsls	r2, r5, #8
    972a:	0e12      	lsrs	r2, r2, #24
    972c:	4b0d      	ldr	r3, [pc, #52]	; (9764 <flash_write_physical+0x50>)
    972e:	719a      	strb	r2, [r3, #6]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:162
        FTFA_FCCOB2 = dest.byte[1];
    9730:	042a      	lsls	r2, r5, #16
    9732:	0e12      	lsrs	r2, r2, #24
    9734:	715a      	strb	r2, [r3, #5]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:163
        FTFA_FCCOB3 = dest.byte[0];
    9736:	b2ea      	uxtb	r2, r5
    9738:	711a      	strb	r2, [r3, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:166
        FTFA_FCCOB4 = buf[3];//大端寻址
    973a:	78e2      	ldrb	r2, [r4, #3]
    973c:	72da      	strb	r2, [r3, #11]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:167
        FTFA_FCCOB5 = buf[2];
    973e:	78a2      	ldrb	r2, [r4, #2]
    9740:	729a      	strb	r2, [r3, #10]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:168
        FTFA_FCCOB6 = buf[1];
    9742:	7862      	ldrb	r2, [r4, #1]
    9744:	725a      	strb	r2, [r3, #9]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:169
        FTFA_FCCOB7 = buf[0];
    9746:	7822      	ldrb	r2, [r4, #0]
    9748:	721a      	strb	r2, [r3, #8]
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:171
        if(1 == flash_cmd_launch())
    974a:	f7ff ff8d 	bl	9668 <flash_cmd_launch>
    974e:	2801      	cmp	r0, #1
    9750:	d005      	beq.n	975e <flash_write_physical+0x4a>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:158 (discriminator 2)
    for(size=0; size<N; size+=4, dest.word+=4, buf+=4)
    9752:	3604      	adds	r6, #4
    9754:	3504      	adds	r5, #4
    9756:	3404      	adds	r4, #4
    9758:	e7e4      	b.n	9724 <flash_write_physical+0x10>
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:175
    return 0;  //成功执行
    975a:	2000      	movs	r0, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:176
}
    975c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/flash.c:172
            return 2;  //写入命令错误
    975e:	2002      	movs	r0, #2
    9760:	e7fc      	b.n	975c <flash_write_physical+0x48>
    9762:	46c0      	nop			; (mov r8, r8)
    9764:	40020000 	.word	0x40020000

00009768 <gpio_get_port_pin>:
gpio_get_port_pin():
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:348
//功能概要：将传进参数port_pin进行解析，得出具体端口号与引脚号，分别赋值给port与pin,返回。
//       （例：(PTB_NUM)|(9)解析为PORTB与9，并将其分别赋值给port与pin）。
//=====================================================================
void gpio_get_port_pin(uint16_t port_pin,uint8_t* port,uint8_t* pin)
{
	*port = (port_pin>>8);
    9768:	0a03      	lsrs	r3, r0, #8
    976a:	700b      	strb	r3, [r1, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:349
	*pin = port_pin;
    976c:	7010      	strb	r0, [r2, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:350
}
    976e:	4770      	bx	lr

00009770 <gpio_set>:
gpio_set():
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:67
{
    9770:	b530      	push	{r4, r5, lr}
    9772:	b083      	sub	sp, #12
    9774:	000d      	movs	r5, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:72
	gpio_get_port_pin(port_pin,&port,&pin);
    9776:	466b      	mov	r3, sp
    9778:	1ddc      	adds	r4, r3, #7
    977a:	1d9a      	adds	r2, r3, #6
    977c:	0021      	movs	r1, r4
    977e:	f7ff fff3 	bl	9768 <gpio_get_port_pin>
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:75
	gpio_ptr = GPIO_ARR[port];
    9782:	7823      	ldrb	r3, [r4, #0]
    9784:	009b      	lsls	r3, r3, #2
    9786:	4a0a      	ldr	r2, [pc, #40]	; (97b0 <gpio_set+0x40>)
    9788:	589b      	ldr	r3, [r3, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:78
	if(state == 1)
    978a:	2d01      	cmp	r5, #1
    978c:	d008      	beq.n	97a0 <gpio_set+0x30>
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:84
		BCLR(pin,GPIO_PDOR_REG(gpio_ptr));
    978e:	681a      	ldr	r2, [r3, #0]
    9790:	4669      	mov	r1, sp
    9792:	7988      	ldrb	r0, [r1, #6]
    9794:	2101      	movs	r1, #1
    9796:	4081      	lsls	r1, r0
    9798:	438a      	bics	r2, r1
    979a:	601a      	str	r2, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:86
}
    979c:	b003      	add	sp, #12
    979e:	bd30      	pop	{r4, r5, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:80
		BSET(pin,GPIO_PDOR_REG(gpio_ptr));
    97a0:	681a      	ldr	r2, [r3, #0]
    97a2:	4669      	mov	r1, sp
    97a4:	7988      	ldrb	r0, [r1, #6]
    97a6:	2101      	movs	r1, #1
    97a8:	4081      	lsls	r1, r0
    97aa:	430a      	orrs	r2, r1
    97ac:	601a      	str	r2, [r3, #0]
    97ae:	e7f5      	b.n	979c <gpio_set+0x2c>
    97b0:	0000ae74 	.word	0x0000ae74

000097b4 <gpio_init>:
gpio_init():
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:31
{
    97b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    97b6:	b085      	sub	sp, #20
    97b8:	0004      	movs	r4, r0
    97ba:	000f      	movs	r7, r1
    97bc:	9201      	str	r2, [sp, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:37
	gpio_get_port_pin(port_pin,&port,&pin);
    97be:	ab02      	add	r3, sp, #8
    97c0:	1d9e      	adds	r6, r3, #6
    97c2:	1ddd      	adds	r5, r3, #7
    97c4:	0032      	movs	r2, r6
    97c6:	0029      	movs	r1, r5
    97c8:	f7ff ffce 	bl	9768 <gpio_get_port_pin>
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:39
	port_ptr = PORT_ARR[port];        //获得PORT模块相应口基地址
    97cc:	782a      	ldrb	r2, [r5, #0]
    97ce:	0092      	lsls	r2, r2, #2
    97d0:	4b13      	ldr	r3, [pc, #76]	; (9820 <gpio_init+0x6c>)
    97d2:	58d3      	ldr	r3, [r2, r3]
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:40
	gpio_ptr = GPIO_ARR[port];        //获得GPIO模块相应口基地址
    97d4:	4913      	ldr	r1, [pc, #76]	; (9824 <gpio_init+0x70>)
    97d6:	5850      	ldr	r0, [r2, r1]
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:43
	PORT_PCR_REG(port_ptr,pin) &= ~PORT_PCR_MUX_MASK;//置D10-D8=000
    97d8:	7832      	ldrb	r2, [r6, #0]
    97da:	0092      	lsls	r2, r2, #2
    97dc:	58d1      	ldr	r1, [r2, r3]
    97de:	4d12      	ldr	r5, [pc, #72]	; (9828 <gpio_init+0x74>)
    97e0:	4029      	ands	r1, r5
    97e2:	50d1      	str	r1, [r2, r3]
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:44
	PORT_PCR_REG(port_ptr,pin) |= PORT_PCR_MUX(1);//置D10-D8=001
    97e4:	7832      	ldrb	r2, [r6, #0]
    97e6:	0092      	lsls	r2, r2, #2
    97e8:	58d6      	ldr	r6, [r2, r3]
    97ea:	2180      	movs	r1, #128	; 0x80
    97ec:	0049      	lsls	r1, r1, #1
    97ee:	4331      	orrs	r1, r6
    97f0:	50d1      	str	r1, [r2, r3]
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:47
	if(dir == 1)  //输出引脚
    97f2:	2f01      	cmp	r7, #1
    97f4:	d008      	beq.n	9808 <gpio_init+0x54>
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:56
		BCLR(pin,GPIO_PDDR_REG(gpio_ptr));//数据方向寄存器的pin位=0，定义为输入
    97f6:	6943      	ldr	r3, [r0, #20]
    97f8:	aa02      	add	r2, sp, #8
    97fa:	7991      	ldrb	r1, [r2, #6]
    97fc:	2201      	movs	r2, #1
    97fe:	408a      	lsls	r2, r1
    9800:	4393      	bics	r3, r2
    9802:	6143      	str	r3, [r0, #20]
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:58
}
    9804:	b005      	add	sp, #20
    9806:	bdf0      	pop	{r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:50
		BSET(pin,GPIO_PDDR_REG(gpio_ptr));
    9808:	6943      	ldr	r3, [r0, #20]
    980a:	aa02      	add	r2, sp, #8
    980c:	7991      	ldrb	r1, [r2, #6]
    980e:	2201      	movs	r2, #1
    9810:	408a      	lsls	r2, r1
    9812:	4313      	orrs	r3, r2
    9814:	6143      	str	r3, [r0, #20]
D:\app_for_qianrushi\exam\16\Debug/srcc/gpio.c:52
		gpio_set(port_pin,state);   
    9816:	9901      	ldr	r1, [sp, #4]
    9818:	0020      	movs	r0, r4
    981a:	f7ff ffa9 	bl	9770 <gpio_set>
    981e:	e7f1      	b.n	9804 <gpio_init+0x50>
    9820:	0000ae88 	.word	0x0000ae88
    9824:	0000ae74 	.word	0x0000ae74
    9828:	fffff8ff 	.word	0xfffff8ff

0000982c <wdog_start>:
wdog_start():
D:\app_for_qianrushi\exam\16\Debug/srcc/wdog.c:18
//选择总线时钟，复位时间可以是0.17ms、1.36ms、5.46ms
//选择LPO时钟，复位时间可以是32ms、256ms、1024ms
//=========================================================================
void wdog_start(uint32_t timeout)
{
    switch(timeout)
    982c:	2801      	cmp	r0, #1
    982e:	d009      	beq.n	9844 <wdog_start+0x18>
    9830:	2802      	cmp	r0, #2
    9832:	d00f      	beq.n	9854 <wdog_start+0x28>
D:\app_for_qianrushi\exam\16\Debug/srcc/wdog.c:28
        case TIMEOUT2:
            SIM_COPC |= SIM_COPC_COPT(2);
            break;
        case TIMEOUT3:
        default:
            SIM_COPC |= SIM_COPC_COPT(3);
    9834:	490b      	ldr	r1, [pc, #44]	; (9864 <wdog_start+0x38>)
    9836:	2288      	movs	r2, #136	; 0x88
    9838:	0152      	lsls	r2, r2, #5
    983a:	588b      	ldr	r3, [r1, r2]
    983c:	200c      	movs	r0, #12
    983e:	4303      	orrs	r3, r0
    9840:	508b      	str	r3, [r1, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/wdog.c:31
            break;
    }
}
    9842:	e006      	b.n	9852 <wdog_start+0x26>
D:\app_for_qianrushi\exam\16\Debug/srcc/wdog.c:21
            SIM_COPC |= SIM_COPC_COPT(1);
    9844:	4907      	ldr	r1, [pc, #28]	; (9864 <wdog_start+0x38>)
    9846:	2288      	movs	r2, #136	; 0x88
    9848:	0152      	lsls	r2, r2, #5
    984a:	588b      	ldr	r3, [r1, r2]
    984c:	2004      	movs	r0, #4
    984e:	4303      	orrs	r3, r0
    9850:	508b      	str	r3, [r1, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/wdog.c:31
}
    9852:	4770      	bx	lr
D:\app_for_qianrushi\exam\16\Debug/srcc/wdog.c:24
            SIM_COPC |= SIM_COPC_COPT(2);
    9854:	4903      	ldr	r1, [pc, #12]	; (9864 <wdog_start+0x38>)
    9856:	2288      	movs	r2, #136	; 0x88
    9858:	0152      	lsls	r2, r2, #5
    985a:	588b      	ldr	r3, [r1, r2]
    985c:	2008      	movs	r0, #8
    985e:	4303      	orrs	r3, r0
    9860:	508b      	str	r3, [r1, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/wdog.c:25
            break;
    9862:	e7f6      	b.n	9852 <wdog_start+0x26>
    9864:	40047000 	.word	0x40047000

00009868 <wdog_feed>:
wdog_feed():
D:\app_for_qianrushi\exam\16\Debug/srcc/wdog.c:51
//函数返回：无
//复位序列：先写0x55，后写0xAA
//=========================================================================
void wdog_feed(void)
{
    SIM_SRVCOP = 0x55;
    9868:	4a03      	ldr	r2, [pc, #12]	; (9878 <wdog_feed+0x10>)
    986a:	4b04      	ldr	r3, [pc, #16]	; (987c <wdog_feed+0x14>)
    986c:	2155      	movs	r1, #85	; 0x55
    986e:	50d1      	str	r1, [r2, r3]
D:\app_for_qianrushi\exam\16\Debug/srcc/wdog.c:52
    SIM_SRVCOP = 0xAA;
    9870:	3155      	adds	r1, #85	; 0x55
    9872:	50d1      	str	r1, [r2, r3]
D:\app_for_qianrushi\exam\16\Debug/srcc/wdog.c:53
}
    9874:	4770      	bx	lr
    9876:	46c0      	nop			; (mov r8, r8)
    9878:	40047000 	.word	0x40047000
    987c:	00001104 	.word	0x00001104

00009880 <spi_init>:
spi_init():
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:23
//       CPHA：CPHA=0相位为0； CPHA=1相位为1；
//函数返回：无
//=====================================================================
void spi_init(uint8_t No,uint8_t MSTR,uint16_t BaudRate,\
uint8_t CPOL,uint8_t CPHA)
{
    9880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9882:	000d      	movs	r5, r1
    9884:	0014      	movs	r4, r2
    9886:	001f      	movs	r7, r3
    9888:	ab06      	add	r3, sp, #24
    988a:	781e      	ldrb	r6, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:27
    uint8_t BaudRate_Mode;
    uint8_t BaudRate_High;
    uint8_t BaudRate_Low;
    if(No<0||No>1)   No=0;    //如果SPI号参数错误则强制选择 0号模块
    988c:	2801      	cmp	r0, #1
    988e:	d802      	bhi.n	9896 <spi_init+0x16>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:28
    if(No==0)                         //初始化SPI0功能
    9890:	2800      	cmp	r0, #0
    9892:	d000      	beq.n	9896 <spi_init+0x16>
    9894:	e076      	b.n	9984 <spi_init+0x104>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:30
    {
        BSET(SIM_SCGC4_SPI0_SHIFT,SIM_SCGC4);   //打开SPI0模块时钟。
    9896:	4978      	ldr	r1, [pc, #480]	; (9a78 <spi_init+0x1f8>)
    9898:	4a78      	ldr	r2, [pc, #480]	; (9a7c <spi_init+0x1fc>)
    989a:	5888      	ldr	r0, [r1, r2]
    989c:	2380      	movs	r3, #128	; 0x80
    989e:	03db      	lsls	r3, r3, #15
    98a0:	4303      	orrs	r3, r0
    98a2:	508b      	str	r3, [r1, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:32
        //引脚复用为SPI0功能
        PORTC_PCR4=(0|PORT_PCR_MUX(0x02));        //选择PTC4的SS功能
    98a4:	4b76      	ldr	r3, [pc, #472]	; (9a80 <spi_init+0x200>)
    98a6:	2280      	movs	r2, #128	; 0x80
    98a8:	0092      	lsls	r2, r2, #2
    98aa:	611a      	str	r2, [r3, #16]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:33
        PORTC_PCR5=(0|PORT_PCR_MUX(0x02));        //选择PTC5的SCK功能
    98ac:	615a      	str	r2, [r3, #20]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:34
        PORTC_PCR6=(0|PORT_PCR_MUX(0x02));        //选择PTC6的MOSI功能
    98ae:	619a      	str	r2, [r3, #24]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:35
        PORTC_PCR7=(0|PORT_PCR_MUX(0x02));        //选择PTC7的MIOS功能
    98b0:	61da      	str	r2, [r3, #28]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:36
        wdog_feed();
    98b2:	f7ff ffd9 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:38
        
        SPI0_C1=0x00;                           //SPI控制寄存器1清零
    98b6:	4b73      	ldr	r3, [pc, #460]	; (9a84 <spi_init+0x204>)
    98b8:	2200      	movs	r2, #0
    98ba:	70da      	strb	r2, [r3, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:39
        BSET(SPI_C1_SPE_SHIFT,SPI0_C1);         //使能SPI模块
    98bc:	78da      	ldrb	r2, [r3, #3]
    98be:	2140      	movs	r1, #64	; 0x40
    98c0:	430a      	orrs	r2, r1
    98c2:	70da      	strb	r2, [r3, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:43
        
        //MSTR=1为主机模式；
        //MSTR=0为从机模式（因MSTR初始值为0，无需更改）
        (MSTR==1)?BSET(SPI_C1_MSTR_SHIFT,SPI0_C1):\
    98c4:	2d01      	cmp	r5, #1
    98c6:	d02d      	beq.n	9924 <spi_init+0xa4>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:44 (discriminator 2)
        BSET(SPI_C1_SPIE_SHIFT,SPI0_C1);
    98c8:	4a6e      	ldr	r2, [pc, #440]	; (9a84 <spi_init+0x204>)
    98ca:	78d3      	ldrb	r3, [r2, #3]
    98cc:	2180      	movs	r1, #128	; 0x80
    98ce:	4249      	negs	r1, r1
    98d0:	430b      	orrs	r3, r1
    98d2:	b2db      	uxtb	r3, r3
    98d4:	70d3      	strb	r3, [r2, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:47
        
        //时钟极性配置，CPOL=0，平时时钟为高电平，反之CPOL=1，平时时钟为低电平
        (0==CPOL)?BCLR(SPI_C1_CPOL_SHIFT,SPI0_C1):\
    98d6:	2f00      	cmp	r7, #0
    98d8:	d12a      	bne.n	9930 <spi_init+0xb0>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:47 (discriminator 1)
    98da:	4a6a      	ldr	r2, [pc, #424]	; (9a84 <spi_init+0x204>)
    98dc:	78d3      	ldrb	r3, [r2, #3]
    98de:	2108      	movs	r1, #8
    98e0:	438b      	bics	r3, r1
    98e2:	70d3      	strb	r3, [r2, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:51
        BSET(SPI_C1_CPOL_SHIFT,SPI0_C1);
        
        //时钟相位CPHA
        (0 == CPHA)?BCLR(SPI_C1_CPHA_SHIFT,SPI0_C1):\
    98e4:	2e00      	cmp	r6, #0
    98e6:	d129      	bne.n	993c <spi_init+0xbc>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:51 (discriminator 1)
    98e8:	4a66      	ldr	r2, [pc, #408]	; (9a84 <spi_init+0x204>)
    98ea:	78d3      	ldrb	r3, [r2, #3]
    98ec:	2104      	movs	r1, #4
    98ee:	438b      	bics	r3, r1
    98f0:	70d3      	strb	r3, [r2, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:53
        BSET(SPI_C1_CPHA_SHIFT,SPI0_C1);
        wdog_feed();
    98f2:	f7ff ffb9 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:55
        ////SSOE为1,MODFEN为1，配置本模块为自动SS输出
        BSET(SPI_C1_SSOE_SHIFT,SPI0_C1);
    98f6:	4b63      	ldr	r3, [pc, #396]	; (9a84 <spi_init+0x204>)
    98f8:	78da      	ldrb	r2, [r3, #3]
    98fa:	2102      	movs	r1, #2
    98fc:	430a      	orrs	r2, r1
    98fe:	70da      	strb	r2, [r3, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:57
        //对SPI0的C1寄存器配置为主机模式、从机选择自动模式并使能SPI0模块。
        SPI0_C2=0x00;
    9900:	2200      	movs	r2, #0
    9902:	709a      	strb	r2, [r3, #2]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:58
        if(MSTR == 1 )  //主机模式
    9904:	2d01      	cmp	r5, #1
    9906:	d01f      	beq.n	9948 <spi_init+0xc8>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:60
        BSET(SPI_C2_MODFEN_SHIFT,SPI0_C2);
        SPI0_BR = 0x00U;//波特率寄存器清零
    9908:	4b5e      	ldr	r3, [pc, #376]	; (9a84 <spi_init+0x204>)
    990a:	2200      	movs	r2, #0
    990c:	705a      	strb	r2, [r3, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:64
        //重新设置波特率
        BaudRate_High=0;
        BaudRate_Low=0;
        BaudRate_Mode=24000/BaudRate;
    990e:	0021      	movs	r1, r4
    9910:	485d      	ldr	r0, [pc, #372]	; (9a88 <spi_init+0x208>)
    9912:	f7fd fa53 	bl	6dbc <__divsi3>
    9916:	b2c4      	uxtb	r4, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:65
        wdog_feed();
    9918:	f7ff ffa6 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:66
        if(BaudRate_Mode <= 8)
    991c:	2c08      	cmp	r4, #8
    991e:	d919      	bls.n	9954 <spi_init+0xd4>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:63
        BaudRate_Low=0;
    9920:	2500      	movs	r5, #0
    9922:	e023      	b.n	996c <spi_init+0xec>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:43 (discriminator 1)
        (MSTR==1)?BSET(SPI_C1_MSTR_SHIFT,SPI0_C1):\
    9924:	001a      	movs	r2, r3
    9926:	78db      	ldrb	r3, [r3, #3]
    9928:	2110      	movs	r1, #16
    992a:	430b      	orrs	r3, r1
    992c:	70d3      	strb	r3, [r2, #3]
    992e:	e7d2      	b.n	98d6 <spi_init+0x56>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:48 (discriminator 2)
        BSET(SPI_C1_CPOL_SHIFT,SPI0_C1);
    9930:	4a54      	ldr	r2, [pc, #336]	; (9a84 <spi_init+0x204>)
    9932:	78d3      	ldrb	r3, [r2, #3]
    9934:	2108      	movs	r1, #8
    9936:	430b      	orrs	r3, r1
    9938:	70d3      	strb	r3, [r2, #3]
    993a:	e7d3      	b.n	98e4 <spi_init+0x64>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:52 (discriminator 2)
        BSET(SPI_C1_CPHA_SHIFT,SPI0_C1);
    993c:	4a51      	ldr	r2, [pc, #324]	; (9a84 <spi_init+0x204>)
    993e:	78d3      	ldrb	r3, [r2, #3]
    9940:	2104      	movs	r1, #4
    9942:	430b      	orrs	r3, r1
    9944:	70d3      	strb	r3, [r2, #3]
    9946:	e7d4      	b.n	98f2 <spi_init+0x72>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:59
        BSET(SPI_C2_MODFEN_SHIFT,SPI0_C2);
    9948:	001a      	movs	r2, r3
    994a:	789b      	ldrb	r3, [r3, #2]
    994c:	2110      	movs	r1, #16
    994e:	430b      	orrs	r3, r1
    9950:	7093      	strb	r3, [r2, #2]
    9952:	e7d9      	b.n	9908 <spi_init+0x88>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:68
        {
            SPI0_BR = (BaudRate_Mode - 1) << 4;
    9954:	3c01      	subs	r4, #1
    9956:	b2e3      	uxtb	r3, r4
    9958:	011b      	lsls	r3, r3, #4
    995a:	b2db      	uxtb	r3, r3
    995c:	4a49      	ldr	r2, [pc, #292]	; (9a84 <spi_init+0x204>)
    995e:	7053      	strb	r3, [r2, #1]
    9960:	e00f      	b.n	9982 <spi_init+0x102>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:75
        else
        {
            
            while(BaudRate_Mode / 2 > 8)
            {
                wdog_feed();
    9962:	f7ff ff81 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:76
                BaudRate_Low++;
    9966:	3501      	adds	r5, #1
    9968:	b2ed      	uxtb	r5, r5
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:77
                BaudRate_Mode=BaudRate_Mode/2;
    996a:	0864      	lsrs	r4, r4, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:73
            while(BaudRate_Mode / 2 > 8)
    996c:	2c11      	cmp	r4, #17
    996e:	d8f8      	bhi.n	9962 <spi_init+0xe2>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:79
            }
            BaudRate_High=--BaudRate_Mode;
    9970:	3c01      	subs	r4, #1
    9972:	b2e4      	uxtb	r4, r4
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:80
            SPI0_BR=BaudRate_High<<4;//数值赋给SPI0_BR的SPPR的D6D5D4位
    9974:	0124      	lsls	r4, r4, #4
    9976:	b2e4      	uxtb	r4, r4
    9978:	4b42      	ldr	r3, [pc, #264]	; (9a84 <spi_init+0x204>)
    997a:	705c      	strb	r4, [r3, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:81
            SPI0_BR|=BaudRate_Low;//赋值给SPI0_BR的SPR的 D2D1D0位
    997c:	785a      	ldrb	r2, [r3, #1]
    997e:	4315      	orrs	r5, r2
    9980:	705d      	strb	r5, [r3, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:140
            BaudRate_High=--BaudRate_Mode;
            SPI0_BR=BaudRate_High<<4;//数值赋给SPI0_BR的SPPR的D6D5D4位
            SPI0_BR|=BaudRate_Low;//赋值给SPI0_BR的SPR的 D2D1D0位
        }
    }
}
    9982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:86
        wdog_feed();
    9984:	f7ff ff70 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:87
        BSET(SIM_SCGC4_SPI1_SHIFT,SIM_SCGC4);   //打开SPI1模块时钟。
    9988:	493b      	ldr	r1, [pc, #236]	; (9a78 <spi_init+0x1f8>)
    998a:	4a3c      	ldr	r2, [pc, #240]	; (9a7c <spi_init+0x1fc>)
    998c:	5888      	ldr	r0, [r1, r2]
    998e:	2380      	movs	r3, #128	; 0x80
    9990:	041b      	lsls	r3, r3, #16
    9992:	4303      	orrs	r3, r0
    9994:	508b      	str	r3, [r1, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:89
        PORTD_PCR4=(0|PORT_PCR_MUX(0x02));        //选择PTD4的SS功能
    9996:	4b3d      	ldr	r3, [pc, #244]	; (9a8c <spi_init+0x20c>)
    9998:	2280      	movs	r2, #128	; 0x80
    999a:	0092      	lsls	r2, r2, #2
    999c:	611a      	str	r2, [r3, #16]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:90
        PORTD_PCR5=(0|PORT_PCR_MUX(0x02));        //选择PTD5的SCK功能
    999e:	615a      	str	r2, [r3, #20]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:91
        PORTD_PCR6=(0|PORT_PCR_MUX(0x02));        //选择PTD6的MOSI功能
    99a0:	619a      	str	r2, [r3, #24]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:92
        PORTD_PCR7=(0|PORT_PCR_MUX(0x02));        //选择PTD7的MIOS功能
    99a2:	61da      	str	r2, [r3, #28]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:93
        wdog_feed();
    99a4:	f7ff ff60 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:94
        SPI1_C1=0x00;                     //SPI控制寄存器1清零
    99a8:	4b39      	ldr	r3, [pc, #228]	; (9a90 <spi_init+0x210>)
    99aa:	2200      	movs	r2, #0
    99ac:	70da      	strb	r2, [r3, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:95
        BSET(SPI_C1_SPE_SHIFT,SPI1_C1);   //使能SPI模块
    99ae:	78da      	ldrb	r2, [r3, #3]
    99b0:	2140      	movs	r1, #64	; 0x40
    99b2:	430a      	orrs	r2, r1
    99b4:	70da      	strb	r2, [r3, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:98
        (MSTR==1)?BSET(SPI_C1_MSTR_SHIFT,SPI1_C1):\
    99b6:	2d01      	cmp	r5, #1
    99b8:	d02d      	beq.n	9a16 <spi_init+0x196>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:99 (discriminator 2)
        BSET(SPI_C1_SPIE_SHIFT,SPI1_C1);
    99ba:	4a35      	ldr	r2, [pc, #212]	; (9a90 <spi_init+0x210>)
    99bc:	78d3      	ldrb	r3, [r2, #3]
    99be:	2180      	movs	r1, #128	; 0x80
    99c0:	4249      	negs	r1, r1
    99c2:	430b      	orrs	r3, r1
    99c4:	b2db      	uxtb	r3, r3
    99c6:	70d3      	strb	r3, [r2, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:102
        (0 == CPOL)?BCLR(SPI_C1_CPOL_SHIFT,SPI1_C1):\
    99c8:	2f00      	cmp	r7, #0
    99ca:	d12a      	bne.n	9a22 <spi_init+0x1a2>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:102 (discriminator 1)
    99cc:	4a30      	ldr	r2, [pc, #192]	; (9a90 <spi_init+0x210>)
    99ce:	78d3      	ldrb	r3, [r2, #3]
    99d0:	2108      	movs	r1, #8
    99d2:	438b      	bics	r3, r1
    99d4:	70d3      	strb	r3, [r2, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:107
        (0 == CPHA)?BCLR(SPI_C1_CPHA_SHIFT,SPI1_C1): \
    99d6:	2e00      	cmp	r6, #0
    99d8:	d129      	bne.n	9a2e <spi_init+0x1ae>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:107 (discriminator 1)
    99da:	4a2d      	ldr	r2, [pc, #180]	; (9a90 <spi_init+0x210>)
    99dc:	78d3      	ldrb	r3, [r2, #3]
    99de:	2104      	movs	r1, #4
    99e0:	438b      	bics	r3, r1
    99e2:	70d3      	strb	r3, [r2, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:109
        wdog_feed();
    99e4:	f7ff ff40 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:110
        BSET(SPI_C1_SSOE_SHIFT,SPI1_C1);//SSOE为1,MODFEN为1，配置本模块为自动SS输出
    99e8:	4b29      	ldr	r3, [pc, #164]	; (9a90 <spi_init+0x210>)
    99ea:	78da      	ldrb	r2, [r3, #3]
    99ec:	2102      	movs	r1, #2
    99ee:	430a      	orrs	r2, r1
    99f0:	70da      	strb	r2, [r3, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:114
        SPI1_C2 = 0x00U;
    99f2:	2200      	movs	r2, #0
    99f4:	709a      	strb	r2, [r3, #2]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:115
        if(MSTR == 1 )  //主机模式
    99f6:	2d01      	cmp	r5, #1
    99f8:	d01f      	beq.n	9a3a <spi_init+0x1ba>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:117
        SPI1_BR = 0x00U;
    99fa:	4b25      	ldr	r3, [pc, #148]	; (9a90 <spi_init+0x210>)
    99fc:	2200      	movs	r2, #0
    99fe:	705a      	strb	r2, [r3, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:121
        BaudRate_Mode=24000/BaudRate;   //取除数用于寄存器中数据计算
    9a00:	0021      	movs	r1, r4
    9a02:	4821      	ldr	r0, [pc, #132]	; (9a88 <spi_init+0x208>)
    9a04:	f7fd f9da 	bl	6dbc <__divsi3>
    9a08:	b2c4      	uxtb	r4, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:122
        wdog_feed();
    9a0a:	f7ff ff2d 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:123
        if(BaudRate_Mode <= 8)
    9a0e:	2c08      	cmp	r4, #8
    9a10:	d919      	bls.n	9a46 <spi_init+0x1c6>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:120
        BaudRate_Low=0;
    9a12:	2500      	movs	r5, #0
    9a14:	e023      	b.n	9a5e <spi_init+0x1de>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:98 (discriminator 1)
        (MSTR==1)?BSET(SPI_C1_MSTR_SHIFT,SPI1_C1):\
    9a16:	001a      	movs	r2, r3
    9a18:	78db      	ldrb	r3, [r3, #3]
    9a1a:	2110      	movs	r1, #16
    9a1c:	430b      	orrs	r3, r1
    9a1e:	70d3      	strb	r3, [r2, #3]
    9a20:	e7d2      	b.n	99c8 <spi_init+0x148>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:103 (discriminator 2)
        BSET(SPI_C1_CPOL_SHIFT,SPI1_C1);
    9a22:	4a1b      	ldr	r2, [pc, #108]	; (9a90 <spi_init+0x210>)
    9a24:	78d3      	ldrb	r3, [r2, #3]
    9a26:	2108      	movs	r1, #8
    9a28:	430b      	orrs	r3, r1
    9a2a:	70d3      	strb	r3, [r2, #3]
    9a2c:	e7d3      	b.n	99d6 <spi_init+0x156>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:108 (discriminator 2)
        BSET(SPI_C1_CPHA_SHIFT,SPI1_C1);
    9a2e:	4a18      	ldr	r2, [pc, #96]	; (9a90 <spi_init+0x210>)
    9a30:	78d3      	ldrb	r3, [r2, #3]
    9a32:	2104      	movs	r1, #4
    9a34:	430b      	orrs	r3, r1
    9a36:	70d3      	strb	r3, [r2, #3]
    9a38:	e7d4      	b.n	99e4 <spi_init+0x164>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:116
        BSET(SPI_C2_MODFEN_SHIFT,SPI1_C2);
    9a3a:	001a      	movs	r2, r3
    9a3c:	789b      	ldrb	r3, [r3, #2]
    9a3e:	2110      	movs	r1, #16
    9a40:	430b      	orrs	r3, r1
    9a42:	7093      	strb	r3, [r2, #2]
    9a44:	e7d9      	b.n	99fa <spi_init+0x17a>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:125
            SPI0_BR = (BaudRate_Mode - 1) << 4;
    9a46:	3c01      	subs	r4, #1
    9a48:	b2e3      	uxtb	r3, r4
    9a4a:	011b      	lsls	r3, r3, #4
    9a4c:	b2db      	uxtb	r3, r3
    9a4e:	4a0d      	ldr	r2, [pc, #52]	; (9a84 <spi_init+0x204>)
    9a50:	7053      	strb	r3, [r2, #1]
    9a52:	e796      	b.n	9982 <spi_init+0x102>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:131
                wdog_feed();
    9a54:	f7ff ff08 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:132
                BaudRate_Low++;
    9a58:	3501      	adds	r5, #1
    9a5a:	b2ed      	uxtb	r5, r5
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:133
                BaudRate_Mode=BaudRate_Mode/2;
    9a5c:	0864      	lsrs	r4, r4, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:129
            while(BaudRate_Mode / 2 > 8)
    9a5e:	2c11      	cmp	r4, #17
    9a60:	d8f8      	bhi.n	9a54 <spi_init+0x1d4>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:135
            BaudRate_High=--BaudRate_Mode;
    9a62:	3c01      	subs	r4, #1
    9a64:	b2e3      	uxtb	r3, r4
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:136
            SPI0_BR=BaudRate_High<<4;//数值赋给SPI0_BR的SPPR的D6D5D4位
    9a66:	011b      	lsls	r3, r3, #4
    9a68:	b2db      	uxtb	r3, r3
    9a6a:	4a06      	ldr	r2, [pc, #24]	; (9a84 <spi_init+0x204>)
    9a6c:	7053      	strb	r3, [r2, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:137
            SPI0_BR|=BaudRate_Low;//赋值给SPI0_BR的SPR的 D2D1D0位
    9a6e:	7853      	ldrb	r3, [r2, #1]
    9a70:	431d      	orrs	r5, r3
    9a72:	7055      	strb	r5, [r2, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:140
}
    9a74:	e785      	b.n	9982 <spi_init+0x102>
    9a76:	46c0      	nop			; (mov r8, r8)
    9a78:	40047000 	.word	0x40047000
    9a7c:	00001034 	.word	0x00001034
    9a80:	4004b000 	.word	0x4004b000
    9a84:	40076000 	.word	0x40076000
    9a88:	00005dc0 	.word	0x00005dc0
    9a8c:	4004c000 	.word	0x4004c000
    9a90:	40077000 	.word	0x40077000

00009a94 <spi_send1>:
spi_send1():
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:152
//函数返回：0：发送失败；1：发送成功。
//=====================================================================
uint8_t spi_send1(uint8_t No,uint8_t data)
{
    uint32_t i;
    SPI_MemMapPtr baseadd=SPI_baseadd(No);
    9a94:	4b0a      	ldr	r3, [pc, #40]	; (9ac0 <spi_send1+0x2c>)
    9a96:	469c      	mov	ip, r3
    9a98:	4460      	add	r0, ip
    9a9a:	0300      	lsls	r0, r0, #12
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:153 (discriminator 1)
    while(!(SPI_S_REG(baseadd)&SPI_S_SPTEF_MASK));//等待发送缓冲区空闲
    9a9c:	7803      	ldrb	r3, [r0, #0]
    9a9e:	069b      	lsls	r3, r3, #26
    9aa0:	d5fc      	bpl.n	9a9c <spi_send1+0x8>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:154
    SPI_DL_REG(baseadd)=data;//数据寄存器接收数据
    9aa2:	7181      	strb	r1, [r0, #6]
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:155
    for(i=0;i<0xFFF0;i++)        //在一定时间内发送不能完成，则认为发送失败。
    9aa4:	2300      	movs	r3, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:155 (discriminator 1)
    9aa6:	4a07      	ldr	r2, [pc, #28]	; (9ac4 <spi_send1+0x30>)
    9aa8:	4293      	cmp	r3, r2
    9aaa:	d804      	bhi.n	9ab6 <spi_send1+0x22>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:157
    {
        if(SPI_S_REG(baseadd)&SPI_S_SPTEF_MASK)//判断发送缓冲区是否接到数据
    9aac:	7802      	ldrb	r2, [r0, #0]
    9aae:	0692      	lsls	r2, r2, #26
    9ab0:	d403      	bmi.n	9aba <spi_send1+0x26>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:155 (discriminator 2)
    for(i=0;i<0xFFF0;i++)        //在一定时间内发送不能完成，则认为发送失败。
    9ab2:	3301      	adds	r3, #1
    9ab4:	e7f7      	b.n	9aa6 <spi_send1+0x12>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:162
        {
            return(1);
        }
    }
    return(0);
    9ab6:	2000      	movs	r0, #0
    9ab8:	e000      	b.n	9abc <spi_send1+0x28>
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:159
            return(1);
    9aba:	2001      	movs	r0, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/spi.c:163
}
    9abc:	4770      	bx	lr
    9abe:	46c0      	nop			; (mov r8, r8)
    9ac0:	00040076 	.word	0x00040076
    9ac4:	0000ffef 	.word	0x0000ffef

00009ac8 <NumToStr_float>:
NumToStr_float():
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:61
//          m：转换后保留小数的位数；
//          buf：字符串转换完成后存储的位置；
//功能概要：将浮点数转为字符串
//=================================================================
char *NumToStr_float(float x,int num,char *buf)
{
    9ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9aca:	46ce      	mov	lr, r9
    9acc:	4647      	mov	r7, r8
    9ace:	b580      	push	{r7, lr}
    9ad0:	b085      	sub	sp, #20
    9ad2:	1c04      	adds	r4, r0, #0
    9ad4:	4689      	mov	r9, r1
    9ad6:	9203      	str	r2, [sp, #12]
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:74
    p = str;
    //
    sign = 0;
    count = 0;
    //
    if(x < 0)
    9ad8:	2100      	movs	r1, #0
    9ada:	f7fd faab 	bl	7034 <__aeabi_fcmplt>
    9ade:	2800      	cmp	r0, #0
    9ae0:	d10e      	bne.n	9b00 <NumToStr_float+0x38>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:71
    sign = 0;
    9ae2:	2300      	movs	r3, #0
    9ae4:	4698      	mov	r8, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:79
    {
        sign = 1;
        x = 0 - x;
    }
    sumI = (int)x;    //sumI is the part of int
    9ae6:	1c20      	adds	r0, r4, #0
    9ae8:	f7fd ffa6 	bl	7a38 <__aeabi_f2iz>
    9aec:	0007      	movs	r7, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:80
    sumF = x - sumI;  //sumF is the part of float
    9aee:	f7fd ffc3 	bl	7a78 <__aeabi_i2f>
    9af2:	1c01      	adds	r1, r0, #0
    9af4:	1c20      	adds	r0, r4, #0
    9af6:	f7fd fddb 	bl	76b0 <__aeabi_fsub>
    9afa:	1c04      	adds	r4, r0, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:68
    str = buf;
    9afc:	9d03      	ldr	r5, [sp, #12]
    9afe:	e008      	b.n	9b12 <NumToStr_float+0x4a>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:77
        x = 0 - x;
    9b00:	1c21      	adds	r1, r4, #0
    9b02:	2000      	movs	r0, #0
    9b04:	f7fd fdd4 	bl	76b0 <__aeabi_fsub>
    9b08:	1c04      	adds	r4, r0, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:76
        sign = 1;
    9b0a:	2301      	movs	r3, #1
    9b0c:	4698      	mov	r8, r3
    9b0e:	e7ea      	b.n	9ae6 <NumToStr_float+0x1e>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:84
    do
    {
        temp = sumI % 10;
        *(str++) = temp + '0';
    9b10:	0035      	movs	r5, r6
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:83 (discriminator 1)
        temp = sumI % 10;
    9b12:	210a      	movs	r1, #10
    9b14:	0038      	movs	r0, r7
    9b16:	f7fd fa37 	bl	6f88 <__aeabi_idivmod>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:84 (discriminator 1)
        *(str++) = temp + '0';
    9b1a:	1c6e      	adds	r6, r5, #1
    9b1c:	3130      	adds	r1, #48	; 0x30
    9b1e:	7029      	strb	r1, [r5, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:85 (discriminator 1)
    }while((sumI = sumI /10) != 0);
    9b20:	210a      	movs	r1, #10
    9b22:	0038      	movs	r0, r7
    9b24:	f7fd f94a 	bl	6dbc <__divsi3>
    9b28:	1e07      	subs	r7, r0, #0
    9b2a:	d1f1      	bne.n	9b10 <NumToStr_float+0x48>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:86
    if(sign == 1)
    9b2c:	4643      	mov	r3, r8
    9b2e:	2b01      	cmp	r3, #1
    9b30:	d002      	beq.n	9b38 <NumToStr_float+0x70>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:91
    {
        *(str++) = '-';
    }
    pp = str;
    pp--;
    9b32:	1e71      	subs	r1, r6, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:69
    p = str;
    9b34:	9a03      	ldr	r2, [sp, #12]
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:92
    while(p < pp)
    9b36:	e011      	b.n	9b5c <NumToStr_float+0x94>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:88
        *(str++) = '-';
    9b38:	1cae      	adds	r6, r5, #2
    9b3a:	332c      	adds	r3, #44	; 0x2c
    9b3c:	706b      	strb	r3, [r5, #1]
    9b3e:	e7f8      	b.n	9b32 <NumToStr_float+0x6a>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:94
    {
        *p = *p + *pp;
    9b40:	7813      	ldrb	r3, [r2, #0]
    9b42:	7808      	ldrb	r0, [r1, #0]
    9b44:	181b      	adds	r3, r3, r0
    9b46:	b2db      	uxtb	r3, r3
    9b48:	7013      	strb	r3, [r2, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:95
        *pp = *p - *pp;
    9b4a:	7808      	ldrb	r0, [r1, #0]
    9b4c:	1a1b      	subs	r3, r3, r0
    9b4e:	b2db      	uxtb	r3, r3
    9b50:	700b      	strb	r3, [r1, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:96
        *p = *p -*pp;
    9b52:	7810      	ldrb	r0, [r2, #0]
    9b54:	1ac3      	subs	r3, r0, r3
    9b56:	7013      	strb	r3, [r2, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:97
        p++;
    9b58:	3201      	adds	r2, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:98
        pp--;
    9b5a:	3901      	subs	r1, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:92
    while(p < pp)
    9b5c:	428a      	cmp	r2, r1
    9b5e:	d3ef      	bcc.n	9b40 <NumToStr_float+0x78>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:100
    }
    *(str++) = '.';     //point
    9b60:	1c75      	adds	r5, r6, #1
    9b62:	232e      	movs	r3, #46	; 0x2e
    9b64:	7033      	strb	r3, [r6, #0]
    9b66:	e000      	b.n	9b6a <NumToStr_float+0xa2>
    9b68:	0035      	movs	r5, r6
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:103
    do
    {
        temp = (int)(sumF*10);
    9b6a:	4918      	ldr	r1, [pc, #96]	; (9bcc <NumToStr_float+0x104>)
    9b6c:	1c20      	adds	r0, r4, #0
    9b6e:	f7fd fc6d 	bl	744c <__aeabi_fmul>
    9b72:	1c04      	adds	r4, r0, #0
    9b74:	f7fd ff60 	bl	7a38 <__aeabi_f2iz>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:104
        *(str++) = temp + '0';
    9b78:	1c6e      	adds	r6, r5, #1
    9b7a:	0003      	movs	r3, r0
    9b7c:	3330      	adds	r3, #48	; 0x30
    9b7e:	702b      	strb	r3, [r5, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:106

        if((++count) == num)
    9b80:	3701      	adds	r7, #1
    9b82:	454f      	cmp	r7, r9
    9b84:	d01a      	beq.n	9bbc <NumToStr_float+0xf4>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:109
            break;

        sumF = sumF*10 - temp;
    9b86:	f7fd ff77 	bl	7a78 <__aeabi_i2f>
    9b8a:	1c01      	adds	r1, r0, #0
    9b8c:	1c20      	adds	r0, r4, #0
    9b8e:	f7fd fd8f 	bl	76b0 <__aeabi_fsub>
    9b92:	1c04      	adds	r4, r0, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:111

    }while(!(sumF > -0.000001 && sumF < 0.000001));
    9b94:	f7ff fa20 	bl	8fd8 <__aeabi_f2d>
    9b98:	4a0d      	ldr	r2, [pc, #52]	; (9bd0 <NumToStr_float+0x108>)
    9b9a:	4b0e      	ldr	r3, [pc, #56]	; (9bd4 <NumToStr_float+0x10c>)
    9b9c:	9000      	str	r0, [sp, #0]
    9b9e:	9101      	str	r1, [sp, #4]
    9ba0:	f7fd fa22 	bl	6fe8 <__aeabi_dcmpgt>
    9ba4:	2800      	cmp	r0, #0
    9ba6:	d0df      	beq.n	9b68 <NumToStr_float+0xa0>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:111 (discriminator 1)
    9ba8:	4a09      	ldr	r2, [pc, #36]	; (9bd0 <NumToStr_float+0x108>)
    9baa:	4b0b      	ldr	r3, [pc, #44]	; (9bd8 <NumToStr_float+0x110>)
    9bac:	9800      	ldr	r0, [sp, #0]
    9bae:	9901      	ldr	r1, [sp, #4]
    9bb0:	f7fd fa06 	bl	6fc0 <__aeabi_dcmplt>
    9bb4:	2800      	cmp	r0, #0
    9bb6:	d101      	bne.n	9bbc <NumToStr_float+0xf4>
    9bb8:	0035      	movs	r5, r6
    9bba:	e7d6      	b.n	9b6a <NumToStr_float+0xa2>
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:112
    *str = '\0';
    9bbc:	2300      	movs	r3, #0
    9bbe:	706b      	strb	r3, [r5, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/NumToStr.c:114
    return buf;
}
    9bc0:	9803      	ldr	r0, [sp, #12]
    9bc2:	b005      	add	sp, #20
    9bc4:	bc0c      	pop	{r2, r3}
    9bc6:	4690      	mov	r8, r2
    9bc8:	4699      	mov	r9, r3
    9bca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9bcc:	41200000 	.word	0x41200000
    9bd0:	a0b5ed8d 	.word	0xa0b5ed8d
    9bd4:	beb0c6f7 	.word	0xbeb0c6f7
    9bd8:	3eb0c6f7 	.word	0x3eb0c6f7

00009bdc <Vectors_Init>:
Vectors_Init():
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:15
//参数说明：无
//功能概要：User对BIOS中断向量表的部分继承,构件库函数指针初始化
//修改信息：WYH，20200805，规范
//======================================================================
void  Vectors_Init()
{
    9bdc:	b580      	push	{r7, lr}
    9bde:	4f1d      	ldr	r7, [pc, #116]	; (9c54 <Vectors_Init+0x78>)
    9be0:	44bd      	add	sp, r7
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:19
    //有用户程序，编译本段代码
    #if (GEC_USER_SECTOR_START!=0)   
    //（1）若Flash倒数2扇区的前24字节为空，则写入设备序列号及软件版本号初值
    if(flash_isempty(MCU_SECTOR_NUM-1,24))
    9be2:	2118      	movs	r1, #24
    9be4:	203f      	movs	r0, #63	; 0x3f
    9be6:	f7ff fd2f 	bl	9648 <flash_isempty>
    9bea:	2800      	cmp	r0, #0
    9bec:	d12b      	bne.n	9c46 <Vectors_Init+0x6a>
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:28
    }
    //（2）继承BIOS的串口中断              
    void ** bios=MCU_FLASH_ADDR_START;   //向量表起始地址  
    uint32_t user[MCU_SECTORSIZE/4];     //向量表变量数组
    //读取USER中断向量表各中断处理程序地址赋给user数组
    flash_read_physical((uint8_t *)user,GEC_USER_SECTOR_START*
    9bee:	2280      	movs	r2, #128	; 0x80
    9bf0:	21d0      	movs	r1, #208	; 0xd0
    9bf2:	00d2      	lsls	r2, r2, #3
    9bf4:	01c9      	lsls	r1, r1, #7
    9bf6:	a802      	add	r0, sp, #8
    9bf8:	f7ff fd22 	bl	9640 <flash_read_physical>
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:32
    MCU_SECTORSIZE+MCU_FLASH_ADDR_START,MCU_SECTORSIZE);
    //判断USER中串口更新中断是否为BIOS对应中断地址。若是，则不作操作；否则修改
    //为BIOS对应中断地址
    if(user[BIOS_UART_UPDATE_IRQn] != (uint32_t)bios[BIOS_UART_UPDATE_IRQn])
    9bfc:	2378      	movs	r3, #120	; 0x78
    9bfe:	681b      	ldr	r3, [r3, #0]
    9c00:	9a20      	ldr	r2, [sp, #128]	; 0x80
    9c02:	429a      	cmp	r2, r3
    9c04:	d010      	beq.n	9c28 <Vectors_Init+0x4c>
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:35
    {
        //改变User中断向量表中BIOS_UART中断向量
        flash_erase(GEC_USER_SECTOR_START);
    9c06:	201a      	movs	r0, #26
    9c08:	f7ff fd50 	bl	96ac <flash_erase>
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:37
        //改USER中断向量表的BIOS程序写入串口的中断处理程序地址
        user[2]=(uint32_t)bios[2];     //【20200903】
    9c0c:	2308      	movs	r3, #8
    9c0e:	681b      	ldr	r3, [r3, #0]
    9c10:	9304      	str	r3, [sp, #16]
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:38
        user[BIOS_UART_UPDATE_IRQn]=(uint32_t)bios[BIOS_UART_UPDATE_IRQn];
    9c12:	2378      	movs	r3, #120	; 0x78
    9c14:	681b      	ldr	r3, [r3, #0]
    9c16:	9301      	str	r3, [sp, #4]
    9c18:	9320      	str	r3, [sp, #128]	; 0x80
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:39
        flash_write_physical(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
    9c1a:	2180      	movs	r1, #128	; 0x80
    9c1c:	20d0      	movs	r0, #208	; 0xd0
    9c1e:	aa02      	add	r2, sp, #8
    9c20:	00c9      	lsls	r1, r1, #3
    9c22:	01c0      	lsls	r0, r0, #7
    9c24:	f7ff fd76 	bl	9714 <flash_write_physical>
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:44
        MCU_FLASH_ADDR_START,MCU_SECTORSIZE,(uint8_t *)user);
    }
    
    //（3）中断向量表指针重定向到USER程序的中断向量表
    SCB->VTOR = (uint32_t)(GEC_USER_SECTOR_START*MCU_SECTORSIZE+
    9c28:	4b0b      	ldr	r3, [pc, #44]	; (9c58 <Vectors_Init+0x7c>)
    9c2a:	22d0      	movs	r2, #208	; 0xd0
    9c2c:	01d2      	lsls	r2, r2, #7
    9c2e:	609a      	str	r2, [r3, #8]
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:47
    MCU_FLASH_ADDR_START);  
    //（4）给component_fun赋值，SYSTEM_FUNCTION函数用
    component_fun=(void **)(MCU_FLASH_ADDR_START+
    9c30:	4b0a      	ldr	r3, [pc, #40]	; (9c5c <Vectors_Init+0x80>)
    9c32:	22e0      	movs	r2, #224	; 0xe0
    9c34:	0192      	lsls	r2, r2, #6
    9c36:	601a      	str	r2, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:50
    GEC_COMPONENT_LST_START*MCU_SECTORSIZE); 
    //（5）printf提示             
    printf("  【User提示】：将进入User的main()执行...\r\n");
    9c38:	4809      	ldr	r0, [pc, #36]	; (9c60 <Vectors_Init+0x84>)
    9c3a:	f001 f84d 	bl	acd8 <myprintf>
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:53
    
    #endif
}
    9c3e:	2381      	movs	r3, #129	; 0x81
    9c40:	00db      	lsls	r3, r3, #3
    9c42:	449d      	add	sp, r3
    9c44:	bd80      	pop	{r7, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/gec.c:21
        flash_write_physical((MCU_SECTOR_NUM-1)*MCU_SECTORSIZE+
    9c46:	20fc      	movs	r0, #252	; 0xfc
    9c48:	4a06      	ldr	r2, [pc, #24]	; (9c64 <Vectors_Init+0x88>)
    9c4a:	2118      	movs	r1, #24
    9c4c:	0200      	lsls	r0, r0, #8
    9c4e:	f7ff fd61 	bl	9714 <flash_write_physical>
    9c52:	e7cc      	b.n	9bee <Vectors_Init+0x12>
    9c54:	fffffbf8 	.word	0xfffffbf8
    9c58:	e000ed00 	.word	0xe000ed00
    9c5c:	20000430 	.word	0x20000430
    9c60:	0000aeb8 	.word	0x0000aeb8
    9c64:	0000ae9c 	.word	0x0000ae9c

00009c68 <uart_is_uartNo>:
uart_is_uartNo():
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:539
//参数说明：串口号uartNo  :UART_0、UART_1、UART_2
//功能概要：为程序健壮性而判断uartNo是否在串口数字范围内
//=====================================================================
uint8_t uart_is_uartNo(uint8_t uartNo)
{
    if(uartNo < UART_0 || uartNo > UART_2)
    9c68:	2802      	cmp	r0, #2
    9c6a:	d801      	bhi.n	9c70 <uart_is_uartNo+0x8>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:542
        return 0;
    else
        return 1;
    9c6c:	2001      	movs	r0, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:543
}
    9c6e:	4770      	bx	lr
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:540
        return 0;
    9c70:	2000      	movs	r0, #0
    9c72:	e7fc      	b.n	9c6e <uart_is_uartNo+0x6>

00009c74 <uart_init>:
uart_init():
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:24
{
    9c74:	b570      	push	{r4, r5, r6, lr}
    9c76:	0004      	movs	r4, r0
    9c78:	000d      	movs	r5, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:32
    if(!uart_is_uartNo(uartNo))
    9c7a:	f7ff fff5 	bl	9c68 <uart_is_uartNo>
    9c7e:	2800      	cmp	r0, #0
    9c80:	d02b      	beq.n	9cda <uart_init+0x66>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:38
    if(uartNo==0)
    9c82:	2c00      	cmp	r4, #0
    9c84:	d02a      	beq.n	9cdc <uart_init+0x68>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:92
    	switch (uartNo)
    9c86:	2c01      	cmp	r4, #1
    9c88:	d100      	bne.n	9c8c <uart_init+0x18>
    9c8a:	e06d      	b.n	9d68 <uart_init+0xf4>
    9c8c:	2c02      	cmp	r4, #2
    9c8e:	d100      	bne.n	9c92 <uart_init+0x1e>
    9c90:	e077      	b.n	9d82 <uart_init+0x10e>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:142
        UART_2h_1_2 = UART_ARR[uartNo-1]; //获得UART1、2模块相应口基地址
    9c92:	3c01      	subs	r4, #1
    9c94:	00a4      	lsls	r4, r4, #2
    9c96:	4b41      	ldr	r3, [pc, #260]	; (9d9c <uart_init+0x128>)
    9c98:	58e4      	ldr	r4, [r4, r3]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:145
        UART_C2_REG(UART_2h_1_2) &= ~(UART_C2_TE_MASK | UART_C2_RE_MASK);
    9c9a:	78e3      	ldrb	r3, [r4, #3]
    9c9c:	220c      	movs	r2, #12
    9c9e:	4393      	bics	r3, r2
    9ca0:	70e3      	strb	r3, [r4, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:150
        sbr = (uint16_t)((SystemCoreClock/2)/(baud_rate * 16));
    9ca2:	4b3f      	ldr	r3, [pc, #252]	; (9da0 <uart_init+0x12c>)
    9ca4:	6818      	ldr	r0, [r3, #0]
    9ca6:	0840      	lsrs	r0, r0, #1
    9ca8:	0129      	lsls	r1, r5, #4
    9caa:	f7fc fffd 	bl	6ca8 <__udivsi3>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:151
        temp = UART_BDH_REG(UART_2h_1_2) & ~(UART_BDH_SBR(0x1F));
    9cae:	7823      	ldrb	r3, [r4, #0]
    9cb0:	221f      	movs	r2, #31
    9cb2:	4393      	bics	r3, r2
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:152
        UART_BDH_REG(UART_2h_1_2) = temp |  UART_BDH_SBR(((sbr & 0x1F00) >> 8));
    9cb4:	1202      	asrs	r2, r0, #8
    9cb6:	211f      	movs	r1, #31
    9cb8:	400a      	ands	r2, r1
    9cba:	4313      	orrs	r3, r2
    9cbc:	7023      	strb	r3, [r4, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:153
        UART_BDL_REG(UART_2h_1_2) = (uint8_t)(sbr & UART_BDL_SBR_MASK);
    9cbe:	b2c0      	uxtb	r0, r0
    9cc0:	7060      	strb	r0, [r4, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:156
        UART_C1_REG(UART_2h_1_2)=0x00;
    9cc2:	2300      	movs	r3, #0
    9cc4:	70a3      	strb	r3, [r4, #2]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:157
        UART_C3_REG(UART_2h_1_2)=0x00;
    9cc6:	71a3      	strb	r3, [r4, #6]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:158
        UART_S2_REG(UART_2h_1_2)=0x00;
    9cc8:	7163      	strb	r3, [r4, #5]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:160
        UART_C2_REG(UART_2h_1_2) &= ~UART_C2_TIE_MASK;
    9cca:	78e3      	ldrb	r3, [r4, #3]
    9ccc:	227f      	movs	r2, #127	; 0x7f
    9cce:	4013      	ands	r3, r2
    9cd0:	70e3      	strb	r3, [r4, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:162
        UART_C2_REG(UART_2h_1_2)|= (UART_C2_TE_MASK | UART_C2_RE_MASK);
    9cd2:	78e3      	ldrb	r3, [r4, #3]
    9cd4:	220c      	movs	r2, #12
    9cd6:	4313      	orrs	r3, r2
    9cd8:	70e3      	strb	r3, [r4, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:164
}
    9cda:	bd70      	pop	{r4, r5, r6, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:41
        SIM_SOPT2 |= SIM_SOPT2_UART0SRC(0x1);
    9cdc:	4b31      	ldr	r3, [pc, #196]	; (9da4 <uart_init+0x130>)
    9cde:	4a32      	ldr	r2, [pc, #200]	; (9da8 <uart_init+0x134>)
    9ce0:	5898      	ldr	r0, [r3, r2]
    9ce2:	2180      	movs	r1, #128	; 0x80
    9ce4:	04c9      	lsls	r1, r1, #19
    9ce6:	4301      	orrs	r1, r0
    9ce8:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:42
        SIM_SOPT2 &= ~SIM_SOPT2_PLLFLLSEL_MASK;
    9cea:	5899      	ldr	r1, [r3, r2]
    9cec:	482f      	ldr	r0, [pc, #188]	; (9dac <uart_init+0x138>)
    9cee:	4001      	ands	r1, r0
    9cf0:	5099      	str	r1, [r3, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:48
            PORTE_PCR20 |= PORT_PCR_MUX(0x4);    //使能UART0_TXD
    9cf2:	492f      	ldr	r1, [pc, #188]	; (9db0 <uart_init+0x13c>)
    9cf4:	6d08      	ldr	r0, [r1, #80]	; 0x50
    9cf6:	2280      	movs	r2, #128	; 0x80
    9cf8:	00d2      	lsls	r2, r2, #3
    9cfa:	4310      	orrs	r0, r2
    9cfc:	6508      	str	r0, [r1, #80]	; 0x50
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:49
            PORTE_PCR21 |= PORT_PCR_MUX(0x4);    //使能UART0_RXD
    9cfe:	6d48      	ldr	r0, [r1, #84]	; 0x54
    9d00:	4310      	orrs	r0, r2
    9d02:	6548      	str	r0, [r1, #84]	; 0x54
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:66
        SIM_SCGC4 |= SIM_SCGC4_UART0_MASK;    //启动串口0时钟
    9d04:	492b      	ldr	r1, [pc, #172]	; (9db4 <uart_init+0x140>)
    9d06:	5858      	ldr	r0, [r3, r1]
    9d08:	4302      	orrs	r2, r0
    9d0a:	505a      	str	r2, [r3, r1]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:69
        UART0_C2_REG(UART_2h_0) &= ~(UART0_C2_TE_MASK | UART0_C2_RE_MASK);
    9d0c:	4c2a      	ldr	r4, [pc, #168]	; (9db8 <uart_init+0x144>)
    9d0e:	78e3      	ldrb	r3, [r4, #3]
    9d10:	220c      	movs	r2, #12
    9d12:	4393      	bics	r3, r2
    9d14:	70e3      	strb	r3, [r4, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:72
        sbr = (uint16_t)((SystemCoreClock)/(baud_rate * 16));
    9d16:	0129      	lsls	r1, r5, #4
    9d18:	4b21      	ldr	r3, [pc, #132]	; (9da0 <uart_init+0x12c>)
    9d1a:	6818      	ldr	r0, [r3, #0]
    9d1c:	f7fc ffc4 	bl	6ca8 <__udivsi3>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:73
        temp = UART0_BDH_REG(UART_2h_0) & ~(UART0_BDH_SBR(0x1F));
    9d20:	7823      	ldrb	r3, [r4, #0]
    9d22:	221f      	movs	r2, #31
    9d24:	4393      	bics	r3, r2
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:74
        UART0_BDH_REG(UART_2h_0) = temp | UART0_BDH_SBR(((sbr & 0x1F00) >> 8));
    9d26:	1202      	asrs	r2, r0, #8
    9d28:	211f      	movs	r1, #31
    9d2a:	400a      	ands	r2, r1
    9d2c:	4313      	orrs	r3, r2
    9d2e:	7023      	strb	r3, [r4, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:75
        UART0_BDL_REG(UART_2h_0) = (uint8_t)(sbr & UART0_BDL_SBR_MASK);
    9d30:	b2c0      	uxtb	r0, r0
    9d32:	7060      	strb	r0, [r4, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:78
        UART0_C4_REG(UART_2h_0) = 0x0F;
    9d34:	230f      	movs	r3, #15
    9d36:	72a3      	strb	r3, [r4, #10]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:79
        UART0_C1_REG(UART_2h_0) = 0x00;
    9d38:	2300      	movs	r3, #0
    9d3a:	70a3      	strb	r3, [r4, #2]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:80
        UART0_C3_REG(UART_2h_0) = 0x00;
    9d3c:	71a3      	strb	r3, [r4, #6]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:81
        UART0_MA1_REG(UART_2h_0) = 0x00;
    9d3e:	7223      	strb	r3, [r4, #8]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:82
        UART0_MA2_REG(UART_2h_0) = 0x00;
    9d40:	7263      	strb	r3, [r4, #9]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:83
        UART0_S1_REG(UART_2h_0) |= 0x1F;
    9d42:	7923      	ldrb	r3, [r4, #4]
    9d44:	221f      	movs	r2, #31
    9d46:	4313      	orrs	r3, r2
    9d48:	7123      	strb	r3, [r4, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:84
        UART0_S2_REG(UART_2h_0) |= 0xC0;
    9d4a:	7963      	ldrb	r3, [r4, #5]
    9d4c:	2240      	movs	r2, #64	; 0x40
    9d4e:	4252      	negs	r2, r2
    9d50:	4313      	orrs	r3, r2
    9d52:	b2db      	uxtb	r3, r3
    9d54:	7163      	strb	r3, [r4, #5]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:86
        UART0_C2_REG(UART_2h_0) &= ~UART0_C2_TIE_MASK;
    9d56:	78e3      	ldrb	r3, [r4, #3]
    9d58:	32bf      	adds	r2, #191	; 0xbf
    9d5a:	4013      	ands	r3, r2
    9d5c:	70e3      	strb	r3, [r4, #3]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:88
        UART0_C2_REG(UART_2h_0) |= (UART0_C2_TE_MASK | UART0_C2_RE_MASK);
    9d5e:	78e3      	ldrb	r3, [r4, #3]
    9d60:	220c      	movs	r2, #12
    9d62:	4313      	orrs	r3, r2
    9d64:	70e3      	strb	r3, [r4, #3]
    9d66:	e7b8      	b.n	9cda <uart_init+0x66>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:99
    			PORTE_PCR0 = PORT_PCR_MUX(0x3);    //使能UART1_TXD
    9d68:	4b11      	ldr	r3, [pc, #68]	; (9db0 <uart_init+0x13c>)
    9d6a:	22c0      	movs	r2, #192	; 0xc0
    9d6c:	0092      	lsls	r2, r2, #2
    9d6e:	601a      	str	r2, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:100
    			PORTE_PCR1 = PORT_PCR_MUX(0x3);    //使能UART1_RXD
    9d70:	605a      	str	r2, [r3, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:113
    		SIM_SCGC4 |= SIM_SCGC4_UART1_MASK; //启动串口1时钟
    9d72:	490c      	ldr	r1, [pc, #48]	; (9da4 <uart_init+0x130>)
    9d74:	4a0f      	ldr	r2, [pc, #60]	; (9db4 <uart_init+0x140>)
    9d76:	5888      	ldr	r0, [r1, r2]
    9d78:	2380      	movs	r3, #128	; 0x80
    9d7a:	011b      	lsls	r3, r3, #4
    9d7c:	4303      	orrs	r3, r0
    9d7e:	508b      	str	r3, [r1, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:114
    		break;
    9d80:	e787      	b.n	9c92 <uart_init+0x1e>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:120
    				PORTE_PCR16 = PORT_PCR_MUX(0x3); //使能UART2_TXD
    9d82:	4b0b      	ldr	r3, [pc, #44]	; (9db0 <uart_init+0x13c>)
    9d84:	22c0      	movs	r2, #192	; 0xc0
    9d86:	0092      	lsls	r2, r2, #2
    9d88:	641a      	str	r2, [r3, #64]	; 0x40
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:121
    				PORTE_PCR17 = PORT_PCR_MUX(0x3); //使能UART2_RXD
    9d8a:	645a      	str	r2, [r3, #68]	; 0x44
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:137
    			SIM_SCGC4 |= SIM_SCGC4_UART2_MASK;//启动串口2时钟
    9d8c:	4905      	ldr	r1, [pc, #20]	; (9da4 <uart_init+0x130>)
    9d8e:	4a09      	ldr	r2, [pc, #36]	; (9db4 <uart_init+0x140>)
    9d90:	5888      	ldr	r0, [r1, r2]
    9d92:	2380      	movs	r3, #128	; 0x80
    9d94:	015b      	lsls	r3, r3, #5
    9d96:	4303      	orrs	r3, r0
    9d98:	508b      	str	r3, [r1, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:138
    			break;
    9d9a:	e77a      	b.n	9c92 <uart_init+0x1e>
    9d9c:	0000aee4 	.word	0x0000aee4
    9da0:	2000040c 	.word	0x2000040c
    9da4:	40047000 	.word	0x40047000
    9da8:	00001004 	.word	0x00001004
    9dac:	fffeffff 	.word	0xfffeffff
    9db0:	4004d000 	.word	0x4004d000
    9db4:	00001034 	.word	0x00001034
    9db8:	4006a000 	.word	0x4006a000

00009dbc <uart_send1>:
uart_send1():
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:173
{
    9dbc:	b570      	push	{r4, r5, r6, lr}
    9dbe:	0005      	movs	r5, r0
    9dc0:	000c      	movs	r4, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:177
    UART_MemMapPtr UART_2h_1_2 = UART_ARR[uartNo-1]; //获取UART1或者2基地址
    9dc2:	1e43      	subs	r3, r0, #1
    9dc4:	009b      	lsls	r3, r3, #2
    9dc6:	4a11      	ldr	r2, [pc, #68]	; (9e0c <uart_send1+0x50>)
    9dc8:	589e      	ldr	r6, [r3, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:185
    if(!uart_is_uartNo(uartNo))
    9dca:	f7ff ff4d 	bl	9c68 <uart_is_uartNo>
    9dce:	2800      	cmp	r0, #0
    9dd0:	d016      	beq.n	9e00 <uart_send1+0x44>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:190
    for (t = 0; t < 0xFBBB; t++)//查询指定次数
    9dd2:	2300      	movs	r3, #0
    9dd4:	e004      	b.n	9de0 <uart_send1+0x24>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:204
            if (UART_S1_REG(UART_2h_1_2) & UART_S1_TDRE_MASK )
    9dd6:	7932      	ldrb	r2, [r6, #4]
    9dd8:	b252      	sxtb	r2, r2
    9dda:	2a00      	cmp	r2, #0
    9ddc:	db11      	blt.n	9e02 <uart_send1+0x46>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:190 (discriminator 2)
    for (t = 0; t < 0xFBBB; t++)//查询指定次数
    9dde:	3301      	adds	r3, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:190 (discriminator 1)
    9de0:	4a0b      	ldr	r2, [pc, #44]	; (9e10 <uart_send1+0x54>)
    9de2:	4293      	cmp	r3, r2
    9de4:	d808      	bhi.n	9df8 <uart_send1+0x3c>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:192
        if(0==uartNo)     //判断使用的哪个串口
    9de6:	2d00      	cmp	r5, #0
    9de8:	d1f5      	bne.n	9dd6 <uart_send1+0x1a>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:195
            if ( UART0_S1_REG(UART_2h_0) & UART0_S1_TDRE_MASK )
    9dea:	4a0a      	ldr	r2, [pc, #40]	; (9e14 <uart_send1+0x58>)
    9dec:	7912      	ldrb	r2, [r2, #4]
    9dee:	b252      	sxtb	r2, r2
    9df0:	2a00      	cmp	r2, #0
    9df2:	daf4      	bge.n	9dde <uart_send1+0x22>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:197
                UART0_D_REG(UART_2h_0) = ch;
    9df4:	4a07      	ldr	r2, [pc, #28]	; (9e14 <uart_send1+0x58>)
    9df6:	71d4      	strb	r4, [r2, #7]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:217
    if (t >= 0xFBBB)
    9df8:	4a05      	ldr	r2, [pc, #20]	; (9e10 <uart_send1+0x54>)
    9dfa:	4293      	cmp	r3, r2
    9dfc:	d803      	bhi.n	9e06 <uart_send1+0x4a>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:220
        return 1; //成功发送
    9dfe:	2001      	movs	r0, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:221
}
    9e00:	bd70      	pop	{r4, r5, r6, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:206
                UART_D_REG(UART_2h_1_2) = ch;
    9e02:	71f4      	strb	r4, [r6, #7]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:207
                break;
    9e04:	e7f8      	b.n	9df8 <uart_send1+0x3c>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:218
        return 0; //发送超时，发送失败
    9e06:	2000      	movs	r0, #0
    9e08:	e7fa      	b.n	9e00 <uart_send1+0x44>
    9e0a:	46c0      	nop			; (mov r8, r8)
    9e0c:	0000aee4 	.word	0x0000aee4
    9e10:	0000fbba 	.word	0x0000fbba
    9e14:	4006a000 	.word	0x4006a000

00009e18 <uart_send_string>:
uart_send_string():
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:260
{
    9e18:	b570      	push	{r4, r5, r6, lr}
    9e1a:	0004      	movs	r4, r0
    9e1c:	000e      	movs	r6, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:265
    if(!uart_is_uartNo(uartNo))
    9e1e:	f7ff ff23 	bl	9c68 <uart_is_uartNo>
    9e22:	2800      	cmp	r0, #0
    9e24:	d00c      	beq.n	9e40 <uart_send_string+0x28>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:270
    for(i = 0; buff_ptr[i] != '\0'; i++)   //遍历字符串里的字符
    9e26:	2500      	movs	r5, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:270 (discriminator 1)
    9e28:	5d71      	ldrb	r1, [r6, r5]
    9e2a:	2900      	cmp	r1, #0
    9e2c:	d007      	beq.n	9e3e <uart_send_string+0x26>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:272
        if (!uart_send1(uartNo,buff_ptr[i]))//发送指针对应的字符
    9e2e:	0020      	movs	r0, r4
    9e30:	f7ff ffc4 	bl	9dbc <uart_send1>
    9e34:	2800      	cmp	r0, #0
    9e36:	d003      	beq.n	9e40 <uart_send_string+0x28>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:270 (discriminator 2)
    for(i = 0; buff_ptr[i] != '\0'; i++)   //遍历字符串里的字符
    9e38:	3501      	adds	r5, #1
    9e3a:	b2ad      	uxth	r5, r5
    9e3c:	e7f4      	b.n	9e28 <uart_send_string+0x10>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:275
    return 1;          //发送成功
    9e3e:	2001      	movs	r0, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:276
}
    9e40:	bd70      	pop	{r4, r5, r6, pc}
	...

00009e44 <uart_re1>:
uart_re1():
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:285
{
    9e44:	b570      	push	{r4, r5, r6, lr}
    9e46:	0004      	movs	r4, r0
    9e48:	000e      	movs	r6, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:289
    UART_MemMapPtr UART_2h_1_2 = UART_ARR[uartNo-1]; //获取UART1或者2基地址
    9e4a:	1e43      	subs	r3, r0, #1
    9e4c:	009b      	lsls	r3, r3, #2
    9e4e:	4a14      	ldr	r2, [pc, #80]	; (9ea0 <uart_re1+0x5c>)
    9e50:	589d      	ldr	r5, [r3, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:292
    if(!uart_is_uartNo(uartNo))
    9e52:	f7ff ff09 	bl	9c68 <uart_is_uartNo>
    9e56:	2800      	cmp	r0, #0
    9e58:	d001      	beq.n	9e5e <uart_re1+0x1a>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:298
    for (t = 0; t < 0xFBBB; t++)//查询指定次数
    9e5a:	2300      	movs	r3, #0
    9e5c:	e006      	b.n	9e6c <uart_re1+0x28>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:294
        *fp=0;
    9e5e:	2300      	movs	r3, #0
    9e60:	7033      	strb	r3, [r6, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:327
}
    9e62:	bd70      	pop	{r4, r5, r6, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:313
            if(UART_S1_REG(UART_2h_1_2) & UART_S1_RDRF_MASK)
    9e64:	792a      	ldrb	r2, [r5, #4]
    9e66:	0692      	lsls	r2, r2, #26
    9e68:	d415      	bmi.n	9e96 <uart_re1+0x52>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:298 (discriminator 2)
    for (t = 0; t < 0xFBBB; t++)//查询指定次数
    9e6a:	3301      	adds	r3, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:298 (discriminator 1)
    9e6c:	4a0d      	ldr	r2, [pc, #52]	; (9ea4 <uart_re1+0x60>)
    9e6e:	4293      	cmp	r3, r2
    9e70:	d80a      	bhi.n	9e88 <uart_re1+0x44>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:300
        if(0==uartNo)  //判断使用的哪个串口
    9e72:	2c00      	cmp	r4, #0
    9e74:	d1f6      	bne.n	9e64 <uart_re1+0x20>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:303
        if (UART0_S1_REG(UART_2h_0) & UART0_S1_RDRF_MASK)
    9e76:	4a0c      	ldr	r2, [pc, #48]	; (9ea8 <uart_re1+0x64>)
    9e78:	7912      	ldrb	r2, [r2, #4]
    9e7a:	0692      	lsls	r2, r2, #26
    9e7c:	d5f5      	bpl.n	9e6a <uart_re1+0x26>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:305
                dat=UART0_D_REG(UART_2h_0);    //获取数据,清接收中断位
    9e7e:	4a0a      	ldr	r2, [pc, #40]	; (9ea8 <uart_re1+0x64>)
    9e80:	79d0      	ldrb	r0, [r2, #7]
    9e82:	b2c0      	uxtb	r0, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:306
                *fp = 1;  //接收成功
    9e84:	2201      	movs	r2, #1
    9e86:	7032      	strb	r2, [r6, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:321
    if(t >= 0xFBBB) 
    9e88:	4a06      	ldr	r2, [pc, #24]	; (9ea4 <uart_re1+0x60>)
    9e8a:	4293      	cmp	r3, r2
    9e8c:	d9e9      	bls.n	9e62 <uart_re1+0x1e>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:324
        *fp = 0;    //未收到数据
    9e8e:	2300      	movs	r3, #0
    9e90:	7033      	strb	r3, [r6, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:323
        dat = 0xFF; 
    9e92:	20ff      	movs	r0, #255	; 0xff
    9e94:	e7e5      	b.n	9e62 <uart_re1+0x1e>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:315
                dat=UART_D_REG(UART_2h_1_2);    //获取数据,清接收中断位
    9e96:	79e8      	ldrb	r0, [r5, #7]
    9e98:	b2c0      	uxtb	r0, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:316
                *fp= 1;  //接收成功
    9e9a:	2201      	movs	r2, #1
    9e9c:	7032      	strb	r2, [r6, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:317
                break;
    9e9e:	e7f3      	b.n	9e88 <uart_re1+0x44>
    9ea0:	0000aee4 	.word	0x0000aee4
    9ea4:	0000fbba 	.word	0x0000fbba
    9ea8:	4006a000 	.word	0x4006a000

00009eac <uart_enable_re_int>:
uart_enable_re_int():
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:364
{
    9eac:	b570      	push	{r4, r5, r6, lr}
    9eae:	0004      	movs	r4, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:366
    UART_MemMapPtr UART_2h_1_2 = UART_ARR[uartNo-1]; //获取UART1或者2基地址
    9eb0:	1e43      	subs	r3, r0, #1
    9eb2:	009b      	lsls	r3, r3, #2
    9eb4:	4a0d      	ldr	r2, [pc, #52]	; (9eec <uart_enable_re_int+0x40>)
    9eb6:	589d      	ldr	r5, [r3, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:369
    if(!uart_is_uartNo(uartNo))
    9eb8:	f7ff fed6 	bl	9c68 <uart_is_uartNo>
    9ebc:	2800      	cmp	r0, #0
    9ebe:	d00e      	beq.n	9ede <uart_enable_re_int+0x32>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:374
    if(0 == uartNo)
    9ec0:	2c00      	cmp	r4, #0
    9ec2:	d10d      	bne.n	9ee0 <uart_enable_re_int+0x34>
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:375
        UART0_C2_REG(UART_2h_0) |= UART0_C2_RIE_MASK;    //开放UART接收中断
    9ec4:	4a0a      	ldr	r2, [pc, #40]	; (9ef0 <uart_enable_re_int+0x44>)
    9ec6:	78d3      	ldrb	r3, [r2, #3]
    9ec8:	2120      	movs	r1, #32
    9eca:	430b      	orrs	r3, r1
    9ecc:	70d3      	strb	r3, [r2, #3]
NVIC_EnableIRQ():
D:\app_for_qianrushi\exam\16\02_CPU/core_cm0plus.h:685

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    9ece:	4b09      	ldr	r3, [pc, #36]	; (9ef4 <uart_enable_re_int+0x48>)
    9ed0:	5d1b      	ldrb	r3, [r3, r4]
    9ed2:	221f      	movs	r2, #31
    9ed4:	401a      	ands	r2, r3
    9ed6:	2301      	movs	r3, #1
    9ed8:	4093      	lsls	r3, r2
    9eda:	4a07      	ldr	r2, [pc, #28]	; (9ef8 <uart_enable_re_int+0x4c>)
    9edc:	6013      	str	r3, [r2, #0]
uart_enable_re_int():
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:379
}
    9ede:	bd70      	pop	{r4, r5, r6, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/uart.c:377
        UART_C2_REG(UART_2h_1_2) |= UART_C2_RIE_MASK;    //开放UART接收中断
    9ee0:	78eb      	ldrb	r3, [r5, #3]
    9ee2:	2220      	movs	r2, #32
    9ee4:	4313      	orrs	r3, r2
    9ee6:	70eb      	strb	r3, [r5, #3]
    9ee8:	e7f1      	b.n	9ece <uart_enable_re_int+0x22>
    9eea:	46c0      	nop			; (mov r8, r8)
    9eec:	0000aee4 	.word	0x0000aee4
    9ef0:	4006a000 	.word	0x4006a000
    9ef4:	20000410 	.word	0x20000410
    9ef8:	e000e100 	.word	0xe000e100

00009efc <LCD_WR_DATA8>:
LCD_WR_DATA8():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:415
    result=1;
    while(n--) result*=m;
    return result;
}
void LCD_WR_DATA8(uint8_t da) //发送数据-8位参数
{
    9efc:	b570      	push	{r4, r5, r6, lr}
    9efe:	0005      	movs	r5, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:416
     wdog_feed();
    9f00:	f7ff fcb2 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:417
    gpio_set(LCD_DC,1);
    9f04:	2101      	movs	r1, #1
    9f06:	4809      	ldr	r0, [pc, #36]	; (9f2c <LCD_WR_DATA8+0x30>)
    9f08:	f7ff fc32 	bl	9770 <gpio_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:418
    gpio_set(LCD_CS,0);
    9f0c:	24c0      	movs	r4, #192	; 0xc0
    9f0e:	00a4      	lsls	r4, r4, #2
    9f10:	2100      	movs	r1, #0
    9f12:	0020      	movs	r0, r4
    9f14:	f7ff fc2c 	bl	9770 <gpio_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:420
    //	gpio_init(LCD_CS,1,0);
    spi_send1(LCD_SPI,da);
    9f18:	0029      	movs	r1, r5
    9f1a:	2000      	movs	r0, #0
    9f1c:	f7ff fdba 	bl	9a94 <spi_send1>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:421
    gpio_set(LCD_CS,1);
    9f20:	2101      	movs	r1, #1
    9f22:	0020      	movs	r0, r4
    9f24:	f7ff fc24 	bl	9770 <gpio_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:423
    //	gpio_init(LCD_CS,1,1);
}
    9f28:	bd70      	pop	{r4, r5, r6, pc}
    9f2a:	46c0      	nop			; (mov r8, r8)
    9f2c:	00000301 	.word	0x00000301

00009f30 <LCD_WR_DATA>:
LCD_WR_DATA():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:425
void LCD_WR_DATA(uint16_t da)
{
    9f30:	b570      	push	{r4, r5, r6, lr}
    9f32:	0004      	movs	r4, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:426
     wdog_feed();
    9f34:	f7ff fc98 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:427
    gpio_set(LCD_DC,1);
    9f38:	2101      	movs	r1, #1
    9f3a:	480b      	ldr	r0, [pc, #44]	; (9f68 <LCD_WR_DATA+0x38>)
    9f3c:	f7ff fc18 	bl	9770 <gpio_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:428
    gpio_set(LCD_CS,0);
    9f40:	25c0      	movs	r5, #192	; 0xc0
    9f42:	00ad      	lsls	r5, r5, #2
    9f44:	2100      	movs	r1, #0
    9f46:	0028      	movs	r0, r5
    9f48:	f7ff fc12 	bl	9770 <gpio_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:430
    //	gpio_init(LCD_CS,1,0);
    spi_send1(LCD_SPI,da>>8);
    9f4c:	0a21      	lsrs	r1, r4, #8
    9f4e:	2000      	movs	r0, #0
    9f50:	f7ff fda0 	bl	9a94 <spi_send1>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:431
    spi_send1(LCD_SPI,da);
    9f54:	b2e1      	uxtb	r1, r4
    9f56:	2000      	movs	r0, #0
    9f58:	f7ff fd9c 	bl	9a94 <spi_send1>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:432
    gpio_set(LCD_CS,1);
    9f5c:	2101      	movs	r1, #1
    9f5e:	0028      	movs	r0, r5
    9f60:	f7ff fc06 	bl	9770 <gpio_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:434
    //    gpio_init(LCD_CS,1,1);
}
    9f64:	bd70      	pop	{r4, r5, r6, pc}
    9f66:	46c0      	nop			; (mov r8, r8)
    9f68:	00000301 	.word	0x00000301

00009f6c <LCD_WR_REG>:
LCD_WR_REG():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:436
void LCD_WR_REG(uint8_t da)
{
    9f6c:	b570      	push	{r4, r5, r6, lr}
    9f6e:	0005      	movs	r5, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:437
     wdog_feed();
    9f70:	f7ff fc7a 	bl	9868 <wdog_feed>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:438
    gpio_set(LCD_DC,0);
    9f74:	2100      	movs	r1, #0
    9f76:	4809      	ldr	r0, [pc, #36]	; (9f9c <LCD_WR_REG+0x30>)
    9f78:	f7ff fbfa 	bl	9770 <gpio_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:439
    gpio_set(LCD_CS,0);
    9f7c:	24c0      	movs	r4, #192	; 0xc0
    9f7e:	00a4      	lsls	r4, r4, #2
    9f80:	2100      	movs	r1, #0
    9f82:	0020      	movs	r0, r4
    9f84:	f7ff fbf4 	bl	9770 <gpio_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:441
    //	gpio_init(LCD_CS,1,0);
    spi_send1(LCD_SPI,da);
    9f88:	0029      	movs	r1, r5
    9f8a:	2000      	movs	r0, #0
    9f8c:	f7ff fd82 	bl	9a94 <spi_send1>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:443
    //	gpio_init(LCD_CS,1,1);
    gpio_set(LCD_CS,1);
    9f90:	2101      	movs	r1, #1
    9f92:	0020      	movs	r0, r4
    9f94:	f7ff fbec 	bl	9770 <gpio_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:444
}
    9f98:	bd70      	pop	{r4, r5, r6, pc}
    9f9a:	46c0      	nop			; (mov r8, r8)
    9f9c:	00000301 	.word	0x00000301

00009fa0 <LCD_WR_REG_DATA>:
LCD_WR_REG_DATA():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:447
//void LCD_WR_REG_DATA(uint16_t reg,uint16_t da)
void LCD_WR_REG_DATA(uint8_t reg,uint16_t da)
{
    9fa0:	b510      	push	{r4, lr}
    9fa2:	000c      	movs	r4, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:448
    LCD_WR_REG(reg);
    9fa4:	f7ff ffe2 	bl	9f6c <LCD_WR_REG>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:449
    LCD_WR_DATA(da);
    9fa8:	0020      	movs	r0, r4
    9faa:	f7ff ffc1 	bl	9f30 <LCD_WR_DATA>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:450
}
    9fae:	bd10      	pop	{r4, pc}

00009fb0 <Address_set>:
Address_set():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:452
void Address_set(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
    9fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9fb2:	0007      	movs	r7, r0
    9fb4:	000d      	movs	r5, r1
    9fb6:	0016      	movs	r6, r2
    9fb8:	001c      	movs	r4, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:453
    LCD_WR_REG(0x2a);      //写行地址命令
    9fba:	202a      	movs	r0, #42	; 0x2a
    9fbc:	f7ff ffd6 	bl	9f6c <LCD_WR_REG>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:454
    LCD_WR_DATA8(x1>>8);   //写起始行地址
    9fc0:	0a38      	lsrs	r0, r7, #8
    9fc2:	f7ff ff9b 	bl	9efc <LCD_WR_DATA8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:455
    LCD_WR_DATA8(x1);
    9fc6:	b2f8      	uxtb	r0, r7
    9fc8:	f7ff ff98 	bl	9efc <LCD_WR_DATA8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:456
    LCD_WR_DATA8(x2>>8);   //写结束行地址
    9fcc:	0a30      	lsrs	r0, r6, #8
    9fce:	f7ff ff95 	bl	9efc <LCD_WR_DATA8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:457
    LCD_WR_DATA8(x2);
    9fd2:	b2f0      	uxtb	r0, r6
    9fd4:	f7ff ff92 	bl	9efc <LCD_WR_DATA8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:459
    
    LCD_WR_REG(0x2b);     //写列地址命令
    9fd8:	202b      	movs	r0, #43	; 0x2b
    9fda:	f7ff ffc7 	bl	9f6c <LCD_WR_REG>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:460
    LCD_WR_DATA8(y1>>8);  //写列起始地址
    9fde:	0a28      	lsrs	r0, r5, #8
    9fe0:	f7ff ff8c 	bl	9efc <LCD_WR_DATA8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:461
    LCD_WR_DATA8(y1);
    9fe4:	b2e8      	uxtb	r0, r5
    9fe6:	f7ff ff89 	bl	9efc <LCD_WR_DATA8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:462
    LCD_WR_DATA8(y2>>8);  //写结束列地址
    9fea:	0a20      	lsrs	r0, r4, #8
    9fec:	f7ff ff86 	bl	9efc <LCD_WR_DATA8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:463
    LCD_WR_DATA8(y2);
    9ff0:	b2e0      	uxtb	r0, r4
    9ff2:	f7ff ff83 	bl	9efc <LCD_WR_DATA8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:465
    
    LCD_WR_REG(0x2C);     //写存储器命令
    9ff6:	202c      	movs	r0, #44	; 0x2c
    9ff8:	f7ff ffb8 	bl	9f6c <LCD_WR_REG>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:466
}
    9ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009ffe <LCD_Clear>:
LCD_Clear():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:67
{
    9ffe:	b570      	push	{r4, r5, r6, lr}
    a000:	0005      	movs	r5, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:69
    Address_set(0,0,LCD_W-1,LCD_H-1);
    a002:	2340      	movs	r3, #64	; 0x40
    a004:	33ff      	adds	r3, #255	; 0xff
    a006:	22ef      	movs	r2, #239	; 0xef
    a008:	2100      	movs	r1, #0
    a00a:	2000      	movs	r0, #0
    a00c:	f7ff ffd0 	bl	9fb0 <Address_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:70
    for(i=0;i<LCD_W;i++)
    a010:	2600      	movs	r6, #0
    a012:	e00a      	b.n	a02a <LCD_Clear+0x2c>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:72 (discriminator 3)
        for (j=0;j<LCD_H;j++) LCD_WR_DATA(background);
    a014:	0028      	movs	r0, r5
    a016:	f7ff ff8b 	bl	9f30 <LCD_WR_DATA>
    a01a:	3401      	adds	r4, #1
    a01c:	b2a4      	uxth	r4, r4
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:72 (discriminator 1)
    a01e:	2340      	movs	r3, #64	; 0x40
    a020:	33ff      	adds	r3, #255	; 0xff
    a022:	429c      	cmp	r4, r3
    a024:	d9f6      	bls.n	a014 <LCD_Clear+0x16>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:70 (discriminator 2)
    for(i=0;i<LCD_W;i++)
    a026:	3601      	adds	r6, #1
    a028:	b2b6      	uxth	r6, r6
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:70 (discriminator 1)
    a02a:	2eef      	cmp	r6, #239	; 0xef
    a02c:	d801      	bhi.n	a032 <LCD_Clear+0x34>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:72
        for (j=0;j<LCD_H;j++) LCD_WR_DATA(background);
    a02e:	2400      	movs	r4, #0
    a030:	e7f5      	b.n	a01e <LCD_Clear+0x20>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:74
}
    a032:	bd70      	pop	{r4, r5, r6, pc}

0000a034 <LCD_DrawPoint>:
LCD_DrawPoint():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:85
{
    a034:	b510      	push	{r4, lr}
    a036:	0014      	movs	r4, r2
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:86
    Address_set(x,y,x,y);//设置光标位置
    a038:	000b      	movs	r3, r1
    a03a:	0002      	movs	r2, r0
    a03c:	f7ff ffb8 	bl	9fb0 <Address_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:87
    LCD_WR_DATA(color);
    a040:	0020      	movs	r0, r4
    a042:	f7ff ff75 	bl	9f30 <LCD_WR_DATA>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:88
}
    a046:	bd10      	pop	{r4, pc}

0000a048 <LCD_DrawLine>:
LCD_DrawLine():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:344
{
    a048:	b5f0      	push	{r4, r5, r6, r7, lr}
    a04a:	46de      	mov	lr, fp
    a04c:	4657      	mov	r7, sl
    a04e:	464e      	mov	r6, r9
    a050:	4645      	mov	r5, r8
    a052:	b5e0      	push	{r5, r6, r7, lr}
    a054:	b085      	sub	sp, #20
    a056:	ac0e      	add	r4, sp, #56	; 0x38
    a058:	8824      	ldrh	r4, [r4, #0]
    a05a:	9403      	str	r4, [sp, #12]
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:349
    delta_x=x2-x1; //计算坐标增量
    a05c:	9001      	str	r0, [sp, #4]
    a05e:	1a12      	subs	r2, r2, r0
    a060:	4692      	mov	sl, r2
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:350
    delta_y=y2-y1;
    a062:	9102      	str	r1, [sp, #8]
    a064:	1a5b      	subs	r3, r3, r1
    a066:	469b      	mov	fp, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:353
    if(delta_x>0)incx=1; //设置单步方向
    a068:	2a00      	cmp	r2, #0
    a06a:	dd0d      	ble.n	a088 <LCD_DrawLine+0x40>
    a06c:	2301      	movs	r3, #1
    a06e:	4698      	mov	r8, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:356
    if(delta_y>0)incy=1;
    a070:	465b      	mov	r3, fp
    a072:	2b00      	cmp	r3, #0
    a074:	dd12      	ble.n	a09c <LCD_DrawLine+0x54>
    a076:	2301      	movs	r3, #1
    a078:	4699      	mov	r9, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:359
    if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴
    a07a:	45da      	cmp	sl, fp
    a07c:	dd18      	ble.n	a0b0 <LCD_DrawLine+0x68>
    a07e:	4655      	mov	r5, sl
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:346
    int xerr=0,yerr=0,delta_x,delta_y,distance;
    a080:	2700      	movs	r7, #0
    a082:	2600      	movs	r6, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:361
    for(t=0;t<=distance+1;t++ )//画线输出
    a084:	2400      	movs	r4, #0
    a086:	e017      	b.n	a0b8 <LCD_DrawLine+0x70>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:354
    else if(delta_x==0)incx=0;//垂直线
    a088:	2a00      	cmp	r2, #0
    a08a:	d005      	beq.n	a098 <LCD_DrawLine+0x50>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:355
    else {incx=-1;delta_x=-delta_x;}
    a08c:	4253      	negs	r3, r2
    a08e:	469a      	mov	sl, r3
    a090:	2301      	movs	r3, #1
    a092:	425b      	negs	r3, r3
    a094:	4698      	mov	r8, r3
    a096:	e7eb      	b.n	a070 <LCD_DrawLine+0x28>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:354
    else if(delta_x==0)incx=0;//垂直线
    a098:	4690      	mov	r8, r2
    a09a:	e7e9      	b.n	a070 <LCD_DrawLine+0x28>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:357
    else if(delta_y==0)incy=0;//水平线
    a09c:	2b00      	cmp	r3, #0
    a09e:	d005      	beq.n	a0ac <LCD_DrawLine+0x64>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:358
    else{incy=-1;delta_y=-delta_y;}
    a0a0:	425b      	negs	r3, r3
    a0a2:	469b      	mov	fp, r3
    a0a4:	2301      	movs	r3, #1
    a0a6:	425b      	negs	r3, r3
    a0a8:	4699      	mov	r9, r3
    a0aa:	e7e6      	b.n	a07a <LCD_DrawLine+0x32>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:357
    else if(delta_y==0)incy=0;//水平线
    a0ac:	46d9      	mov	r9, fp
    a0ae:	e7e4      	b.n	a07a <LCD_DrawLine+0x32>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:360
    else distance=delta_y;
    a0b0:	465d      	mov	r5, fp
    a0b2:	e7e5      	b.n	a080 <LCD_DrawLine+0x38>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:361 (discriminator 2)
    for(t=0;t<=distance+1;t++ )//画线输出
    a0b4:	3401      	adds	r4, #1
    a0b6:	b2a4      	uxth	r4, r4
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:361 (discriminator 1)
    a0b8:	1c6b      	adds	r3, r5, #1
    a0ba:	429c      	cmp	r4, r3
    a0bc:	dc14      	bgt.n	a0e8 <LCD_DrawLine+0xa0>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:363
        LCD_DrawPoint(uRow,uCol,color);//画点
    a0be:	466b      	mov	r3, sp
    a0c0:	8919      	ldrh	r1, [r3, #8]
    a0c2:	8898      	ldrh	r0, [r3, #4]
    a0c4:	9a03      	ldr	r2, [sp, #12]
    a0c6:	f7ff ffb5 	bl	a034 <LCD_DrawPoint>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:364
        xerr+=delta_x ;
    a0ca:	4456      	add	r6, sl
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:365
        yerr+=delta_y ;
    a0cc:	445f      	add	r7, fp
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:366
        if(xerr>distance)
    a0ce:	42b5      	cmp	r5, r6
    a0d0:	da03      	bge.n	a0da <LCD_DrawLine+0x92>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:368
            xerr-=distance;
    a0d2:	1b76      	subs	r6, r6, r5
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:369
            uRow+=incx;
    a0d4:	9b01      	ldr	r3, [sp, #4]
    a0d6:	4443      	add	r3, r8
    a0d8:	9301      	str	r3, [sp, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:371
        if(yerr>distance)
    a0da:	42bd      	cmp	r5, r7
    a0dc:	daea      	bge.n	a0b4 <LCD_DrawLine+0x6c>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:373
            yerr-=distance;
    a0de:	1b7f      	subs	r7, r7, r5
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:374
            uCol+=incy;
    a0e0:	9b02      	ldr	r3, [sp, #8]
    a0e2:	444b      	add	r3, r9
    a0e4:	9302      	str	r3, [sp, #8]
    a0e6:	e7e5      	b.n	a0b4 <LCD_DrawLine+0x6c>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:377
}
    a0e8:	b005      	add	sp, #20
    a0ea:	bc3c      	pop	{r2, r3, r4, r5}
    a0ec:	4690      	mov	r8, r2
    a0ee:	4699      	mov	r9, r3
    a0f0:	46a2      	mov	sl, r4
    a0f2:	46ab      	mov	fp, r5
    a0f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a0f6 <LCD_ShowCharactor>:
LCD_ShowCharactor():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:168
{
    a0f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0f8:	b083      	sub	sp, #12
    a0fa:	0016      	movs	r6, r2
    a0fc:	9301      	str	r3, [sp, #4]
    a0fe:	9f08      	ldr	r7, [sp, #32]
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:171
    Address_set(x,y,x+15,y+15); //设置区域
    a100:	000b      	movs	r3, r1
    a102:	330f      	adds	r3, #15
    a104:	b29b      	uxth	r3, r3
    a106:	0002      	movs	r2, r0
    a108:	320f      	adds	r2, #15
    a10a:	b292      	uxth	r2, r2
    a10c:	f7ff ff50 	bl	9fb0 <Address_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:172
    for(j=0;j<32;j++)
    a110:	2500      	movs	r5, #0
    a112:	e012      	b.n	a13a <LCD_ShowCharactor+0x44>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:180
            LCD_WR_DATA(groundbackcolor);
    a114:	9801      	ldr	r0, [sp, #4]
    a116:	f7ff ff0b 	bl	9f30 <LCD_WR_DATA>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:174 (discriminator 2)
        for(i=0;i<8;i++)
    a11a:	3401      	adds	r4, #1
    a11c:	b2e4      	uxtb	r4, r4
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:174 (discriminator 1)
    a11e:	2c07      	cmp	r4, #7
    a120:	d808      	bhi.n	a134 <LCD_ShowCharactor+0x3e>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:176
            if((*temp&(1<<i))!=0)
    a122:	2300      	movs	r3, #0
    a124:	56fb      	ldrsb	r3, [r7, r3]
    a126:	4123      	asrs	r3, r4
    a128:	07db      	lsls	r3, r3, #31
    a12a:	d5f3      	bpl.n	a114 <LCD_ShowCharactor+0x1e>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:177
            LCD_WR_DATA(fontcolor);
    a12c:	0030      	movs	r0, r6
    a12e:	f7ff feff 	bl	9f30 <LCD_WR_DATA>
    a132:	e7f2      	b.n	a11a <LCD_ShowCharactor+0x24>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:182 (discriminator 2)
        temp++;
    a134:	3701      	adds	r7, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:172 (discriminator 2)
    for(j=0;j<32;j++)
    a136:	3501      	adds	r5, #1
    a138:	b2ed      	uxtb	r5, r5
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:172 (discriminator 1)
    a13a:	2d1f      	cmp	r5, #31
    a13c:	d801      	bhi.n	a142 <LCD_ShowCharactor+0x4c>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:174
        for(i=0;i<8;i++)
    a13e:	2400      	movs	r4, #0
    a140:	e7ed      	b.n	a11e <LCD_ShowCharactor+0x28>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:184
}
    a142:	b003      	add	sp, #12
    a144:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000a148 <LCD_ShowString>:
LCD_ShowString():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:250
{
    a148:	b5f0      	push	{r4, r5, r6, r7, lr}
    a14a:	46de      	mov	lr, fp
    a14c:	4657      	mov	r7, sl
    a14e:	464e      	mov	r6, r9
    a150:	b5c0      	push	{r6, r7, lr}
    a152:	b086      	sub	sp, #24
    a154:	4683      	mov	fp, r0
    a156:	9104      	str	r1, [sp, #16]
    a158:	9205      	str	r2, [sp, #20]
    a15a:	9302      	str	r3, [sp, #8]
    a15c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:253
    k = 0;
    a15e:	2300      	movs	r3, #0
    a160:	469a      	mov	sl, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:254
    while(*p != 0)
    a162:	e037      	b.n	a1d4 <LCD_ShowString+0x8c>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:260
            Address_set(x+8*k,y,x+7+8*k,y+15); //设置区域
    a164:	4653      	mov	r3, sl
    a166:	00d8      	lsls	r0, r3, #3
    a168:	4458      	add	r0, fp
    a16a:	b280      	uxth	r0, r0
    a16c:	9904      	ldr	r1, [sp, #16]
    a16e:	000b      	movs	r3, r1
    a170:	330f      	adds	r3, #15
    a172:	b29b      	uxth	r3, r3
    a174:	1dc2      	adds	r2, r0, #7
    a176:	b292      	uxth	r2, r2
    a178:	f7ff ff1a 	bl	9fb0 <Address_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:261
            temp+=(*p-0x20)*16;
    a17c:	2500      	movs	r5, #0
    a17e:	5775      	ldrsb	r5, [r6, r5]
    a180:	3d20      	subs	r5, #32
    a182:	012d      	lsls	r5, r5, #4
    a184:	4b30      	ldr	r3, [pc, #192]	; (a248 <LCD_ShowString+0x100>)
    a186:	18ed      	adds	r5, r5, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:262
            for(j=0;j<16;j++)
    a188:	2700      	movs	r7, #0
    a18a:	46b1      	mov	r9, r6
    a18c:	003e      	movs	r6, r7
    a18e:	9f05      	ldr	r7, [sp, #20]
    a190:	e012      	b.n	a1b8 <LCD_ShowString+0x70>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:272
                        LCD_WR_DATA(groundbackcolor);
    a192:	9802      	ldr	r0, [sp, #8]
    a194:	f7ff fecc 	bl	9f30 <LCD_WR_DATA>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:264 (discriminator 2)
                for(i=0;i<8;i++)
    a198:	3401      	adds	r4, #1
    a19a:	b2e4      	uxtb	r4, r4
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:264 (discriminator 1)
    a19c:	2c07      	cmp	r4, #7
    a19e:	d808      	bhi.n	a1b2 <LCD_ShowString+0x6a>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:266
                    if((*temp&(1<<i))!=0)
    a1a0:	2300      	movs	r3, #0
    a1a2:	56eb      	ldrsb	r3, [r5, r3]
    a1a4:	4123      	asrs	r3, r4
    a1a6:	07db      	lsls	r3, r3, #31
    a1a8:	d5f3      	bpl.n	a192 <LCD_ShowString+0x4a>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:268
                        LCD_WR_DATA(fontcolor);
    a1aa:	0038      	movs	r0, r7
    a1ac:	f7ff fec0 	bl	9f30 <LCD_WR_DATA>
    a1b0:	e7f2      	b.n	a198 <LCD_ShowString+0x50>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:275 (discriminator 2)
                temp++;
    a1b2:	3501      	adds	r5, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:262 (discriminator 2)
            for(j=0;j<16;j++)
    a1b4:	3601      	adds	r6, #1
    a1b6:	b2f6      	uxtb	r6, r6
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:262 (discriminator 1)
    a1b8:	2e0f      	cmp	r6, #15
    a1ba:	d801      	bhi.n	a1c0 <LCD_ShowString+0x78>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:264
                for(i=0;i<8;i++)
    a1bc:	2400      	movs	r4, #0
    a1be:	e7ed      	b.n	a19c <LCD_ShowString+0x54>
    a1c0:	464e      	mov	r6, r9
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:277
            k++;
    a1c2:	4653      	mov	r3, sl
    a1c4:	3301      	adds	r3, #1
    a1c6:	b2db      	uxtb	r3, r3
    a1c8:	469a      	mov	sl, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:295
        p++;
    a1ca:	3601      	adds	r6, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:296
        if (k>=30) break;
    a1cc:	4653      	mov	r3, sl
    a1ce:	2b1d      	cmp	r3, #29
    a1d0:	d834      	bhi.n	a23c <LCD_ShowString+0xf4>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:297
        ENABLE_INTERRUPTS;
    a1d2:	b662      	cpsie	i
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:254
    while(*p != 0)
    a1d4:	2300      	movs	r3, #0
    a1d6:	56f3      	ldrsb	r3, [r6, r3]
    a1d8:	2b00      	cmp	r3, #0
    a1da:	d02f      	beq.n	a23c <LCD_ShowString+0xf4>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:256
        DISABLE_INTERRUPTS;
    a1dc:	b672      	cpsid	i
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:257
        if(*p>=0x20 && *p<=0x7e)
    a1de:	2400      	movs	r4, #0
    a1e0:	5734      	ldrsb	r4, [r6, r4]
    a1e2:	0023      	movs	r3, r4
    a1e4:	3b20      	subs	r3, #32
    a1e6:	b2db      	uxtb	r3, r3
    a1e8:	2b5e      	cmp	r3, #94	; 0x5e
    a1ea:	d9bb      	bls.n	a164 <LCD_ShowString+0x1c>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:279
        else if(*p > 0x7e)
    a1ec:	2c7f      	cmp	r4, #127	; 0x7f
    a1ee:	d1ec      	bne.n	a1ca <LCD_ShowString+0x82>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:281
            for(i=0;i<ChineseCharacterLength;i++)
    a1f0:	2300      	movs	r3, #0
    a1f2:	e001      	b.n	a1f8 <LCD_ShowString+0xb0>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:281 (discriminator 2)
    a1f4:	3301      	adds	r3, #1
    a1f6:	b2db      	uxtb	r3, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:281 (discriminator 1)
    a1f8:	2b02      	cmp	r3, #2
    a1fa:	d81a      	bhi.n	a232 <LCD_ShowString+0xea>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:284
                uint8_t b = *(p+1);
    a1fc:	2701      	movs	r7, #1
    a1fe:	57f7      	ldrsb	r7, [r6, r7]
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:285
                uint8_t c = GB_16[i].Index[0];
    a200:	9303      	str	r3, [sp, #12]
    a202:	4912      	ldr	r1, [pc, #72]	; (a24c <LCD_ShowString+0x104>)
    a204:	011a      	lsls	r2, r3, #4
    a206:	18d5      	adds	r5, r2, r3
    a208:	0068      	lsls	r0, r5, #1
    a20a:	5645      	ldrsb	r5, [r0, r1]
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:286
                uint8_t d = GB_16[i].Index[1];
    a20c:	1809      	adds	r1, r1, r0
    a20e:	2201      	movs	r2, #1
    a210:	568a      	ldrsb	r2, [r1, r2]
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:287
                if( (a == c) && (b == d))
    a212:	42ac      	cmp	r4, r5
    a214:	d1ee      	bne.n	a1f4 <LCD_ShowString+0xac>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:287 (discriminator 1)
    a216:	4297      	cmp	r7, r2
    a218:	d1ec      	bne.n	a1f4 <LCD_ShowString+0xac>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:289
                    LCD_ShowCharactor(x+8*k,y,fontcolor,groundbackcolor,GB_16[i].Msk);
    a21a:	000b      	movs	r3, r1
    a21c:	3302      	adds	r3, #2
    a21e:	4652      	mov	r2, sl
    a220:	00d0      	lsls	r0, r2, #3
    a222:	4458      	add	r0, fp
    a224:	b280      	uxth	r0, r0
    a226:	9300      	str	r3, [sp, #0]
    a228:	9b02      	ldr	r3, [sp, #8]
    a22a:	9a05      	ldr	r2, [sp, #20]
    a22c:	9904      	ldr	r1, [sp, #16]
    a22e:	f7ff ff62 	bl	a0f6 <LCD_ShowCharactor>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:293
            k++;
    a232:	4653      	mov	r3, sl
    a234:	3301      	adds	r3, #1
    a236:	b2db      	uxtb	r3, r3
    a238:	469a      	mov	sl, r3
    a23a:	e7c6      	b.n	a1ca <LCD_ShowString+0x82>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:299
}
    a23c:	b006      	add	sp, #24
    a23e:	bc1c      	pop	{r2, r3, r4}
    a240:	4691      	mov	r9, r2
    a242:	469a      	mov	sl, r3
    a244:	46a3      	mov	fp, r4
    a246:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a248:	0000af54 	.word	0x0000af54
    a24c:	0000aeec 	.word	0x0000aeec

0000a250 <LCD_DrawSurface>:
LCD_DrawSurface():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:388
{
    a250:	b5f0      	push	{r4, r5, r6, r7, lr}
    a252:	46ce      	mov	lr, r9
    a254:	b500      	push	{lr}
    a256:	b082      	sub	sp, #8
    a258:	9001      	str	r0, [sp, #4]
    a25a:	000e      	movs	r6, r1
    a25c:	0017      	movs	r7, r2
    a25e:	4699      	mov	r9, r3
    a260:	ab08      	add	r3, sp, #32
    a262:	881d      	ldrh	r5, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:390
    Address_set(x1,y1,x2,y2);      //设置光标位置
    a264:	464b      	mov	r3, r9
    a266:	f7ff fea3 	bl	9fb0 <Address_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:391
    for(i=y1;i<=y2;i++)
    a26a:	e008      	b.n	a27e <LCD_DrawSurface+0x2e>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:393 (discriminator 3)
        for(j=x1;j<=x2;j++)LCD_WR_DATA(color);//画点
    a26c:	0028      	movs	r0, r5
    a26e:	f7ff fe5f 	bl	9f30 <LCD_WR_DATA>
    a272:	3401      	adds	r4, #1
    a274:	b2a4      	uxth	r4, r4
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:393 (discriminator 1)
    a276:	42bc      	cmp	r4, r7
    a278:	d9f8      	bls.n	a26c <LCD_DrawSurface+0x1c>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:391 (discriminator 2)
    for(i=y1;i<=y2;i++)
    a27a:	3601      	adds	r6, #1
    a27c:	b2b6      	uxth	r6, r6
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:391 (discriminator 1)
    a27e:	454e      	cmp	r6, r9
    a280:	d801      	bhi.n	a286 <LCD_DrawSurface+0x36>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:393
        for(j=x1;j<=x2;j++)LCD_WR_DATA(color);//画点
    a282:	9c01      	ldr	r4, [sp, #4]
    a284:	e7f7      	b.n	a276 <LCD_DrawSurface+0x26>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:395
}
    a286:	b002      	add	sp, #8
    a288:	bc04      	pop	{r2}
    a28a:	4691      	mov	r9, r2
    a28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000a290 <LCD_aotu>:
LCD_aotu():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:307
{
    a290:	b5f0      	push	{r4, r5, r6, r7, lr}
    a292:	46d6      	mov	lr, sl
    a294:	464f      	mov	r7, r9
    a296:	4646      	mov	r6, r8
    a298:	b5c0      	push	{r6, r7, lr}
    a29a:	b086      	sub	sp, #24
    a29c:	0007      	movs	r7, r0
    a29e:	9003      	str	r0, [sp, #12]
    a2a0:	0016      	movs	r6, r2
    a2a2:	9204      	str	r2, [sp, #16]
    a2a4:	001d      	movs	r5, r3
    a2a6:	9305      	str	r3, [sp, #20]
    a2a8:	ab0e      	add	r3, sp, #56	; 0x38
    a2aa:	781b      	ldrb	r3, [r3, #0]
    a2ac:	4699      	mov	r9, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:311
    LCD_DrawSurface(x,y,x1,y1,color);
    a2ae:	4b38      	ldr	r3, [pc, #224]	; (a390 <LCD_aotu+0x100>)
    a2b0:	9300      	str	r3, [sp, #0]
    a2b2:	002b      	movs	r3, r5
    a2b4:	9102      	str	r1, [sp, #8]
    a2b6:	f7ff ffcb 	bl	a250 <LCD_DrawSurface>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:314
    LCD_DrawLine(x,y,x1,y,color);
    a2ba:	2400      	movs	r4, #0
    a2bc:	9400      	str	r4, [sp, #0]
    a2be:	9902      	ldr	r1, [sp, #8]
    a2c0:	000b      	movs	r3, r1
    a2c2:	0032      	movs	r2, r6
    a2c4:	0038      	movs	r0, r7
    a2c6:	f7ff febf 	bl	a048 <LCD_DrawLine>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:315
    LCD_DrawLine(x,y,x,y1,color);
    a2ca:	9400      	str	r4, [sp, #0]
    a2cc:	002b      	movs	r3, r5
    a2ce:	003a      	movs	r2, r7
    a2d0:	9902      	ldr	r1, [sp, #8]
    a2d2:	0038      	movs	r0, r7
    a2d4:	f7ff feb8 	bl	a048 <LCD_DrawLine>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:317
    LCD_DrawLine(x1,y,x1,y1,color);
    a2d8:	9400      	str	r4, [sp, #0]
    a2da:	002b      	movs	r3, r5
    a2dc:	0032      	movs	r2, r6
    a2de:	9902      	ldr	r1, [sp, #8]
    a2e0:	0030      	movs	r0, r6
    a2e2:	f7ff feb1 	bl	a048 <LCD_DrawLine>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:318
    LCD_DrawLine(x,y1,x1,y1,color);
    a2e6:	9400      	str	r4, [sp, #0]
    a2e8:	002b      	movs	r3, r5
    a2ea:	0032      	movs	r2, r6
    a2ec:	0029      	movs	r1, r5
    a2ee:	0038      	movs	r0, r7
    a2f0:	f7ff feaa 	bl	a048 <LCD_DrawLine>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:320
    for(i=1;i<n;i++)
    a2f4:	2501      	movs	r5, #1
    a2f6:	46a8      	mov	r8, r5
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:320 (discriminator 2)
    a2f8:	4643      	mov	r3, r8
    a2fa:	2b01      	cmp	r3, #1
    a2fc:	d905      	bls.n	a30a <LCD_aotu+0x7a>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:333
};
    a2fe:	b006      	add	sp, #24
    a300:	bc1c      	pop	{r2, r3, r4}
    a302:	4690      	mov	r8, r2
    a304:	4699      	mov	r9, r3
    a306:	46a2      	mov	sl, r4
    a308:	bdf0      	pop	{r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:323
        color=(s==0?BLACK:WHITE);  //
    a30a:	464b      	mov	r3, r9
    a30c:	2b00      	cmp	r3, #0
    a30e:	d138      	bne.n	a382 <LCD_aotu+0xf2>
    a310:	46ca      	mov	sl, r9
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:325 (discriminator 4)
        LCD_DrawLine(x+i,y+i,x1-i,y+i,color);
    a312:	4643      	mov	r3, r8
    a314:	b29c      	uxth	r4, r3
    a316:	9b03      	ldr	r3, [sp, #12]
    a318:	18e6      	adds	r6, r4, r3
    a31a:	b2b6      	uxth	r6, r6
    a31c:	9b02      	ldr	r3, [sp, #8]
    a31e:	18e5      	adds	r5, r4, r3
    a320:	b2ad      	uxth	r5, r5
    a322:	9b04      	ldr	r3, [sp, #16]
    a324:	1b1f      	subs	r7, r3, r4
    a326:	b2bf      	uxth	r7, r7
    a328:	4653      	mov	r3, sl
    a32a:	9300      	str	r3, [sp, #0]
    a32c:	002b      	movs	r3, r5
    a32e:	003a      	movs	r2, r7
    a330:	0029      	movs	r1, r5
    a332:	0030      	movs	r0, r6
    a334:	f7ff fe88 	bl	a048 <LCD_DrawLine>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:326 (discriminator 4)
        LCD_DrawLine(x+i,y+i,x+i,y1-i,color);
    a338:	9b05      	ldr	r3, [sp, #20]
    a33a:	1b1c      	subs	r4, r3, r4
    a33c:	b2a4      	uxth	r4, r4
    a33e:	4653      	mov	r3, sl
    a340:	9300      	str	r3, [sp, #0]
    a342:	0023      	movs	r3, r4
    a344:	0032      	movs	r2, r6
    a346:	0029      	movs	r1, r5
    a348:	0030      	movs	r0, r6
    a34a:	f7ff fe7d 	bl	a048 <LCD_DrawLine>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:328 (discriminator 4)
        color=(s==0?WHITE:BLACK);
    a34e:	464b      	mov	r3, r9
    a350:	2b00      	cmp	r3, #0
    a352:	d119      	bne.n	a388 <LCD_aotu+0xf8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:328
    a354:	4b0f      	ldr	r3, [pc, #60]	; (a394 <LCD_aotu+0x104>)
    a356:	469a      	mov	sl, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:330 (discriminator 4)
        LCD_DrawLine(x1-i,y+i,x1-i,y1-i,color);
    a358:	4653      	mov	r3, sl
    a35a:	9300      	str	r3, [sp, #0]
    a35c:	0023      	movs	r3, r4
    a35e:	003a      	movs	r2, r7
    a360:	0029      	movs	r1, r5
    a362:	0038      	movs	r0, r7
    a364:	f7ff fe70 	bl	a048 <LCD_DrawLine>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:331 (discriminator 4)
        LCD_DrawLine(x+i,y1-i,x1-i,y1-i,color);
    a368:	4653      	mov	r3, sl
    a36a:	9300      	str	r3, [sp, #0]
    a36c:	0023      	movs	r3, r4
    a36e:	003a      	movs	r2, r7
    a370:	0021      	movs	r1, r4
    a372:	0030      	movs	r0, r6
    a374:	f7ff fe68 	bl	a048 <LCD_DrawLine>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:320 (discriminator 4)
    for(i=1;i<n;i++)
    a378:	4643      	mov	r3, r8
    a37a:	3301      	adds	r3, #1
    a37c:	b2db      	uxtb	r3, r3
    a37e:	4698      	mov	r8, r3
    a380:	e7ba      	b.n	a2f8 <LCD_aotu+0x68>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:323
        color=(s==0?BLACK:WHITE);  //
    a382:	4b04      	ldr	r3, [pc, #16]	; (a394 <LCD_aotu+0x104>)
    a384:	469a      	mov	sl, r3
    a386:	e7c4      	b.n	a312 <LCD_aotu+0x82>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:328
        color=(s==0?WHITE:BLACK);
    a388:	2300      	movs	r3, #0
    a38a:	469a      	mov	sl, r3
    a38c:	e7e4      	b.n	a358 <LCD_aotu+0xc8>
    a38e:	46c0      	nop			; (mov r8, r8)
    a390:	00008430 	.word	0x00008430
    a394:	0000ffff 	.word	0x0000ffff

0000a398 <LCD_Dly_ms>:
LCD_Dly_ms():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:477
//功能概要：延时 - 毫秒级
//======================================================================

void LCD_Dly_ms(uint32_t ms)
{
   for (uint32_t ys=0;ys<(6000*ms);ys++) __asm("nop");
    a398:	2200      	movs	r2, #0
    a39a:	e001      	b.n	a3a0 <LCD_Dly_ms+0x8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:477 (discriminator 3)
    a39c:	46c0      	nop			; (mov r8, r8)
    a39e:	3201      	adds	r2, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:477 (discriminator 1)
    a3a0:	4b02      	ldr	r3, [pc, #8]	; (a3ac <LCD_Dly_ms+0x14>)
    a3a2:	4343      	muls	r3, r0
    a3a4:	4293      	cmp	r3, r2
    a3a6:	d8f9      	bhi.n	a39c <LCD_Dly_ms+0x4>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:478
}
    a3a8:	4770      	bx	lr
    a3aa:	46c0      	nop			; (mov r8, r8)
    a3ac:	00001770 	.word	0x00001770

0000a3b0 <LCD_Init>:
LCD_Init():
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:30
{
    a3b0:	b510      	push	{r4, lr}
    a3b2:	b082      	sub	sp, #8
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:32
	spi_init(LCD_SPI,1,20000,0,0);
    a3b4:	2300      	movs	r3, #0
    a3b6:	9300      	str	r3, [sp, #0]
    a3b8:	4a25      	ldr	r2, [pc, #148]	; (a450 <LCD_Init+0xa0>)
    a3ba:	2101      	movs	r1, #1
    a3bc:	2000      	movs	r0, #0
    a3be:	f7ff fa5f 	bl	9880 <spi_init>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:33
    gpio_init(LCD_RS,1,0);
    a3c2:	4c24      	ldr	r4, [pc, #144]	; (a454 <LCD_Init+0xa4>)
    a3c4:	2200      	movs	r2, #0
    a3c6:	2101      	movs	r1, #1
    a3c8:	0020      	movs	r0, r4
    a3ca:	f7ff f9f3 	bl	97b4 <gpio_init>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:34
    gpio_init(LCD_DC,1,0);
    a3ce:	2200      	movs	r2, #0
    a3d0:	2101      	movs	r1, #1
    a3d2:	4821      	ldr	r0, [pc, #132]	; (a458 <LCD_Init+0xa8>)
    a3d4:	f7ff f9ee 	bl	97b4 <gpio_init>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:35
    gpio_init(LCD_CS,1,1);
    a3d8:	20c0      	movs	r0, #192	; 0xc0
    a3da:	2201      	movs	r2, #1
    a3dc:	2101      	movs	r1, #1
    a3de:	0080      	lsls	r0, r0, #2
    a3e0:	f7ff f9e8 	bl	97b4 <gpio_init>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:37
    LCD_WR_REG_DATA(0,0);
    a3e4:	2100      	movs	r1, #0
    a3e6:	2000      	movs	r0, #0
    a3e8:	f7ff fdda 	bl	9fa0 <LCD_WR_REG_DATA>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:39
    gpio_set(LCD_RS,0);
    a3ec:	2100      	movs	r1, #0
    a3ee:	0020      	movs	r0, r4
    a3f0:	f7ff f9be 	bl	9770 <gpio_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:40
	LCD_Dly_ms(100);
    a3f4:	2064      	movs	r0, #100	; 0x64
    a3f6:	f7ff ffcf 	bl	a398 <LCD_Dly_ms>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:41
    gpio_set(LCD_RS,1);
    a3fa:	2101      	movs	r1, #1
    a3fc:	0020      	movs	r0, r4
    a3fe:	f7ff f9b7 	bl	9770 <gpio_set>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:42
	LCD_Dly_ms(100);
    a402:	2064      	movs	r0, #100	; 0x64
    a404:	f7ff ffc8 	bl	a398 <LCD_Dly_ms>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:44
    LCD_WR_REG(0x36);    //存储器访问控制，显示屏正向显示写0x00/0x08,显示器反向显示写0xD0/0xD8
    a408:	2036      	movs	r0, #54	; 0x36
    a40a:	f7ff fdaf 	bl	9f6c <LCD_WR_REG>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:45
    LCD_WR_DATA8(0x00);  //0x00：ST7789V（新LCD）正常，ILI9341V红蓝颠倒
    a40e:	2000      	movs	r0, #0
    a410:	f7ff fd74 	bl	9efc <LCD_WR_DATA8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:47
    LCD_WR_REG(0xB6);    //显示功能控制
    a414:	20b6      	movs	r0, #182	; 0xb6
    a416:	f7ff fda9 	bl	9f6c <LCD_WR_REG>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:48
    LCD_WR_DATA8(0x0A);
    a41a:	200a      	movs	r0, #10
    a41c:	f7ff fd6e 	bl	9efc <LCD_WR_DATA8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:49
    LCD_WR_DATA8(0xA2);
    a420:	20a2      	movs	r0, #162	; 0xa2
    a422:	f7ff fd6b 	bl	9efc <LCD_WR_DATA8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:51
    LCD_WR_REG(0x3a);  //定义RGB图像数据格式
    a426:	203a      	movs	r0, #58	; 0x3a
    a428:	f7ff fda0 	bl	9f6c <LCD_WR_REG>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:52
    LCD_WR_DATA8(0x05);//16位/像素
    a42c:	2005      	movs	r0, #5
    a42e:	f7ff fd65 	bl	9efc <LCD_WR_DATA8>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:54
    LCD_WR_REG(0x11);     //退出睡眠模式
    a432:	2011      	movs	r0, #17
    a434:	f7ff fd9a 	bl	9f6c <LCD_WR_REG>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:55
	LCD_Dly_ms(800);     
    a438:	20c8      	movs	r0, #200	; 0xc8
    a43a:	0080      	lsls	r0, r0, #2
    a43c:	f7ff ffac 	bl	a398 <LCD_Dly_ms>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:56
    LCD_Clear(WHITE);
    a440:	4806      	ldr	r0, [pc, #24]	; (a45c <LCD_Init+0xac>)
    a442:	f7ff fddc 	bl	9ffe <LCD_Clear>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:57
    LCD_WR_REG(0x29);
    a446:	2029      	movs	r0, #41	; 0x29
    a448:	f7ff fd90 	bl	9f6c <LCD_WR_REG>
D:\app_for_qianrushi\exam\16\Debug/srcc/lcd.c:58
}
    a44c:	b002      	add	sp, #8
    a44e:	bd10      	pop	{r4, pc}
    a450:	00004e20 	.word	0x00004e20
    a454:	00000302 	.word	0x00000302
    a458:	00000301 	.word	0x00000301
    a45c:	0000ffff 	.word	0x0000ffff

0000a460 <UART0_IRQHandler>:
UART0_IRQHandler():
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:16
//功    能：收到一个字节，直接返回该字节
//备    注：进入本程序后，可使用uart_get_re_int函数可再进行中断标志判断
//          （1-有UART接收中断，0-没有UART接收中断）
//======================================================================
void UART_User_Handler(void)
{
    a460:	b5f0      	push	{r4, r5, r6, r7, lr}
    a462:	b083      	sub	sp, #12
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:22
    uint16_t mcu_temp_AD;			 //温度值
    float mcu_temp;
    uint8_t temp[3];
	uint8_t ch;
	uint8_t flag;
	DISABLE_INTERRUPTS;      //关总中断
    a464:	b672      	cpsid	i
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:25
	//------------------------------------------------------------------
	//接收一个字节
	ch = uart_re1(UART_User, &flag);   //调用接收一个字节的函数，清接收中断位
    a466:	466b      	mov	r3, sp
    a468:	1cdc      	adds	r4, r3, #3
    a46a:	0021      	movs	r1, r4
    a46c:	2000      	movs	r0, #0
    a46e:	f7ff fce9 	bl	9e44 <uart_re1>
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:26
	if(flag)   //有数据
    a472:	7823      	ldrb	r3, [r4, #0]
    a474:	2b00      	cmp	r3, #0
    a476:	d001      	beq.n	a47c <UART0_IRQHandler+0x1c>
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:28
	{
	   if(ch == 'q')
    a478:	2871      	cmp	r0, #113	; 0x71
    a47a:	d002      	beq.n	a482 <UART0_IRQHandler+0x22>
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:42
	   }
	
		//uart_send1(UART_User,ch);//回发接收到的字节
	}
	//------------------------------------------------------------------
	ENABLE_INTERRUPTS;       //开总中断
    a47c:	b662      	cpsie	i
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:43
}
    a47e:	b003      	add	sp, #12
    a480:	bdf0      	pop	{r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:30
          mcu_temp_AD = adc_read(AD_MCU_TEMP);
    a482:	3857      	subs	r0, #87	; 0x57
    a484:	f7fe fec2 	bl	920c <adc_read>
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:31
          mcu_temp=TempTrans(mcu_temp_AD);
    a488:	f7fe ff68 	bl	935c <TempTrans>
    a48c:	1c06      	adds	r6, r0, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:32
          uint8_t friction=(((int)(mcu_temp*10.0))%10)*10+((int)(mcu_temp*100.0))%10;
    a48e:	f7fe fda3 	bl	8fd8 <__aeabi_f2d>
    a492:	0004      	movs	r4, r0
    a494:	000d      	movs	r5, r1
    a496:	2200      	movs	r2, #0
    a498:	4b12      	ldr	r3, [pc, #72]	; (a4e4 <UART0_IRQHandler+0x84>)
    a49a:	f7fd ff41 	bl	8320 <__aeabi_dmul>
    a49e:	f7fe fcf9 	bl	8e94 <__aeabi_d2iz>
    a4a2:	210a      	movs	r1, #10
    a4a4:	f7fc fd70 	bl	6f88 <__aeabi_idivmod>
    a4a8:	008b      	lsls	r3, r1, #2
    a4aa:	18c9      	adds	r1, r1, r3
    a4ac:	004b      	lsls	r3, r1, #1
    a4ae:	b2df      	uxtb	r7, r3
    a4b0:	2200      	movs	r2, #0
    a4b2:	4b0d      	ldr	r3, [pc, #52]	; (a4e8 <UART0_IRQHandler+0x88>)
    a4b4:	0020      	movs	r0, r4
    a4b6:	0029      	movs	r1, r5
    a4b8:	f7fd ff32 	bl	8320 <__aeabi_dmul>
    a4bc:	f7fe fcea 	bl	8e94 <__aeabi_d2iz>
    a4c0:	210a      	movs	r1, #10
    a4c2:	f7fc fd61 	bl	6f88 <__aeabi_idivmod>
    a4c6:	b2cb      	uxtb	r3, r1
    a4c8:	18fb      	adds	r3, r7, r3
    a4ca:	b2dc      	uxtb	r4, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:33
          temp[0] = (char)mcu_temp;
    a4cc:	1c30      	adds	r0, r6, #0
    a4ce:	f7fd fab3 	bl	7a38 <__aeabi_f2iz>
    a4d2:	a901      	add	r1, sp, #4
    a4d4:	7008      	strb	r0, [r1, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:34
          temp[1] = (char)friction;//MCU的温度
    a4d6:	704c      	strb	r4, [r1, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:35
          temp[2] = '\0';
    a4d8:	2300      	movs	r3, #0
    a4da:	708b      	strb	r3, [r1, #2]
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:36
         uart_send_string(UART_User,temp);
    a4dc:	2000      	movs	r0, #0
    a4de:	f7ff fc9b 	bl	9e18 <uart_send_string>
    a4e2:	e7cb      	b.n	a47c <UART0_IRQHandler+0x1c>
    a4e4:	40240000 	.word	0x40240000
    a4e8:	40590000 	.word	0x40590000

0000a4ec <TPM1_IRQHandler>:
TPM1_IRQHandler():
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:46

void TIMER_USER_Handler()
{
    a4ec:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:48
     
    DISABLE_INTERRUPTS;
    a4ee:	b672      	cpsid	i
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:49
	timer_clear_int(TIMER_USER);
    a4f0:	2001      	movs	r0, #1
    a4f2:	f7fe ff61 	bl	93b8 <timer_clear_int>
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:52
//	printf("==\r\n");
   
    ENABLE_INTERRUPTS;   //开总中断
    a4f6:	b662      	cpsie	i
D:\app_for_qianrushi\exam\16\Debug/srcc/isr.c:53
}
    a4f8:	bd10      	pop	{r4, pc}

0000a4fa <printk_putc>:
printk_putc():
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:26
//功能概要：通过串口打出一个字符
//参数说明：data:数据：通过串口发送的一字节数据
//函数返回：无
//======================================================================
static void printk_putc(int c, int *count, PRINTK_INFO *info)
{
    a4fa:	b510      	push	{r4, lr}
    a4fc:	000c      	movs	r4, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:27
	switch (info->dest) {
    a4fe:	6813      	ldr	r3, [r2, #0]
    a500:	2b01      	cmp	r3, #1
    a502:	d005      	beq.n	a510 <printk_putc+0x16>
    a504:	2b02      	cmp	r3, #2
    a506:	d007      	beq.n	a518 <printk_putc+0x1e>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:38
		++(info->loc);
		break;
	default:
		break;
	}
	*count += 1;
    a508:	6823      	ldr	r3, [r4, #0]
    a50a:	3301      	adds	r3, #1
    a50c:	6023      	str	r3, [r4, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:39
}
    a50e:	bd10      	pop	{r4, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:29
		info->func((char) c);
    a510:	6853      	ldr	r3, [r2, #4]
    a512:	b240      	sxtb	r0, r0
    a514:	4798      	blx	r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:30
		break;
    a516:	e7f7      	b.n	a508 <printk_putc+0xe>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:32
		*(info->loc) = (unsigned char) c;
    a518:	6893      	ldr	r3, [r2, #8]
    a51a:	7018      	strb	r0, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:33
		++(info->loc);
    a51c:	6893      	ldr	r3, [r2, #8]
    a51e:	3301      	adds	r3, #1
    a520:	6093      	str	r3, [r2, #8]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:34
		break;
    a522:	e7f1      	b.n	a508 <printk_putc+0xe>

0000a524 <printk_mknumstr>:
printk_mknumstr():
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:126
//       neg:有无符号:判断数据时有符号还是无符号整形
//       radix:格式选择:确定输出格式例如：十进制或十六进制...
//函数返回：无
//======================================================================
static int printk_mknumstr(char *numstr, void *nump, int neg, int radix)
{
    a524:	b5f0      	push	{r4, r5, r6, r7, lr}
    a526:	b083      	sub	sp, #12
    a528:	0016      	movs	r6, r2
    a52a:	001d      	movs	r5, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:134
	int nlen;
	char *nstrp;

	nlen = 0;
	nstrp = numstr;
	*nstrp++ = '\0';
    a52c:	1c47      	adds	r7, r0, #1
    a52e:	2300      	movs	r3, #0
    a530:	7003      	strb	r3, [r0, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:136

	if (neg) {
    a532:	2a00      	cmp	r2, #0
    a534:	d01f      	beq.n	a576 <printk_mknumstr+0x52>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:137
		a = *(int *) nump;
    a536:	680c      	ldr	r4, [r1, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:138
		if (a == 0) {
    a538:	2c00      	cmp	r4, #0
    a53a:	d001      	beq.n	a540 <printk_mknumstr+0x1c>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:132
	nlen = 0;
    a53c:	2600      	movs	r6, #0
    a53e:	e00b      	b.n	a558 <printk_mknumstr+0x34>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:139
			*nstrp = '0';
    a540:	3330      	adds	r3, #48	; 0x30
    a542:	7043      	strb	r3, [r0, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:140
			++nlen;
    a544:	2601      	movs	r6, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:176
			*nstrp++ = (char) uc;
			++nlen;
		}
	}
	done: return nlen;
}
    a546:	0030      	movs	r0, r6
    a548:	b003      	add	sp, #12
    a54a:	bdf0      	pop	{r4, r5, r6, r7, pc}
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:147
				c = ~c + 1 + '0';
    a54c:	2330      	movs	r3, #48	; 0x30
    a54e:	1a59      	subs	r1, r3, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:152
			*nstrp++ = (char) c;
    a550:	7039      	strb	r1, [r7, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:153
			++nlen;
    a552:	3601      	adds	r6, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:152
			*nstrp++ = (char) c;
    a554:	3701      	adds	r7, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:151
			a = b;
    a556:	9c01      	ldr	r4, [sp, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:143
		while (a != 0) {
    a558:	2c00      	cmp	r4, #0
    a55a:	d0f4      	beq.n	a546 <printk_mknumstr+0x22>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:144
			b = (int) a / (int) radix;
    a55c:	0029      	movs	r1, r5
    a55e:	0020      	movs	r0, r4
    a560:	f7fc fc2c 	bl	6dbc <__divsi3>
    a564:	9001      	str	r0, [sp, #4]
    a566:	0029      	movs	r1, r5
    a568:	0020      	movs	r0, r4
    a56a:	f7fc fd0d 	bl	6f88 <__aeabi_idivmod>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:146
			if (c < 0) {
    a56e:	2900      	cmp	r1, #0
    a570:	dbec      	blt.n	a54c <printk_mknumstr+0x28>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:149
				c = c + '0';
    a572:	3130      	adds	r1, #48	; 0x30
    a574:	e7ec      	b.n	a550 <printk_mknumstr+0x2c>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:156
		ua = *(unsigned int *) nump;
    a576:	680c      	ldr	r4, [r1, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:157
		if (ua == 0) {
    a578:	2c00      	cmp	r4, #0
    a57a:	d108      	bne.n	a58e <printk_mknumstr+0x6a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:158
			*nstrp = '0';
    a57c:	2330      	movs	r3, #48	; 0x30
    a57e:	7043      	strb	r3, [r0, #1]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:159
			++nlen;
    a580:	2601      	movs	r6, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:160
			goto done;
    a582:	e7e0      	b.n	a546 <printk_mknumstr+0x22>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:168
				uc = uc - 10 + 'A';
    a584:	3437      	adds	r4, #55	; 0x37
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:171
			*nstrp++ = (char) uc;
    a586:	703c      	strb	r4, [r7, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:172
			++nlen;
    a588:	3601      	adds	r6, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:171
			*nstrp++ = (char) uc;
    a58a:	3701      	adds	r7, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:170
			ua = ub;
    a58c:	0004      	movs	r4, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:162
		while (ua != 0) {
    a58e:	2c00      	cmp	r4, #0
    a590:	d0d9      	beq.n	a546 <printk_mknumstr+0x22>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:163
			ub = (unsigned int) ua / (unsigned int) radix;
    a592:	0029      	movs	r1, r5
    a594:	0020      	movs	r0, r4
    a596:	f7fc fb87 	bl	6ca8 <__udivsi3>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:164
			uc = (unsigned int) ua - ((unsigned int) ub * (unsigned int) radix);
    a59a:	0003      	movs	r3, r0
    a59c:	436b      	muls	r3, r5
    a59e:	1ae4      	subs	r4, r4, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:165
			if (uc < 10) {
    a5a0:	2c09      	cmp	r4, #9
    a5a2:	d8ef      	bhi.n	a584 <printk_mknumstr+0x60>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:166
				uc = uc + '0';
    a5a4:	3430      	adds	r4, #48	; 0x30
    a5a6:	e7ee      	b.n	a586 <printk_mknumstr+0x62>

0000a5a8 <printk_pad_zero>:
printk_pad_zero():
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:179
/********************************************************************/
static void printk_pad_zero(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
    a5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5aa:	0004      	movs	r4, r0
    a5ac:	000d      	movs	r5, r1
    a5ae:	0017      	movs	r7, r2
    a5b0:	001e      	movs	r6, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:182
	int i;

	for (i = curlen; i < field_width; i++) {
    a5b2:	e005      	b.n	a5c0 <printk_pad_zero+0x18>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:183 (discriminator 3)
		printk_putc('0', count, info);
    a5b4:	0032      	movs	r2, r6
    a5b6:	0039      	movs	r1, r7
    a5b8:	2030      	movs	r0, #48	; 0x30
    a5ba:	f7ff ff9e 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:182 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
    a5be:	3401      	adds	r4, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:182 (discriminator 1)
    a5c0:	42ac      	cmp	r4, r5
    a5c2:	dbf7      	blt.n	a5b4 <printk_pad_zero+0xc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:185
	}
}
    a5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a5c6 <printk_pad_space>:
printk_pad_space():
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:189

/********************************************************************/
static void printk_pad_space(int curlen, int field_width, int *count,
		PRINTK_INFO *info) {
    a5c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a5c8:	0004      	movs	r4, r0
    a5ca:	000d      	movs	r5, r1
    a5cc:	0017      	movs	r7, r2
    a5ce:	001e      	movs	r6, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:192
	int i;

	for (i = curlen; i < field_width; i++) {
    a5d0:	e005      	b.n	a5de <printk_pad_space+0x18>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:193 (discriminator 3)
		printk_putc(' ', count, info);
    a5d2:	0032      	movs	r2, r6
    a5d4:	0039      	movs	r1, r7
    a5d6:	2020      	movs	r0, #32
    a5d8:	f7ff ff8f 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:192 (discriminator 3)
	for (i = curlen; i < field_width; i++) {
    a5dc:	3401      	adds	r4, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:192 (discriminator 1)
    a5de:	42ac      	cmp	r4, r5
    a5e0:	dbf7      	blt.n	a5d2 <printk_pad_space+0xc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:195
	}
}
    a5e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a5e4 <out_char>:
out_char():
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:17
void out_char(char data) {
    a5e4:	b510      	push	{r4, lr}
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:18
	uart_send1(UART_printf, data);
    a5e6:	b2c1      	uxtb	r1, r0
    a5e8:	2002      	movs	r0, #2
    a5ea:	f7ff fbe7 	bl	9dbc <uart_send1>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:19
}
    a5ee:	bd10      	pop	{r4, pc}

0000a5f0 <printk_mkfloatstr>:
printk_mkfloatstr():
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:47
{
    a5f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5f2:	46d6      	mov	lr, sl
    a5f4:	464f      	mov	r7, r9
    a5f6:	b580      	push	{r7, lr}
    a5f8:	b09b      	sub	sp, #108	; 0x6c
    a5fa:	0004      	movs	r4, r0
    a5fc:	4689      	mov	r9, r1
    a5fe:	0015      	movs	r5, r2
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:48
	uint32_t p,i,j,k,a[5]={0},b[19]={0};
    a600:	2214      	movs	r2, #20
    a602:	2100      	movs	r1, #0
    a604:	a815      	add	r0, sp, #84	; 0x54
    a606:	f000 fb82 	bl	ad0e <memset>
    a60a:	224c      	movs	r2, #76	; 0x4c
    a60c:	2100      	movs	r1, #0
    a60e:	a802      	add	r0, sp, #8
    a610:	f000 fb7d 	bl	ad0e <memset>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:55
	p=(uint32_t)*f;//整数部分
    a614:	6826      	ldr	r6, [r4, #0]
    a616:	6867      	ldr	r7, [r4, #4]
    a618:	0030      	movs	r0, r6
    a61a:	0039      	movs	r1, r7
    a61c:	f7fc fd52 	bl	70c4 <__aeabi_d2uiz>
    a620:	4682      	mov	sl, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:56
	tempf=(*f-p);
    a622:	f7fe fca7 	bl	8f74 <__aeabi_ui2d>
    a626:	0002      	movs	r2, r0
    a628:	000b      	movs	r3, r1
    a62a:	0030      	movs	r0, r6
    a62c:	0039      	movs	r1, r7
    a62e:	f7fe f8e9 	bl	8804 <__aeabi_dsub>
    a632:	0006      	movs	r6, r0
    a634:	000f      	movs	r7, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:57
	if(precision_width==0)
    a636:	2d00      	cmp	r5, #0
    a638:	d10e      	bne.n	a658 <printk_mkfloatstr+0x68>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:58
	q=(*f-p)*100000000000000000;//小数部分
    a63a:	4a4b      	ldr	r2, [pc, #300]	; (a768 <printk_mkfloatstr+0x178>)
    a63c:	4b4b      	ldr	r3, [pc, #300]	; (a76c <printk_mkfloatstr+0x17c>)
    a63e:	f7fd fe6f 	bl	8320 <__aeabi_dmul>
    a642:	f7fc fd5d 	bl	7100 <__aeabi_d2ulz>
    a646:	0004      	movs	r4, r0
    a648:	9101      	str	r1, [sp, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:66
	k=0;
    a64a:	2500      	movs	r5, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:67
	while(m<1)
    a64c:	e015      	b.n	a67a <printk_mkfloatstr+0x8a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:62
		tempf*=10;
    a64e:	2200      	movs	r2, #0
    a650:	4b47      	ldr	r3, [pc, #284]	; (a770 <printk_mkfloatstr+0x180>)
    a652:	f7fd fe65 	bl	8320 <__aeabi_dmul>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:61
		while(precision_width--)
    a656:	0025      	movs	r5, r4
    a658:	1e6c      	subs	r4, r5, #1
    a65a:	2d00      	cmp	r5, #0
    a65c:	d1f7      	bne.n	a64e <printk_mkfloatstr+0x5e>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:63
		q=tempf;
    a65e:	f7fc fd4f 	bl	7100 <__aeabi_d2ulz>
    a662:	0004      	movs	r4, r0
    a664:	9101      	str	r1, [sp, #4]
    a666:	e7f0      	b.n	a64a <printk_mkfloatstr+0x5a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:69
		m=m*10;
    a668:	2200      	movs	r2, #0
    a66a:	4b41      	ldr	r3, [pc, #260]	; (a770 <printk_mkfloatstr+0x180>)
    a66c:	0030      	movs	r0, r6
    a66e:	0039      	movs	r1, r7
    a670:	f7fd fe56 	bl	8320 <__aeabi_dmul>
    a674:	0006      	movs	r6, r0
    a676:	000f      	movs	r7, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:70
		k++;
    a678:	3501      	adds	r5, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:67
	while(m<1)
    a67a:	2200      	movs	r2, #0
    a67c:	4b3d      	ldr	r3, [pc, #244]	; (a774 <printk_mkfloatstr+0x184>)
    a67e:	0030      	movs	r0, r6
    a680:	0039      	movs	r1, r7
    a682:	f7fc fc9d 	bl	6fc0 <__aeabi_dcmplt>
    a686:	2800      	cmp	r0, #0
    a688:	d1ee      	bne.n	a668 <printk_mkfloatstr+0x78>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:72
	k--;          //记录小数点后到第一位不为零的小数之前 有多少个0.
    a68a:	1e6f      	subs	r7, r5, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:75
	if(0==p)     //整数部分为0
    a68c:	4653      	mov	r3, sl
    a68e:	2b00      	cmp	r3, #0
    a690:	d121      	bne.n	a6d6 <printk_mkfloatstr+0xe6>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:76
		c[i++]='0';
    a692:	3330      	adds	r3, #48	; 0x30
    a694:	464a      	mov	r2, r9
    a696:	7013      	strb	r3, [r2, #0]
    a698:	3b2f      	subs	r3, #47	; 0x2f
    a69a:	469a      	mov	sl, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:91
	c[i++]='.';     //小数点
    a69c:	4653      	mov	r3, sl
    a69e:	1c5d      	adds	r5, r3, #1
    a6a0:	232e      	movs	r3, #46	; 0x2e
    a6a2:	464a      	mov	r2, r9
    a6a4:	4651      	mov	r1, sl
    a6a6:	5453      	strb	r3, [r2, r1]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:92
	if(0==q)        //小数部分为0
    a6a8:	9b01      	ldr	r3, [sp, #4]
    a6aa:	4323      	orrs	r3, r4
    a6ac:	d023      	beq.n	a6f6 <printk_mkfloatstr+0x106>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:96
		j=0;
    a6ae:	2600      	movs	r6, #0
    a6b0:	e039      	b.n	a726 <printk_mkfloatstr+0x136>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:82
			a[j++]=p%10;
    a6b2:	1c75      	adds	r5, r6, #1
    a6b4:	210a      	movs	r1, #10
    a6b6:	4650      	mov	r0, sl
    a6b8:	f7fc fb7c 	bl	6db4 <__aeabi_uidivmod>
    a6bc:	00b6      	lsls	r6, r6, #2
    a6be:	ab15      	add	r3, sp, #84	; 0x54
    a6c0:	50f1      	str	r1, [r6, r3]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:83
			p/=10;
    a6c2:	210a      	movs	r1, #10
    a6c4:	4650      	mov	r0, sl
    a6c6:	f7fc faef 	bl	6ca8 <__udivsi3>
    a6ca:	4682      	mov	sl, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:82
			a[j++]=p%10;
    a6cc:	002e      	movs	r6, r5
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:80
		while(p!=0)//倒序的数字
    a6ce:	4653      	mov	r3, sl
    a6d0:	2b00      	cmp	r3, #0
    a6d2:	d1ee      	bne.n	a6b2 <printk_mkfloatstr+0xc2>
    a6d4:	e00c      	b.n	a6f0 <printk_mkfloatstr+0x100>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:79
		j=0;
    a6d6:	2600      	movs	r6, #0
    a6d8:	e7f9      	b.n	a6ce <printk_mkfloatstr+0xde>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:87
			c[i++]=a[j-1]+'0';
    a6da:	3e01      	subs	r6, #1
    a6dc:	00b2      	lsls	r2, r6, #2
    a6de:	ab15      	add	r3, sp, #84	; 0x54
    a6e0:	58d3      	ldr	r3, [r2, r3]
    a6e2:	3330      	adds	r3, #48	; 0x30
    a6e4:	464a      	mov	r2, r9
    a6e6:	4651      	mov	r1, sl
    a6e8:	5453      	strb	r3, [r2, r1]
    a6ea:	2301      	movs	r3, #1
    a6ec:	469c      	mov	ip, r3
    a6ee:	44e2      	add	sl, ip
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:85
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
    a6f0:	2e00      	cmp	r6, #0
    a6f2:	d1f2      	bne.n	a6da <printk_mkfloatstr+0xea>
    a6f4:	e7d2      	b.n	a69c <printk_mkfloatstr+0xac>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:93
		c[i++]='0';
    a6f6:	3330      	adds	r3, #48	; 0x30
    a6f8:	5553      	strb	r3, [r2, r5]
    a6fa:	3501      	adds	r5, #1
    a6fc:	e02a      	b.n	a754 <printk_mkfloatstr+0x164>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:100
			b[j++]=q%10;
    a6fe:	220a      	movs	r2, #10
    a700:	2300      	movs	r3, #0
    a702:	0020      	movs	r0, r4
    a704:	9901      	ldr	r1, [sp, #4]
    a706:	f7fc fcbd 	bl	7084 <__aeabi_uldivmod>
    a70a:	1c73      	adds	r3, r6, #1
    a70c:	469a      	mov	sl, r3
    a70e:	00b6      	lsls	r6, r6, #2
    a710:	ab02      	add	r3, sp, #8
    a712:	50f2      	str	r2, [r6, r3]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:101
			q/=10;
    a714:	220a      	movs	r2, #10
    a716:	2300      	movs	r3, #0
    a718:	0020      	movs	r0, r4
    a71a:	9901      	ldr	r1, [sp, #4]
    a71c:	f7fc fcb2 	bl	7084 <__aeabi_uldivmod>
    a720:	0004      	movs	r4, r0
    a722:	9101      	str	r1, [sp, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:100
			b[j++]=q%10;
    a724:	4656      	mov	r6, sl
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:98
		while(q!=0)//倒序的数字
    a726:	9b01      	ldr	r3, [sp, #4]
    a728:	4323      	orrs	r3, r4
    a72a:	d1e8      	bne.n	a6fe <printk_mkfloatstr+0x10e>
    a72c:	e005      	b.n	a73a <printk_mkfloatstr+0x14a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:105
			b[j++]=0;
    a72e:	00b3      	lsls	r3, r6, #2
    a730:	2200      	movs	r2, #0
    a732:	a902      	add	r1, sp, #8
    a734:	505a      	str	r2, [r3, r1]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:106
			k--;
    a736:	3f01      	subs	r7, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:105
			b[j++]=0;
    a738:	3601      	adds	r6, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:103
		while(k!=0)
    a73a:	2f00      	cmp	r7, #0
    a73c:	d1f7      	bne.n	a72e <printk_mkfloatstr+0x13e>
    a73e:	e007      	b.n	a750 <printk_mkfloatstr+0x160>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:110
			c[i++]=b[j-1]+'0';
    a740:	3e01      	subs	r6, #1
    a742:	00b3      	lsls	r3, r6, #2
    a744:	aa02      	add	r2, sp, #8
    a746:	589b      	ldr	r3, [r3, r2]
    a748:	3330      	adds	r3, #48	; 0x30
    a74a:	464a      	mov	r2, r9
    a74c:	5553      	strb	r3, [r2, r5]
    a74e:	3501      	adds	r5, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:108
		while(j>0)//将倒序数字转为正序，并转换为对应的字符形式
    a750:	2e00      	cmp	r6, #0
    a752:	d1f5      	bne.n	a740 <printk_mkfloatstr+0x150>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:114
	c[i]='\0';
    a754:	464b      	mov	r3, r9
    a756:	195b      	adds	r3, r3, r5
    a758:	2200      	movs	r2, #0
    a75a:	701a      	strb	r2, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:116
}
    a75c:	0028      	movs	r0, r5
    a75e:	b01b      	add	sp, #108	; 0x6c
    a760:	bc0c      	pop	{r2, r3}
    a762:	4691      	mov	r9, r2
    a764:	469a      	mov	sl, r3
    a766:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a768:	85d8a000 	.word	0x85d8a000
    a76c:	43763457 	.word	0x43763457
    a770:	40240000 	.word	0x40240000
    a774:	3ff00000 	.word	0x3ff00000

0000a778 <printk>:
printk():
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:204
//       fmt:输出格式信息
//       ap:va_list指针指向格式信息输出
//函数返回：无
//======================================================================
int printk(PRINTK_INFO *info, const char *fmt, char * ap)
{
    a778:	b5f0      	push	{r4, r5, r6, r7, lr}
    a77a:	46de      	mov	lr, fp
    a77c:	4657      	mov	r7, sl
    a77e:	464e      	mov	r6, r9
    a780:	4645      	mov	r5, r8
    a782:	b5e0      	push	{r5, r6, r7, lr}
    a784:	b095      	sub	sp, #84	; 0x54
    a786:	9000      	str	r0, [sp, #0]
    a788:	000d      	movs	r5, r1
    a78a:	4690      	mov	r8, r2
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:228

	}un1;*/
	char *p;
	int c;
	//char temp1;
	char vstr[33]={'0'};
    a78c:	ac0b      	add	r4, sp, #44	; 0x2c
    a78e:	2221      	movs	r2, #33	; 0x21
    a790:	2100      	movs	r1, #0
    a792:	0020      	movs	r0, r4
    a794:	f000 fabb 	bl	ad0e <memset>
    a798:	2330      	movs	r3, #48	; 0x30
    a79a:	7023      	strb	r3, [r4, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:249
	int *ivalp;
	char *sval;
	int cval;
	unsigned int uval;

	count = 0;
    a79c:	2300      	movs	r3, #0
    a79e:	930a      	str	r3, [sp, #40]	; 0x28
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:251
	length_modifier=0;
	precision_used=TRUE;
    a7a0:	3301      	adds	r3, #1
    a7a2:	9301      	str	r3, [sp, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:250
	length_modifier=0;
    a7a4:	2300      	movs	r3, #0
    a7a6:	469a      	mov	sl, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:253
	//从格式字符串第一个字符开始格式化输出数据
	for (p = (char *) fmt; (c = *p) != 0; p++)
    a7a8:	e00b      	b.n	a7c2 <printk+0x4a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:265
			if (c != '\n') {
				printk_putc(c, &count, info);
			}
			//输出换行符
			else {
				printk_putc(0x0D /* CR */, &count, info);
    a7aa:	9c00      	ldr	r4, [sp, #0]
    a7ac:	0022      	movs	r2, r4
    a7ae:	a90a      	add	r1, sp, #40	; 0x28
    a7b0:	200d      	movs	r0, #13
    a7b2:	f7ff fea2 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:266
				printk_putc(0x0A /* LF */, &count, info);
    a7b6:	0022      	movs	r2, r4
    a7b8:	a90a      	add	r1, sp, #40	; 0x28
    a7ba:	200a      	movs	r0, #10
    a7bc:	f7ff fe9d 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:253 (discriminator 2)
	for (p = (char *) fmt; (c = *p) != 0; p++)
    a7c0:	3501      	adds	r5, #1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:253 (discriminator 1)
    a7c2:	2000      	movs	r0, #0
    a7c4:	5628      	ldrsb	r0, [r5, r0]
    a7c6:	2800      	cmp	r0, #0
    a7c8:	d100      	bne.n	a7cc <printk+0x54>
    a7ca:	e27c      	b.n	acc6 <printk+0x54e>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:256
		if (c != '%')
    a7cc:	2825      	cmp	r0, #37	; 0x25
    a7ce:	d022      	beq.n	a816 <printk+0x9e>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:260
			if (c != '\n') {
    a7d0:	280a      	cmp	r0, #10
    a7d2:	d0ea      	beq.n	a7aa <printk+0x32>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:261
				printk_putc(c, &count, info);
    a7d4:	9a00      	ldr	r2, [sp, #0]
    a7d6:	a90a      	add	r1, sp, #40	; 0x28
    a7d8:	f7ff fe8f 	bl	a4fa <printk_putc>
    a7dc:	e7f0      	b.n	a7c0 <printk+0x48>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:283
		flags_used = 0;
		done = FALSE;
		while (!done) {
			switch (/* c = */*++p) {
			case '-':
				flags_used |= FLAGS_MINUS;
    a7de:	2301      	movs	r3, #1
    a7e0:	431e      	orrs	r6, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:204
{
    a7e2:	0005      	movs	r5, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:280
		while (!done) {
    a7e4:	2900      	cmp	r1, #0
    a7e6:	d11b      	bne.n	a820 <printk+0xa8>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:281
			switch (/* c = */*++p) {
    a7e8:	1c68      	adds	r0, r5, #1
    a7ea:	2301      	movs	r3, #1
    a7ec:	56eb      	ldrsb	r3, [r5, r3]
    a7ee:	3b20      	subs	r3, #32
    a7f0:	b2da      	uxtb	r2, r3
    a7f2:	2a10      	cmp	r2, #16
    a7f4:	d812      	bhi.n	a81c <printk+0xa4>
    a7f6:	0093      	lsls	r3, r2, #2
    a7f8:	4abe      	ldr	r2, [pc, #760]	; (aaf4 <printk+0x37c>)
    a7fa:	58d3      	ldr	r3, [r2, r3]
    a7fc:	469f      	mov	pc, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:286
				break;
			case '+':
				flags_used |= FLAGS_PLUS;
    a7fe:	2302      	movs	r3, #2
    a800:	431e      	orrs	r6, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:287
				break;
    a802:	e7ee      	b.n	a7e2 <printk+0x6a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:289
			case ' ':
				flags_used |= FLAGS_SPACE;
    a804:	2304      	movs	r3, #4
    a806:	431e      	orrs	r6, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:290
				break;
    a808:	e7eb      	b.n	a7e2 <printk+0x6a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:292
			case '0':
				flags_used |= FLAGS_ZERO;
    a80a:	2308      	movs	r3, #8
    a80c:	431e      	orrs	r6, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:293
				break;
    a80e:	e7e8      	b.n	a7e2 <printk+0x6a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:295
			case '#':
				flags_used |= FLAGS_POUND;
    a810:	2310      	movs	r3, #16
    a812:	431e      	orrs	r6, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:296
				break;
    a814:	e7e5      	b.n	a7e2 <printk+0x6a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:278
		flags_used = 0;
    a816:	2600      	movs	r6, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:279
		done = FALSE;
    a818:	2100      	movs	r1, #0
    a81a:	e7e3      	b.n	a7e4 <printk+0x6c>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:300
			default:
				/* we've gone one char too far */
				--p;
				done = TRUE;
    a81c:	2101      	movs	r1, #1
    a81e:	e7e1      	b.n	a7e4 <printk+0x6c>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:307
			}
		}


		//检查%后再下一个字符 确定输出长度
		field_width = 0;
    a820:	2400      	movs	r4, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:308
		done = FALSE;
    a822:	2300      	movs	r3, #0
    a824:	001f      	movs	r7, r3
    a826:	e000      	b.n	a82a <printk+0xb2>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:326
				field_width = (field_width * 10) + (c - '0');
				break;
			default:
				/* we've gone one char too far */
				--p;
				done = TRUE;
    a828:	000f      	movs	r7, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:309
		while (!done) {
    a82a:	2f00      	cmp	r7, #0
    a82c:	d10e      	bne.n	a84c <printk+0xd4>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:310
			switch (c = *++p) {
    a82e:	1c68      	adds	r0, r5, #1
    a830:	2301      	movs	r3, #1
    a832:	56eb      	ldrsb	r3, [r5, r3]
    a834:	001a      	movs	r2, r3
    a836:	3a30      	subs	r2, #48	; 0x30
    a838:	b2d2      	uxtb	r2, r2
    a83a:	2a09      	cmp	r2, #9
    a83c:	d8f4      	bhi.n	a828 <printk+0xb0>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:321
				field_width = (field_width * 10) + (c - '0');
    a83e:	00a2      	lsls	r2, r4, #2
    a840:	1912      	adds	r2, r2, r4
    a842:	0054      	lsls	r4, r2, #1
    a844:	3b30      	subs	r3, #48	; 0x30
    a846:	18e4      	adds	r4, r4, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:310
			switch (c = *++p) {
    a848:	0005      	movs	r5, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:322
				break;
    a84a:	e7ee      	b.n	a82a <printk+0xb2>
    a84c:	46bb      	mov	fp, r7
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:331
				break;
			}
		}
		//此时字符为%看是否有.输入
		if (/* (c = *++p) */*++p == '.') {
    a84e:	1c6f      	adds	r7, r5, #1
    a850:	2301      	movs	r3, #1
    a852:	56eb      	ldrsb	r3, [r5, r3]
    a854:	2b2e      	cmp	r3, #46	; 0x2e
    a856:	d019      	beq.n	a88c <printk+0x114>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:368
		} else {
			/* we've gone one char too far */
			--p;
#if 1
			precision_used = FALSE;
			precision_width = 0;
    a858:	2300      	movs	r3, #0
    a85a:	4699      	mov	r9, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:367
			precision_used = FALSE;
    a85c:	9301      	str	r3, [sp, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:372
#endif
		}
		//判断 输出的是否有lf、LF等
		switch (/* c = */*++p) {
    a85e:	1c6b      	adds	r3, r5, #1
    a860:	2201      	movs	r2, #1
    a862:	56aa      	ldrsb	r2, [r5, r2]
    a864:	2a68      	cmp	r2, #104	; 0x68
    a866:	d004      	beq.n	a872 <printk+0xfa>
    a868:	2a6c      	cmp	r2, #108	; 0x6c
    a86a:	d027      	beq.n	a8bc <printk+0x144>
    a86c:	2a4c      	cmp	r2, #76	; 0x4c
    a86e:	d02a      	beq.n	a8c6 <printk+0x14e>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:384
		case 'L':
			 length_modifier |= LENMOD_L;
			break;
		default:
			/* we've gone one char too far */
			--p;
    a870:	002b      	movs	r3, r5
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:389
			break;
		}

		//p为格式字符串的首地址
		switch (c = *++p) {
    a872:	1c5d      	adds	r5, r3, #1
    a874:	2001      	movs	r0, #1
    a876:	5618      	ldrsb	r0, [r3, r0]
    a878:	0003      	movs	r3, r0
    a87a:	3b58      	subs	r3, #88	; 0x58
    a87c:	b2da      	uxtb	r2, r3
    a87e:	2a20      	cmp	r2, #32
    a880:	d900      	bls.n	a884 <printk+0x10c>
    a882:	e218      	b.n	acb6 <printk+0x53e>
    a884:	0093      	lsls	r3, r2, #2
    a886:	4a9c      	ldr	r2, [pc, #624]	; (aaf8 <printk+0x380>)
    a888:	58d3      	ldr	r3, [r2, r3]
    a88a:	469f      	mov	pc, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:337
			precision_width = 0;
    a88c:	2300      	movs	r3, #0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:338
			done = FALSE;
    a88e:	2000      	movs	r0, #0
    a890:	e000      	b.n	a894 <printk+0x11c>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:359
					done = TRUE;
    a892:	4658      	mov	r0, fp
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:339
			while (!done) {
    a894:	2800      	cmp	r0, #0
    a896:	d10e      	bne.n	a8b6 <printk+0x13e>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:340
				switch ( c = *++p) {
    a898:	1c7d      	adds	r5, r7, #1
    a89a:	2201      	movs	r2, #1
    a89c:	56ba      	ldrsb	r2, [r7, r2]
    a89e:	0011      	movs	r1, r2
    a8a0:	3930      	subs	r1, #48	; 0x30
    a8a2:	b2c9      	uxtb	r1, r1
    a8a4:	2909      	cmp	r1, #9
    a8a6:	d8f4      	bhi.n	a892 <printk+0x11a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:352
				precision_width = (precision_width * 10) +	(c - '0');
    a8a8:	0099      	lsls	r1, r3, #2
    a8aa:	18c9      	adds	r1, r1, r3
    a8ac:	004b      	lsls	r3, r1, #1
    a8ae:	3a30      	subs	r2, #48	; 0x30
    a8b0:	189b      	adds	r3, r3, r2
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:340
				switch ( c = *++p) {
    a8b2:	002f      	movs	r7, r5
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:355
					break;
    a8b4:	e7ee      	b.n	a894 <printk+0x11c>
    a8b6:	4699      	mov	r9, r3
    a8b8:	003d      	movs	r5, r7
    a8ba:	e7d0      	b.n	a85e <printk+0xe6>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:377
			 length_modifier |= LENMOD_l;
    a8bc:	2201      	movs	r2, #1
    a8be:	4651      	mov	r1, sl
    a8c0:	4311      	orrs	r1, r2
    a8c2:	468a      	mov	sl, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:378
			break;
    a8c4:	e7d5      	b.n	a872 <printk+0xfa>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:380
			 length_modifier |= LENMOD_L;
    a8c6:	2202      	movs	r2, #2
    a8c8:	4651      	mov	r1, sl
    a8ca:	4311      	orrs	r1, r2
    a8cc:	468a      	mov	sl, r1
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:381
			break;
    a8ce:	e7d0      	b.n	a872 <printk+0xfa>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:394
		case 'd':
		case 'i':
			//此时ap为指向可变参数列表的第一个参数
			//返回当前参数，并将ap指向下一个参数
			ival = (int) va_arg(ap, int);  
    a8d0:	4643      	mov	r3, r8
    a8d2:	3304      	adds	r3, #4
    a8d4:	9302      	str	r3, [sp, #8]
    a8d6:	4643      	mov	r3, r8
    a8d8:	681b      	ldr	r3, [r3, #0]
    a8da:	9309      	str	r3, [sp, #36]	; 0x24
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:396
			//将整型转换成字符型保存在vstr中，返回字符数vlen
			vlen = printk_mknumstr(vstr, &ival, TRUE, 10);
    a8dc:	230a      	movs	r3, #10
    a8de:	2201      	movs	r2, #1
    a8e0:	a909      	add	r1, sp, #36	; 0x24
    a8e2:	a80b      	add	r0, sp, #44	; 0x2c
    a8e4:	f7ff fe1e 	bl	a524 <printk_mknumstr>
    a8e8:	4681      	mov	r9, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:398
			//指向转换后的最后一个字符
			vstrp = &vstr[vlen];  
    a8ea:	af0b      	add	r7, sp, #44	; 0x2c
    a8ec:	444f      	add	r7, r9
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:401

			//若参数小于0，添加'-'号，并将字符长度加1
			if (ival < 0) {
    a8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a8f0:	2b00      	cmp	r3, #0
    a8f2:	db07      	blt.n	a904 <printk+0x18c>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:407
				schar = '-';
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
    a8f4:	07b3      	lsls	r3, r6, #30
    a8f6:	d519      	bpl.n	a92c <printk+0x1b4>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:409
					schar = '+';
					++vlen;
    a8f8:	2301      	movs	r3, #1
    a8fa:	469c      	mov	ip, r3
    a8fc:	44e1      	add	r9, ip
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:408
					schar = '+';
    a8fe:	332a      	adds	r3, #42	; 0x2a
    a900:	4698      	mov	r8, r3
    a902:	e004      	b.n	a90e <printk+0x196>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:403
				++vlen;
    a904:	2301      	movs	r3, #1
    a906:	469c      	mov	ip, r3
    a908:	44e1      	add	r9, ip
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:402
				schar = '-';
    a90a:	332c      	adds	r3, #44	; 0x2c
    a90c:	4698      	mov	r8, r3
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:424
			dschar = FALSE;

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
    a90e:	0733      	lsls	r3, r6, #28
    a910:	d51c      	bpl.n	a94c <printk+0x1d4>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:425
				if (schar)
    a912:	4643      	mov	r3, r8
    a914:	2b00      	cmp	r3, #0
    a916:	d113      	bne.n	a940 <printk+0x1c8>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:428
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
    a918:	9b00      	ldr	r3, [sp, #0]
    a91a:	aa0a      	add	r2, sp, #40	; 0x28
    a91c:	0021      	movs	r1, r4
    a91e:	4648      	mov	r0, r9
    a920:	f7ff fe42 	bl	a5a8 <printk_pad_zero>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:429
				vlen = field_width;
    a924:	46a1      	mov	r9, r4
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:394
			ival = (int) va_arg(ap, int);  
    a926:	9b02      	ldr	r3, [sp, #8]
    a928:	4698      	mov	r8, r3
    a92a:	e162      	b.n	abf2 <printk+0x47a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:411
					if (IS_FLAG_SPACE(flags_used)) {
    a92c:	2304      	movs	r3, #4
    a92e:	4033      	ands	r3, r6
    a930:	4698      	mov	r8, r3
    a932:	d0ec      	beq.n	a90e <printk+0x196>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:413
						++vlen;
    a934:	2301      	movs	r3, #1
    a936:	469c      	mov	ip, r3
    a938:	44e1      	add	r9, ip
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:412
						schar = ' ';
    a93a:	331f      	adds	r3, #31
    a93c:	4698      	mov	r8, r3
    a93e:	e7e6      	b.n	a90e <printk+0x196>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:426
					printk_putc(schar, &count, info);  //输出符号
    a940:	9a00      	ldr	r2, [sp, #0]
    a942:	a90a      	add	r1, sp, #40	; 0x28
    a944:	4640      	mov	r0, r8
    a946:	f7ff fdd8 	bl	a4fa <printk_putc>
    a94a:	e7e5      	b.n	a918 <printk+0x1a0>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:431
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
    a94c:	07f3      	lsls	r3, r6, #31
    a94e:	d505      	bpl.n	a95c <printk+0x1e4>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:442
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
    a950:	4643      	mov	r3, r8
    a952:	2b00      	cmp	r3, #0
    a954:	d116      	bne.n	a984 <printk+0x20c>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:394
			ival = (int) va_arg(ap, int);  
    a956:	9b02      	ldr	r3, [sp, #8]
    a958:	4698      	mov	r8, r3
    a95a:	e14a      	b.n	abf2 <printk+0x47a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:432
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
    a95c:	9b00      	ldr	r3, [sp, #0]
    a95e:	aa0a      	add	r2, sp, #40	; 0x28
    a960:	0021      	movs	r1, r4
    a962:	4648      	mov	r0, r9
    a964:	f7ff fe2f 	bl	a5c6 <printk_pad_space>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:434
					if (schar)
    a968:	4643      	mov	r3, r8
    a96a:	2b00      	cmp	r3, #0
    a96c:	d102      	bne.n	a974 <printk+0x1fc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:394
			ival = (int) va_arg(ap, int);  
    a96e:	9b02      	ldr	r3, [sp, #8]
    a970:	4698      	mov	r8, r3
    a972:	e13e      	b.n	abf2 <printk+0x47a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:435
						printk_putc(schar, &count, info);
    a974:	9a00      	ldr	r2, [sp, #0]
    a976:	a90a      	add	r1, sp, #40	; 0x28
    a978:	4640      	mov	r0, r8
    a97a:	f7ff fdbe 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:394
			ival = (int) va_arg(ap, int);  
    a97e:	9b02      	ldr	r3, [sp, #8]
    a980:	4698      	mov	r8, r3
    a982:	e136      	b.n	abf2 <printk+0x47a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:443
				printk_putc(schar, &count, info);
    a984:	9a00      	ldr	r2, [sp, #0]
    a986:	a90a      	add	r1, sp, #40	; 0x28
    a988:	4640      	mov	r0, r8
    a98a:	f7ff fdb6 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:394
			ival = (int) va_arg(ap, int);  
    a98e:	9b02      	ldr	r3, [sp, #8]
    a990:	4698      	mov	r8, r3
    a992:	e12e      	b.n	abf2 <printk+0x47a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:457
			//实际传入变参数 函数后 浮点数变为:0x6000000040091EB8 实际是将其转化为double型数据
			//但是顺序反了，我们要做的是将后四字节提前，然后把0x60移到紧接着前四个字节后的位置。
			
			//【20200816】  XSX，解决浮点数不优化问题
			ap=ap+4;
			fval= (double)va_arg(ap,double);
    a994:	230c      	movs	r3, #12
    a996:	4443      	add	r3, r8
    a998:	469b      	mov	fp, r3
    a99a:	4643      	mov	r3, r8
    a99c:	6859      	ldr	r1, [r3, #4]
    a99e:	689f      	ldr	r7, [r3, #8]
    a9a0:	9102      	str	r1, [sp, #8]
    a9a2:	000a      	movs	r2, r1
    a9a4:	003b      	movs	r3, r7
    a9a6:	9206      	str	r2, [sp, #24]
    a9a8:	9307      	str	r3, [sp, #28]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:461
			
			//【20200816】  XSX，解决负数的浮点数输出问题
			//若参数小于0，添加'-'号，并将字符长度加1
			if (fval < 0) {
    a9aa:	2200      	movs	r2, #0
    a9ac:	2300      	movs	r3, #0
    a9ae:	9802      	ldr	r0, [sp, #8]
    a9b0:	0039      	movs	r1, r7
    a9b2:	f7fc fb05 	bl	6fc0 <__aeabi_dcmplt>
    a9b6:	2800      	cmp	r0, #0
    a9b8:	d106      	bne.n	a9c8 <printk+0x250>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:468
				fval = -fval;				//负数取它的正数
				++vlen;
			}
			//若参数不小于0，添加‘+’号或者‘ ’或者为0，并将字符长度加1
			else {
				if (IS_FLAG_PLUS(flags_used)) {
    a9ba:	07b3      	lsls	r3, r6, #30
    a9bc:	d424      	bmi.n	aa08 <printk+0x290>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:472
					schar = '+';
					++vlen;
				} else {
					if (IS_FLAG_SPACE(flags_used)) {
    a9be:	2704      	movs	r7, #4
    a9c0:	4037      	ands	r7, r6
    a9c2:	d008      	beq.n	a9d6 <printk+0x25e>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:473
						schar = ' ';
    a9c4:	2720      	movs	r7, #32
    a9c6:	e006      	b.n	a9d6 <printk+0x25e>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:463
				fval = -fval;				//负数取它的正数
    a9c8:	9a02      	ldr	r2, [sp, #8]
    a9ca:	2180      	movs	r1, #128	; 0x80
    a9cc:	0609      	lsls	r1, r1, #24
    a9ce:	187b      	adds	r3, r7, r1
    a9d0:	9206      	str	r2, [sp, #24]
    a9d2:	9307      	str	r3, [sp, #28]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:462
				schar = '-';
    a9d4:	272d      	movs	r7, #45	; 0x2d
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:483
				}
			}
			dschar = FALSE;
			
			//确定是否使用小数点精度数值
			if(precision_used)
    a9d6:	9b01      	ldr	r3, [sp, #4]
    a9d8:	2b00      	cmp	r3, #0
    a9da:	d117      	bne.n	aa0c <printk+0x294>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:491
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);
				vstrp = &vstr[0];  //指向转换后的第一个字符
			}
			else
			{	//浮点型精度到小数点后8位
				if(length_modifier==0)   
    a9dc:	4653      	mov	r3, sl
    a9de:	2b00      	cmp	r3, #0
    a9e0:	d11b      	bne.n	aa1a <printk+0x2a2>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:493
				{	//将整型转换成字符型保存在vstr中，返回字符数vlen
					vlen = printk_mkfloatstr(&fval,vstr,8);
    a9e2:	2208      	movs	r2, #8
    a9e4:	a90b      	add	r1, sp, #44	; 0x2c
    a9e6:	a806      	add	r0, sp, #24
    a9e8:	f7ff fe02 	bl	a5f0 <printk_mkfloatstr>
    a9ec:	9002      	str	r0, [sp, #8]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:511
			

			/*
			 * do the ZERO pad.
			 */
			if (IS_FLAG_ZERO(flags_used)) {
    a9ee:	0733      	lsls	r3, r6, #28
    a9f0:	d520      	bpl.n	aa34 <printk+0x2bc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:512
				if (schar)
    a9f2:	2f00      	cmp	r7, #0
    a9f4:	d118      	bne.n	aa28 <printk+0x2b0>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:515
					printk_putc(schar, &count, info);  //输出符号
				dschar = TRUE;
				printk_pad_zero(vlen, field_width, &count, info);
    a9f6:	9b00      	ldr	r3, [sp, #0]
    a9f8:	aa0a      	add	r2, sp, #40	; 0x28
    a9fa:	0021      	movs	r1, r4
    a9fc:	9802      	ldr	r0, [sp, #8]
    a9fe:	f7ff fdd3 	bl	a5a8 <printk_pad_zero>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:516
				vlen = field_width;
    aa02:	9402      	str	r4, [sp, #8]
    aa04:	af0b      	add	r7, sp, #44	; 0x2c
    aa06:	e032      	b.n	aa6e <printk+0x2f6>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:469
					schar = '+';
    aa08:	272b      	movs	r7, #43	; 0x2b
    aa0a:	e7e4      	b.n	a9d6 <printk+0x25e>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:486
				vlen = printk_mkfloatstr(&fval,vstr,precision_width);
    aa0c:	464a      	mov	r2, r9
    aa0e:	a90b      	add	r1, sp, #44	; 0x2c
    aa10:	a806      	add	r0, sp, #24
    aa12:	f7ff fded 	bl	a5f0 <printk_mkfloatstr>
    aa16:	9002      	str	r0, [sp, #8]
    aa18:	e7e9      	b.n	a9ee <printk+0x276>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:499
					vlen = printk_mkfloatstr(&fval,vstr,precision_width);
    aa1a:	464a      	mov	r2, r9
    aa1c:	a90b      	add	r1, sp, #44	; 0x2c
    aa1e:	a806      	add	r0, sp, #24
    aa20:	f7ff fde6 	bl	a5f0 <printk_mkfloatstr>
    aa24:	9002      	str	r0, [sp, #8]
    aa26:	e7e2      	b.n	a9ee <printk+0x276>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:513
					printk_putc(schar, &count, info);  //输出符号
    aa28:	9a00      	ldr	r2, [sp, #0]
    aa2a:	a90a      	add	r1, sp, #40	; 0x28
    aa2c:	0038      	movs	r0, r7
    aa2e:	f7ff fd64 	bl	a4fa <printk_putc>
    aa32:	e7e0      	b.n	a9f6 <printk+0x27e>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:518
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
    aa34:	07f3      	lsls	r3, r6, #31
    aa36:	d507      	bpl.n	aa48 <printk+0x2d0>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:529
				}
			}

			/* the string was built in reverse order, now display in */
			/* correct order */
			if (!dschar && schar) {
    aa38:	2f00      	cmp	r7, #0
    aa3a:	d0e3      	beq.n	aa04 <printk+0x28c>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:530
				printk_putc(schar, &count, info);
    aa3c:	9a00      	ldr	r2, [sp, #0]
    aa3e:	a90a      	add	r1, sp, #40	; 0x28
    aa40:	0038      	movs	r0, r7
    aa42:	f7ff fd5a 	bl	a4fa <printk_putc>
    aa46:	e7dd      	b.n	aa04 <printk+0x28c>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:519
					printk_pad_space(vlen, field_width, &count, info);  //输出空格
    aa48:	9b00      	ldr	r3, [sp, #0]
    aa4a:	aa0a      	add	r2, sp, #40	; 0x28
    aa4c:	0021      	movs	r1, r4
    aa4e:	9802      	ldr	r0, [sp, #8]
    aa50:	f7ff fdb9 	bl	a5c6 <printk_pad_space>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:521
					if (schar)
    aa54:	2f00      	cmp	r7, #0
    aa56:	d0d5      	beq.n	aa04 <printk+0x28c>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:522
						printk_putc(schar, &count, info);
    aa58:	9a00      	ldr	r2, [sp, #0]
    aa5a:	a90a      	add	r1, sp, #40	; 0x28
    aa5c:	0038      	movs	r0, r7
    aa5e:	f7ff fd4c 	bl	a4fa <printk_putc>
    aa62:	e7cf      	b.n	aa04 <printk+0x28c>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:533
			}
			while (*vstrp)
				printk_putc(*vstrp++, &count, info);
    aa64:	3701      	adds	r7, #1
    aa66:	9a00      	ldr	r2, [sp, #0]
    aa68:	a90a      	add	r1, sp, #40	; 0x28
    aa6a:	f7ff fd46 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:532
			while (*vstrp)
    aa6e:	2000      	movs	r0, #0
    aa70:	5638      	ldrsb	r0, [r7, r0]
    aa72:	2800      	cmp	r0, #0
    aa74:	d1f6      	bne.n	aa64 <printk+0x2ec>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:534
			if (IS_FLAG_MINUS(flags_used)) {
    aa76:	07f3      	lsls	r3, r6, #31
    aa78:	d401      	bmi.n	aa7e <printk+0x306>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:457
			fval= (double)va_arg(ap,double);
    aa7a:	46d8      	mov	r8, fp
    aa7c:	e6a0      	b.n	a7c0 <printk+0x48>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:535
				printk_pad_space(vlen, field_width, &count, info);
    aa7e:	9b00      	ldr	r3, [sp, #0]
    aa80:	aa0a      	add	r2, sp, #40	; 0x28
    aa82:	0021      	movs	r1, r4
    aa84:	9802      	ldr	r0, [sp, #8]
    aa86:	f7ff fd9e 	bl	a5c6 <printk_pad_space>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:457
			fval= (double)va_arg(ap,double);
    aa8a:	46d8      	mov	r8, fp
    aa8c:	e698      	b.n	a7c0 <printk+0x48>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:541
			}
            break;
        //以下是16进制整形输出
		case 'x':
		case 'X':
			uval = (unsigned int) va_arg(ap, unsigned int);
    aa8e:	4643      	mov	r3, r8
    aa90:	3304      	adds	r3, #4
    aa92:	9302      	str	r3, [sp, #8]
    aa94:	4643      	mov	r3, r8
    aa96:	681b      	ldr	r3, [r3, #0]
    aa98:	9305      	str	r3, [sp, #20]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:542
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
    aa9a:	2310      	movs	r3, #16
    aa9c:	2200      	movs	r2, #0
    aa9e:	a905      	add	r1, sp, #20
    aaa0:	a80b      	add	r0, sp, #44	; 0x2c
    aaa2:	f7ff fd3f 	bl	a524 <printk_mknumstr>
    aaa6:	4681      	mov	r9, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:543
			vstrp = &vstr[vlen];
    aaa8:	af0b      	add	r7, sp, #44	; 0x2c
    aaaa:	444f      	add	r7, r9
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:546

			dschar = FALSE;
			if (IS_FLAG_ZERO(flags_used)) {
    aaac:	2308      	movs	r3, #8
    aaae:	4033      	ands	r3, r6
    aab0:	4698      	mov	r8, r3
    aab2:	d023      	beq.n	aafc <printk+0x384>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:547
				if (IS_FLAG_POUND(flags_used)) {
    aab4:	2310      	movs	r3, #16
    aab6:	4033      	ands	r3, r6
    aab8:	4698      	mov	r8, r3
    aaba:	d10f      	bne.n	aadc <printk+0x364>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:553
					printk_putc('0', &count, info);
					printk_putc('x', &count, info);
					/*vlen += 2;*/
					dschar = TRUE;
				}
				printk_pad_zero(vlen, field_width, &count, info);
    aabc:	9b00      	ldr	r3, [sp, #0]
    aabe:	aa0a      	add	r2, sp, #40	; 0x28
    aac0:	0021      	movs	r1, r4
    aac2:	4648      	mov	r0, r9
    aac4:	f7ff fd70 	bl	a5a8 <printk_pad_zero>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:554
				vlen = field_width;
    aac8:	46a1      	mov	r9, r4
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:569
						dschar = TRUE;
					}
				}
			}

			if ((IS_FLAG_POUND(flags_used)) && !dschar) {
    aaca:	06f3      	lsls	r3, r6, #27
    aacc:	d400      	bmi.n	aad0 <printk+0x358>
    aace:	e09e      	b.n	ac0e <printk+0x496>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:569 (discriminator 1)
    aad0:	4643      	mov	r3, r8
    aad2:	2b00      	cmp	r3, #0
    aad4:	d030      	beq.n	ab38 <printk+0x3c0>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:541
			uval = (unsigned int) va_arg(ap, unsigned int);
    aad6:	9b02      	ldr	r3, [sp, #8]
    aad8:	4698      	mov	r8, r3
    aada:	e08a      	b.n	abf2 <printk+0x47a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:548
					printk_putc('0', &count, info);
    aadc:	9a00      	ldr	r2, [sp, #0]
    aade:	a90a      	add	r1, sp, #40	; 0x28
    aae0:	2030      	movs	r0, #48	; 0x30
    aae2:	f7ff fd0a 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:549
					printk_putc('x', &count, info);
    aae6:	9a00      	ldr	r2, [sp, #0]
    aae8:	a90a      	add	r1, sp, #40	; 0x28
    aaea:	2078      	movs	r0, #120	; 0x78
    aaec:	f7ff fd05 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:551
					dschar = TRUE;
    aaf0:	46d8      	mov	r8, fp
    aaf2:	e7e3      	b.n	aabc <printk+0x344>
    aaf4:	0000b554 	.word	0x0000b554
    aaf8:	0000b598 	.word	0x0000b598
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:556
				if (!IS_FLAG_MINUS(flags_used)) {
    aafc:	07f3      	lsls	r3, r6, #31
    aafe:	d4e4      	bmi.n	aaca <printk+0x352>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:557
					if (IS_FLAG_POUND(flags_used)) {
    ab00:	2310      	movs	r3, #16
    ab02:	4033      	ands	r3, r6
    ab04:	4698      	mov	r8, r3
    ab06:	d002      	beq.n	ab0e <printk+0x396>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:558
						vlen += 2;
    ab08:	2302      	movs	r3, #2
    ab0a:	469c      	mov	ip, r3
    ab0c:	44e1      	add	r9, ip
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:560
					printk_pad_space(vlen, field_width, &count, info);
    ab0e:	9b00      	ldr	r3, [sp, #0]
    ab10:	aa0a      	add	r2, sp, #40	; 0x28
    ab12:	0021      	movs	r1, r4
    ab14:	4648      	mov	r0, r9
    ab16:	f7ff fd56 	bl	a5c6 <printk_pad_space>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:561
					if (IS_FLAG_POUND(flags_used)) {
    ab1a:	4643      	mov	r3, r8
    ab1c:	2b00      	cmp	r3, #0
    ab1e:	d0d4      	beq.n	aaca <printk+0x352>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:562
						printk_putc('0', &count, info);
    ab20:	9a00      	ldr	r2, [sp, #0]
    ab22:	a90a      	add	r1, sp, #40	; 0x28
    ab24:	2030      	movs	r0, #48	; 0x30
    ab26:	f7ff fce8 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:563
						printk_putc('x', &count, info);
    ab2a:	9a00      	ldr	r2, [sp, #0]
    ab2c:	a90a      	add	r1, sp, #40	; 0x28
    ab2e:	2078      	movs	r0, #120	; 0x78
    ab30:	f7ff fce3 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:564
						dschar = TRUE;
    ab34:	46d8      	mov	r8, fp
    ab36:	e7c8      	b.n	aaca <printk+0x352>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:570
				printk_putc('0', &count, info);
    ab38:	9a00      	ldr	r2, [sp, #0]
    ab3a:	a90a      	add	r1, sp, #40	; 0x28
    ab3c:	2030      	movs	r0, #48	; 0x30
    ab3e:	f7ff fcdc 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:571
				printk_putc('x', &count, info);
    ab42:	9a00      	ldr	r2, [sp, #0]
    ab44:	a90a      	add	r1, sp, #40	; 0x28
    ab46:	2078      	movs	r0, #120	; 0x78
    ab48:	f7ff fcd7 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:572
				vlen += 2;
    ab4c:	2302      	movs	r3, #2
    ab4e:	469c      	mov	ip, r3
    ab50:	44e1      	add	r9, ip
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:541
			uval = (unsigned int) va_arg(ap, unsigned int);
    ab52:	9b02      	ldr	r3, [sp, #8]
    ab54:	4698      	mov	r8, r3
    ab56:	e04c      	b.n	abf2 <printk+0x47a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:577
			}
			goto cont_xd;
		//无符号以八进制表示的整数输出
		case 'o':
			uval = (unsigned int) va_arg(ap, unsigned int);
    ab58:	4643      	mov	r3, r8
    ab5a:	1d1f      	adds	r7, r3, #4
    ab5c:	681b      	ldr	r3, [r3, #0]
    ab5e:	9305      	str	r3, [sp, #20]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:578
			vlen = printk_mknumstr(vstr, &uval, FALSE, 8);
    ab60:	2308      	movs	r3, #8
    ab62:	2200      	movs	r2, #0
    ab64:	a905      	add	r1, sp, #20
    ab66:	a80b      	add	r0, sp, #44	; 0x2c
    ab68:	f7ff fcdc 	bl	a524 <printk_mknumstr>
    ab6c:	4681      	mov	r9, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:577
			uval = (unsigned int) va_arg(ap, unsigned int);
    ab6e:	46b8      	mov	r8, r7
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:594
			goto cont_u;
		case 'u':
			uval = (unsigned int) va_arg(ap, unsigned int);
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);

			cont_u: vstrp = &vstr[vlen];
    ab70:	af0b      	add	r7, sp, #44	; 0x2c
    ab72:	444f      	add	r7, r9
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:596

			if (IS_FLAG_ZERO(flags_used)) {
    ab74:	0733      	lsls	r3, r6, #28
    ab76:	d42f      	bmi.n	abd8 <printk+0x460>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:600
				printk_pad_zero(vlen, field_width, &count, info);
				vlen = field_width;
			} else {
				if (!IS_FLAG_MINUS(flags_used)) {
    ab78:	07f3      	lsls	r3, r6, #31
    ab7a:	d43a      	bmi.n	abf2 <printk+0x47a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:601
					printk_pad_space(vlen, field_width, &count, info);
    ab7c:	9b00      	ldr	r3, [sp, #0]
    ab7e:	aa0a      	add	r2, sp, #40	; 0x28
    ab80:	0021      	movs	r1, r4
    ab82:	4648      	mov	r0, r9
    ab84:	f7ff fd1f 	bl	a5c6 <printk_pad_space>
    ab88:	e033      	b.n	abf2 <printk+0x47a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:582
			uval = (unsigned int) va_arg(ap, unsigned int);
    ab8a:	4643      	mov	r3, r8
    ab8c:	1d1f      	adds	r7, r3, #4
    ab8e:	681b      	ldr	r3, [r3, #0]
    ab90:	9305      	str	r3, [sp, #20]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:583
			vlen = printk_mknumstr(vstr, &uval, FALSE, 2);
    ab92:	2302      	movs	r3, #2
    ab94:	2200      	movs	r2, #0
    ab96:	a905      	add	r1, sp, #20
    ab98:	a80b      	add	r0, sp, #44	; 0x2c
    ab9a:	f7ff fcc3 	bl	a524 <printk_mknumstr>
    ab9e:	4681      	mov	r9, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:582
			uval = (unsigned int) va_arg(ap, unsigned int);
    aba0:	46b8      	mov	r8, r7
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:584
			goto cont_u;
    aba2:	e7e5      	b.n	ab70 <printk+0x3f8>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:587
			uval = (unsigned int) va_arg(ap, void *);
    aba4:	4643      	mov	r3, r8
    aba6:	1d1f      	adds	r7, r3, #4
    aba8:	681b      	ldr	r3, [r3, #0]
    abaa:	9305      	str	r3, [sp, #20]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:588
			vlen = printk_mknumstr(vstr, &uval, FALSE, 16);
    abac:	2310      	movs	r3, #16
    abae:	2200      	movs	r2, #0
    abb0:	a905      	add	r1, sp, #20
    abb2:	a80b      	add	r0, sp, #44	; 0x2c
    abb4:	f7ff fcb6 	bl	a524 <printk_mknumstr>
    abb8:	4681      	mov	r9, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:587
			uval = (unsigned int) va_arg(ap, void *);
    abba:	46b8      	mov	r8, r7
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:589
			goto cont_u;
    abbc:	e7d8      	b.n	ab70 <printk+0x3f8>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:591
			uval = (unsigned int) va_arg(ap, unsigned int);
    abbe:	4643      	mov	r3, r8
    abc0:	1d1f      	adds	r7, r3, #4
    abc2:	681b      	ldr	r3, [r3, #0]
    abc4:	9305      	str	r3, [sp, #20]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:592
			vlen = printk_mknumstr(vstr, &uval, FALSE, 10);
    abc6:	230a      	movs	r3, #10
    abc8:	2200      	movs	r2, #0
    abca:	a905      	add	r1, sp, #20
    abcc:	a80b      	add	r0, sp, #44	; 0x2c
    abce:	f7ff fca9 	bl	a524 <printk_mknumstr>
    abd2:	4681      	mov	r9, r0
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:591
			uval = (unsigned int) va_arg(ap, unsigned int);
    abd4:	46b8      	mov	r8, r7
    abd6:	e7cb      	b.n	ab70 <printk+0x3f8>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:597
				printk_pad_zero(vlen, field_width, &count, info);
    abd8:	9b00      	ldr	r3, [sp, #0]
    abda:	aa0a      	add	r2, sp, #40	; 0x28
    abdc:	0021      	movs	r1, r4
    abde:	4648      	mov	r0, r9
    abe0:	f7ff fce2 	bl	a5a8 <printk_pad_zero>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:598
				vlen = field_width;
    abe4:	46a1      	mov	r9, r4
    abe6:	e004      	b.n	abf2 <printk+0x47a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:606
				}
			}

			cont_xd: while (*vstrp)
				printk_putc(*vstrp--, &count, info);
    abe8:	3f01      	subs	r7, #1
    abea:	9a00      	ldr	r2, [sp, #0]
    abec:	a90a      	add	r1, sp, #40	; 0x28
    abee:	f7ff fc84 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:605 (discriminator 1)
			cont_xd: while (*vstrp)
    abf2:	2000      	movs	r0, #0
    abf4:	5638      	ldrsb	r0, [r7, r0]
    abf6:	2800      	cmp	r0, #0
    abf8:	d1f6      	bne.n	abe8 <printk+0x470>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:608

			if (IS_FLAG_MINUS(flags_used)) {
    abfa:	07f3      	lsls	r3, r6, #31
    abfc:	d400      	bmi.n	ac00 <printk+0x488>
    abfe:	e5df      	b.n	a7c0 <printk+0x48>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:609
				printk_pad_space(vlen, field_width, &count, info);
    ac00:	9b00      	ldr	r3, [sp, #0]
    ac02:	aa0a      	add	r2, sp, #40	; 0x28
    ac04:	0021      	movs	r1, r4
    ac06:	4648      	mov	r0, r9
    ac08:	f7ff fcdd 	bl	a5c6 <printk_pad_space>
    ac0c:	e5d8      	b.n	a7c0 <printk+0x48>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:541
			uval = (unsigned int) va_arg(ap, unsigned int);
    ac0e:	9b02      	ldr	r3, [sp, #8]
    ac10:	4698      	mov	r8, r3
    ac12:	e7ee      	b.n	abf2 <printk+0x47a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:615
			}

			break;
        //字符型输出
		case 'c':
			cval = (char) va_arg(ap, unsigned int);
    ac14:	4643      	mov	r3, r8
    ac16:	1d1c      	adds	r4, r3, #4
    ac18:	2000      	movs	r0, #0
    ac1a:	5618      	ldrsb	r0, [r3, r0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:616
			printk_putc(cval, &count, info);
    ac1c:	9a00      	ldr	r2, [sp, #0]
    ac1e:	a90a      	add	r1, sp, #40	; 0x28
    ac20:	f7ff fc6b 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:615
			cval = (char) va_arg(ap, unsigned int);
    ac24:	46a0      	mov	r8, r4
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:617
			break;
    ac26:	e5cb      	b.n	a7c0 <printk+0x48>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:619
		case 's':
			sval = (char *) va_arg(ap, char *);
    ac28:	4643      	mov	r3, r8
    ac2a:	3304      	adds	r3, #4
    ac2c:	9302      	str	r3, [sp, #8]
    ac2e:	4643      	mov	r3, r8
    ac30:	681f      	ldr	r7, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:620
			if (sval) {
    ac32:	2f00      	cmp	r7, #0
    ac34:	d044      	beq.n	acc0 <printk+0x548>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:621
				vlen = strlen(sval);
    ac36:	0038      	movs	r0, r7
    ac38:	f7fe face 	bl	91d8 <strlen>
    ac3c:	9003      	str	r0, [sp, #12]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:622
				if (!IS_FLAG_MINUS(flags_used)) {
    ac3e:	2301      	movs	r3, #1
    ac40:	401e      	ands	r6, r3
    ac42:	d013      	beq.n	ac6c <printk+0x4f4>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:625
					printk_pad_space(vlen, field_width, &count, info);
				}
				if(precision_width!=0)
    ac44:	464b      	mov	r3, r9
    ac46:	2b00      	cmp	r3, #0
    ac48:	d01b      	beq.n	ac82 <printk+0x50a>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:627
				{
					while (*sval)
    ac4a:	2000      	movs	r0, #0
    ac4c:	5638      	ldrsb	r0, [r7, r0]
    ac4e:	2800      	cmp	r0, #0
    ac50:	d01b      	beq.n	ac8a <printk+0x512>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:629
					{
						if(precision_width>=1)
    ac52:	464b      	mov	r3, r9
    ac54:	2b00      	cmp	r3, #0
    ac56:	ddf8      	ble.n	ac4a <printk+0x4d2>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:631
						{
							precision_width--;
    ac58:	2301      	movs	r3, #1
    ac5a:	425b      	negs	r3, r3
    ac5c:	469c      	mov	ip, r3
    ac5e:	44e1      	add	r9, ip
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:632
							printk_putc(*sval++, &count, info);
    ac60:	3701      	adds	r7, #1
    ac62:	9a00      	ldr	r2, [sp, #0]
    ac64:	a90a      	add	r1, sp, #40	; 0x28
    ac66:	f7ff fc48 	bl	a4fa <printk_putc>
    ac6a:	e7ee      	b.n	ac4a <printk+0x4d2>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:623
					printk_pad_space(vlen, field_width, &count, info);
    ac6c:	9b00      	ldr	r3, [sp, #0]
    ac6e:	aa0a      	add	r2, sp, #40	; 0x28
    ac70:	0021      	movs	r1, r4
    ac72:	f7ff fca8 	bl	a5c6 <printk_pad_space>
    ac76:	e7e5      	b.n	ac44 <printk+0x4cc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:639
					}
				}
				else    //precision_width=0情况
				{
					while (*sval)
					   printk_putc(*sval++, &count, info);
    ac78:	3701      	adds	r7, #1
    ac7a:	9a00      	ldr	r2, [sp, #0]
    ac7c:	a90a      	add	r1, sp, #40	; 0x28
    ac7e:	f7ff fc3c 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:638
					while (*sval)
    ac82:	2000      	movs	r0, #0
    ac84:	5638      	ldrsb	r0, [r7, r0]
    ac86:	2800      	cmp	r0, #0
    ac88:	d1f6      	bne.n	ac78 <printk+0x500>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:641
				}
				if (IS_FLAG_MINUS(flags_used)) {
    ac8a:	2e00      	cmp	r6, #0
    ac8c:	d102      	bne.n	ac94 <printk+0x51c>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:619
			sval = (char *) va_arg(ap, char *);
    ac8e:	9b02      	ldr	r3, [sp, #8]
    ac90:	4698      	mov	r8, r3
    ac92:	e595      	b.n	a7c0 <printk+0x48>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:642
					printk_pad_space(vlen, field_width, &count, info);
    ac94:	9b00      	ldr	r3, [sp, #0]
    ac96:	aa0a      	add	r2, sp, #40	; 0x28
    ac98:	0021      	movs	r1, r4
    ac9a:	9803      	ldr	r0, [sp, #12]
    ac9c:	f7ff fc93 	bl	a5c6 <printk_pad_space>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:619
			sval = (char *) va_arg(ap, char *);
    aca0:	9b02      	ldr	r3, [sp, #8]
    aca2:	4698      	mov	r8, r3
    aca4:	e58c      	b.n	a7c0 <printk+0x48>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:647
				}
			}
			break;
		case 'n':
			ivalp = (int *) va_arg(ap, int *);
    aca6:	4643      	mov	r3, r8
    aca8:	681b      	ldr	r3, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:648
			*ivalp = count;
    acaa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    acac:	601a      	str	r2, [r3, #0]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:647
			ivalp = (int *) va_arg(ap, int *);
    acae:	2304      	movs	r3, #4
    acb0:	469c      	mov	ip, r3
    acb2:	44e0      	add	r8, ip
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:649
			break;
    acb4:	e584      	b.n	a7c0 <printk+0x48>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:652

		default:
			printk_putc(c, &count, info);
    acb6:	9a00      	ldr	r2, [sp, #0]
    acb8:	a90a      	add	r1, sp, #40	; 0x28
    acba:	f7ff fc1e 	bl	a4fa <printk_putc>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:653
			break;
    acbe:	e57f      	b.n	a7c0 <printk+0x48>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:619
			sval = (char *) va_arg(ap, char *);
    acc0:	9b02      	ldr	r3, [sp, #8]
    acc2:	4698      	mov	r8, r3
    acc4:	e57c      	b.n	a7c0 <printk+0x48>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:657
		}
	}
	return count;
}
    acc6:	980a      	ldr	r0, [sp, #40]	; 0x28
    acc8:	b015      	add	sp, #84	; 0x54
    acca:	bc3c      	pop	{r2, r3, r4, r5}
    accc:	4690      	mov	r8, r2
    acce:	4699      	mov	r9, r3
    acd0:	46a2      	mov	sl, r4
    acd2:	46ab      	mov	fp, r5
    acd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    acd6:	46c0      	nop			; (mov r8, r8)

0000acd8 <myprintf>:
myprintf():
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:665
//参数说明：const char *:打印参数字符串：对输入的字符串进行解析并按格式输出
//       例如： printf("c=%c\n",c); 将c按char型进行输出
//函数返回：字符串长度
//======================================================================
int myprintf(const char *fmt, ...)
{
    acd8:	b40f      	push	{r0, r1, r2, r3}
    acda:	b500      	push	{lr}
    acdc:	b085      	sub	sp, #20
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:669
	char * ap;
	int rvalue;
	PRINTK_INFO info;
	info.dest = DEST_CONSOLE;  //宏定义为1
    acde:	2301      	movs	r3, #1
    ace0:	9301      	str	r3, [sp, #4]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:670
	info.func = &out_char;     //调用的串口输出函数
    ace2:	4b05      	ldr	r3, [pc, #20]	; (acf8 <myprintf+0x20>)
    ace4:	9302      	str	r3, [sp, #8]
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:673
	//对ap 进行初始化，让它指向可变参数表里面的第一个参数
	va_start(ap, fmt); 
	rvalue = printk(&info, fmt, ap);
    ace6:	aa06      	add	r2, sp, #24
    ace8:	ca02      	ldmia	r2!, {r1}
    acea:	a801      	add	r0, sp, #4
    acec:	f7ff fd44 	bl	a778 <printk>
D:\app_for_qianrushi\exam\16\Debug/srcc/printf.c:678

	va_end(ap);

	return rvalue;
}
    acf0:	b005      	add	sp, #20
    acf2:	bc08      	pop	{r3}
    acf4:	b004      	add	sp, #16
    acf6:	4718      	bx	r3
    acf8:	0000a5e5 	.word	0x0000a5e5

0000acfc <memcpy>:
memcpy():
    acfc:	2300      	movs	r3, #0
    acfe:	b510      	push	{r4, lr}
    ad00:	429a      	cmp	r2, r3
    ad02:	d100      	bne.n	ad06 <memcpy+0xa>
    ad04:	bd10      	pop	{r4, pc}
    ad06:	5ccc      	ldrb	r4, [r1, r3]
    ad08:	54c4      	strb	r4, [r0, r3]
    ad0a:	3301      	adds	r3, #1
    ad0c:	e7f8      	b.n	ad00 <memcpy+0x4>

0000ad0e <memset>:
memset():
    ad0e:	0003      	movs	r3, r0
    ad10:	1812      	adds	r2, r2, r0
    ad12:	4293      	cmp	r3, r2
    ad14:	d100      	bne.n	ad18 <memset+0xa>
    ad16:	4770      	bx	lr
    ad18:	7019      	strb	r1, [r3, #0]
    ad1a:	3301      	adds	r3, #1
    ad1c:	e7f9      	b.n	ad12 <memset+0x4>
    ad1e:	0000      	movs	r0, r0
    ad20:	00007544 	.word	0x00007544
    ad24:	000074ee 	.word	0x000074ee
    ad28:	000074ee 	.word	0x000074ee
    ad2c:	0000761c 	.word	0x0000761c
    ad30:	000074ea 	.word	0x000074ea
    ad34:	000074ea 	.word	0x000074ea
    ad38:	00007612 	.word	0x00007612
    ad3c:	0000761c 	.word	0x0000761c
    ad40:	000074ea 	.word	0x000074ea
    ad44:	00007612 	.word	0x00007612
    ad48:	000074ea 	.word	0x000074ea
    ad4c:	0000761c 	.word	0x0000761c
    ad50:	00007620 	.word	0x00007620
    ad54:	00007620 	.word	0x00007620
    ad58:	00007620 	.word	0x00007620
    ad5c:	00007628 	.word	0x00007628
    ad60:	00007db0 	.word	0x00007db0
    ad64:	00007c22 	.word	0x00007c22
    ad68:	00007c66 	.word	0x00007c66
    ad6c:	00007bca 	.word	0x00007bca
    ad70:	00007c66 	.word	0x00007c66
    ad74:	00007d56 	.word	0x00007d56
    ad78:	00007c66 	.word	0x00007c66
    ad7c:	00007bca 	.word	0x00007bca
    ad80:	00007c22 	.word	0x00007c22
    ad84:	00007c22 	.word	0x00007c22
    ad88:	00007d56 	.word	0x00007d56
    ad8c:	00007bca 	.word	0x00007bca
    ad90:	00007bc2 	.word	0x00007bc2
    ad94:	00007bc2 	.word	0x00007bc2
    ad98:	00007bc2 	.word	0x00007bc2
    ad9c:	00007d64 	.word	0x00007d64
    ada0:	000084d8 	.word	0x000084d8
    ada4:	000083da 	.word	0x000083da
    ada8:	000083da 	.word	0x000083da
    adac:	000086f8 	.word	0x000086f8
    adb0:	000083d4 	.word	0x000083d4
    adb4:	000083d4 	.word	0x000083d4
    adb8:	000086e0 	.word	0x000086e0
    adbc:	000086f8 	.word	0x000086f8
    adc0:	000083d4 	.word	0x000083d4
    adc4:	000086e0 	.word	0x000086e0
    adc8:	000083d4 	.word	0x000083d4
    adcc:	000086f8 	.word	0x000086f8
    add0:	000086ee 	.word	0x000086ee
    add4:	000086ee 	.word	0x000086ee
    add8:	000086ee 	.word	0x000086ee
    addc:	000086fc 	.word	0x000086fc
    ade0:	000092ca 	.word	0x000092ca
    ade4:	000092ca 	.word	0x000092ca
    ade8:	000092ce 	.word	0x000092ce
    adec:	000092ce 	.word	0x000092ce
    adf0:	000092d6 	.word	0x000092d6
    adf4:	000092d6 	.word	0x000092d6
    adf8:	ebc8f8bd 	.word	0xebc8f8bd
    adfc:	72657355 	.word	0x72657355
    ae00:	616dc4b5 	.word	0x616dc4b5
    ae04:	2e2e6e69 	.word	0x2e2e6e69
    ae08:	00000a2e 	.word	0x00000a2e
    ae0c:	b344434c 	.word	0xb344434c
    ae10:	bbbccaf5 	.word	0xbbbccaf5
    ae14:	2e2e2eaf 	.word	0x2e2e2eaf
    ae18:	00000000 	.word	0x00000000
    ae1c:	a6b9c9b3 	.word	0xa6b9c9b3
    ae20:	0000000a 	.word	0x0000000a
    ae24:	f9baf0bd 	.word	0xf9baf0bd
    ae28:	e1ccabc2 	.word	0xe1ccabc2
    ae2c:	baa3beca 	.word	0xbaa3beca
    ae30:	c644434c 	.word	0xc644434c
    ae34:	b0bbc4c1 	.word	0xb0bbc4c1
    ae38:	2ee6c3e6 	.word	0x2ee6c3e6
    ae3c:	00002e2e 	.word	0x00002e2e
    ae40:	2d4c4841 	.word	0x2d4c4841
    ae44:	2d55434d 	.word	0x2d55434d
    ae48:	36334c4b 	.word	0x36334c4b
    ae4c:	00000000 	.word	0x00000000
    ae50:	64726148 	.word	0x64726148
    ae54:	65726177 	.word	0x65726177
    ae58:	7365542d 	.word	0x7365542d
    ae5c:	00000074 	.word	0x00000074
    ae60:	5f55434d 	.word	0x5f55434d
    ae64:	3a706d54 	.word	0x3a706d54
    ae68:	00000000 	.word	0x00000000
    ae6c:	20202020 	.word	0x20202020
    ae70:	00000020 	.word	0x00000020

0000ae74 <GPIO_ARR>:
    ae74:	400ff000 400ff040 400ff080 400ff0c0     ...@@..@...@...@
    ae84:	400ff100                                ...@

0000ae88 <PORT_ARR>:
    ae88:	40049000 4004a000 4004b000 4004c000     ...@...@...@...@
    ae98:	4004d000 33323130 37363534 42413938     ...@0123456789AB
    aea8:	46454443 30323032 36313730 00000000     CDEF20200716....
    aeb8:	bea12020 72657355 becae1cc baa3bfa1       ..User........
    aec8:	f8bdabbd 7355ebc8 c4b57265 6e69616d     ......User..main
    aed8:	b4d62928 2e2ed0d0 000a0d2e              ()..........

0000aee4 <UART_ARR>:
    aee4:	4006b000 4006c000                       ...@...@

0000aeec <GB_16>:
    aeec:	0080f0bd 01400080 04100220 77f40a08     ......@. ......w
    aefc:	00802083 00800ff8 04900888 3ffe12a0     . .............?
    af0c:	f9ba0000 22200220 02207fff 22903e10     .... . ".. ..>."
    af1c:	3e1023fe 22fc2250 22443e44 227c2244     .#.>P"."D>D"D"|"
    af2c:	10802944 0410abc2 7fff2410 10800410     D).......$......
    af3c:	10043ffc 1ffc1004 00041004 00040004     .?..............
    af4c:	00020002 00000001                       ........

0000af54 <nAsciiDot>:
	...
    af64:	3c180000 18183c3c 18180018 00000000     ...<<<..........
    af74:	66666600 00000024 00000000 00000000     .fff$...........
    af84:	36000000 36367f36 36367f36 00000000     ...66.666.66....
    af94:	633e1818 603e0343 183e6361 00000018     ..>cC.>`ac>.....
    afa4:	00000000 18306343 6163060c 00000000     ....Cc0...ca....
    afb4:	361c0000 3b6e1c36 6e333333 00000000     ...66.n;333n....
    afc4:	0c0c0c00 00000006 00000000 00000000     ................
    afd4:	18300000 0c0c0c0c 30180c0c 00000000     ..0........0....
    afe4:	180c0000 30303030 0c183030 00000000     ....000000......
    aff4:	00000000 ff3c6600 0000663c 00000000     .....f<.<f......
    b004:	00000000 7e181800 00001818 00000000     .......~........
	...
    b01c:	18181800 0000000c 00000000 7f000000     ................
	...
    b03c:	18180000 00000000 00000000 18306040     ............@`0.
    b04c:	0103060c 00000000 633e0000 6b6b7363     ..........>ccskk
    b05c:	3e636367 00000000 1c180000 1818181e     gcc>............
    b06c:	7e181818 00000000 633e0000 0c183060     ...~......>c`0..
    b07c:	7f630306 00000000 633e0000 603c6060     ..c.......>c``<`
    b08c:	3e636060 00000000 38300000 7f33363c     ``c>......08<63.
    b09c:	78303030 00000000 037f0000 703f0303     000x..........?p
    b0ac:	3e636060 00000000 061c0000 633f0303     ``c>..........?c
    b0bc:	3e636363 00000000 637f0000 18306060     ccc>.......c``0.
    b0cc:	0c0c0c0c 00000000 633e0000 633e6363     ..........>ccc>c
    b0dc:	3e636363 00000000 633e0000 607e6363     ccc>......>ccc~`
    b0ec:	1e306060 00000000 00000000 00001818     ``0.............
    b0fc:	00181800 00000000 00000000 00001818     ................
    b10c:	0c181800 00000000 60000000 060c1830     ...........`0...
    b11c:	6030180c 00000000 00000000 007f0000     ..0`............
    b12c:	00007f00 00000000 06000000 6030180c     ..............0`
    b13c:	060c1830 00000000 633e0000 18183063     0.........>cc0..
    b14c:	18180018 00000000 3e000000 7b7b6363     ...........>cc{{
    b15c:	3e033b7b 00000000 1c080000 7f636336     {;.>........6cc.
    b16c:	63636363 00000000 663f0000 663e6666     cccc......?fff>f
    b17c:	3f666666 00000000 663c0000 03030343     fff?......<fC...
    b18c:	3c664303 00000000 361f0000 66666666     .Cf<.......6ffff
    b19c:	1f366666 00000000 667f0000 161e1646     ff6........fF...
    b1ac:	7f664606 00000000 667f0000 161e1646     .Ff........fF...
    b1bc:	0f060606 00000000 663c0000 7b030343     ..........<fC..{
    b1cc:	5c666363 00000000 63630000 637f6363     ccf\......cccc.c
    b1dc:	63636363 00000000 183c0000 18181818     cccc......<.....
    b1ec:	3c181818 00000000 30780000 30303030     ...<......x00000
    b1fc:	1e333333 00000000 66670000 1e1e3636     333.......gf66..
    b20c:	67666636 00000000 060f0000 06060606     6ffg............
    b21c:	7f664606 00000000 77630000 636b7f7f     .Ff.......cw..kc
    b22c:	63636363 00000000 67630000 737b7f6f     cccc......cgo.{s
    b23c:	63636363 00000000 361c0000 63636363     cccc.......6cccc
    b24c:	1c366363 00000000 663f0000 063e6666     cc6.......?fff>.
    b25c:	0f060606 00000000 633e0000 63636363     ..........>ccccc
    b26c:	3e7b6b63 00007030 663f0000 363e6666     ck{>0p....?fff>6
    b27c:	67666666 00000000 633e0000 301c0663     fffg......>cc..0
    b28c:	3e636360 00000000 7e7e0000 1818185a     `cc>......~~Z...
    b29c:	3c181818 00000000 63630000 63636363     ...<......cccccc
    b2ac:	3e636363 00000000 63630000 63636363     ccc>......cccccc
    b2bc:	081c3663 00000000 63630000 6b636363     c6........ccccck
    b2cc:	36367f6b 00000000 63630000 1c1c3636     k.66......cc66..
    b2dc:	63633636 00000000 66660000 183c6666     66cc......ffff<.
    b2ec:	3c181818 00000000 637f0000 0c183061     ...<.......ca0..
    b2fc:	7f634306 00000000 0c3c0000 0c0c0c0c     .Cc.......<.....
    b30c:	3c0c0c0c 00000000 01000000 1c0e0703     ...<............
    b31c:	40607038 00000000 303c0000 30303030     8p`@......<00000
    b32c:	3c303030 00000000 63361c08 00000000     000<......6c....
	...
    b350:	0000ff00 00180c0c 00000000 00000000     ................
	...
    b368:	3e301e00 6e333333 00000000 06070000     ..0>333n........
    b378:	66361e06 3b666666 00000000 00000000     ..6ffff;........
    b388:	03633e00 3e630303 00000000 30380000     .>c...c>......80
    b398:	33363c30 6e333333 00000000 00000000     0<63333n........
    b3a8:	7f633e00 3e630303 00000000 361c0000     .>c...c>.......6
    b3b8:	060f0626 0f060606 00000000 00000000     &...............
    b3c8:	33336e00 3e333333 001e3330 06070000     .n33333>03......
    b3d8:	666e3606 67666666 00000000 18180000     .6nffffg........
    b3e8:	18181c00 3c181818 00000000 60600000     .......<......``
    b3f8:	60607000 60606060 003c6666 06070000     .p``````ff<.....
    b408:	1e366606 6766361e 00000000 181c0000     .f6..6fg........
    b418:	18181818 3c181818 00000000 00000000     .......<........
    b428:	6b7f3700 6b6b6b6b 00000000 00000000     .7.kkkkk........
    b438:	66663b00 66666666 00000000 00000000     .;ffffff........
    b448:	63633e00 3e636363 00000000 00000000     .>ccccc>........
    b458:	66663b00 3e666666 000f0606 00000000     .;fffff>........
    b468:	33336e00 3e333333 00783030 00000000     .n33333>00x.....
    b478:	466e3b00 0f060606 00000000 00000000     .;nF............
    b488:	06633e00 3e63301c 00000000 0c080000     .>c..0c>........
    b498:	0c0c3f0c 386c0c0c 00000000 00000000     .?....l8........
    b4a8:	33333300 6e333333 00000000 00000000     .333333n........
    b4b8:	66666600 183c6666 00000000 00000000     .fffff<.........
    b4c8:	63636300 367f6b6b 00000000 00000000     .ccckk.6........
    b4d8:	1c366300 63361c1c 00000000 00000000     .c6...6c........
    b4e8:	63636300 7e636363 001f3060 00000000     .cccccc~`0......
    b4f8:	18337f00 7f63060c 00000000 18700000     ..3...c.......p.
    b508:	180e1818 70181818 00000000 18180000     .......p........
    b518:	18001818 18181818 00000000 180e0000     ................
    b528:	18701818 0e181818 00000000 3b6e0000     ..p...........n;
	...
    b548:	63361c08 007f6363 00000000 0000a804     ..6ccc..........
    b558:	0000a81c 0000a81c 0000a810 0000a81c     ................
    b568:	0000a81c 0000a81c 0000a81c 0000a81c     ................
    b578:	0000a81c 0000a81c 0000a7fe 0000a81c     ................
    b588:	0000a7de 0000a81c 0000a81c 0000a80a     ................
    b598:	0000aa8e 0000acb6 0000acb6 0000acb6     ................
    b5a8:	0000acb6 0000acb6 0000acb6 0000acb6     ................
    b5b8:	0000acb6 0000acb6 0000ab8a 0000ac14     ................
    b5c8:	0000a8d0 0000acb6 0000a994 0000acb6     ................
    b5d8:	0000acb6 0000a8d0 0000acb6 0000acb6     ................
    b5e8:	0000acb6 0000acb6 0000aca6 0000ab58     ............X...
    b5f8:	0000aba4 0000acb6 0000acb6 0000ac28     ............(...
    b608:	0000acb6 0000abbe 0000acb6 0000acb6     ................
    b618:	0000aa8e                                ....

0000b61c <_init>:
_init():
    b61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b61e:	46c0      	nop			; (mov r8, r8)
    b620:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b622:	bc08      	pop	{r3}
    b624:	469e      	mov	lr, r3
    b626:	4770      	bx	lr

0000b628 <_fini>:
_fini():
    b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b62a:	46c0      	nop			; (mov r8, r8)
    b62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b62e:	bc08      	pop	{r3}
    b630:	469e      	mov	lr, r3
    b632:	4770      	bx	lr
